{"version":3,"sources":["modules/CallHistory/index.js"],"names":["CallHistory","accountInfo","callLog","callMonitor","activityMatcher","contactMatcher","options","actionTypes","_onStateChange","_callLog","ready","_callMonitor","_accountInfo","_contactMatcher","_activityMatcher","pending","store","dispatch","type","init","initSuccess","reset","resetSuccess","uniqueNumbers","_selectors","_lastProcessedNumbers","triggerMatch","sessionIds","_lastProcessedIds","monitorCalls","calls","_lastProcessedMonitorCalls","endedCalls","filter","find","call","sessionId","currentCall","length","addEndedCalls","timestamp","Date","now","currentCalls","_lastProcessedCalls","ids","forEach","shouldRemove","state","removeEndedCalls","_reducer","addSelector","country","isoCode","countryCode","map","callFrom","from","phoneNumber","callTo","to","normalizedCalls","cache","contactCache","activityCache","fromNumber","extensionNumber","toNumber","fromMatches","dataMap","toMatches","activityMatches","concat","sort","output","numberMap","addIfNotExist","number","push","addNumbersFromCall","addQuerySource","getQueriesFn","readyCheckFn","subscribe","status"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport moduleStatus from '../../enums/moduleStatus';\nimport {\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport actionTypes from './actionTypes';\nimport getCallHistoryReducer from './getCallHistoryReducer';\nimport ensureExist from '../../lib/ensureExist';\nimport normalizeNumber from '../../lib/normalizeNumber';\n\nexport default class CallHistory extends RcModule {\n  constructor({\n    accountInfo,\n    callLog,\n    callMonitor,\n    activityMatcher,\n    contactMatcher,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._accountInfo = this::ensureExist(accountInfo, 'accountInfo');\n    this._callLog = this::ensureExist(callLog, 'callLog');\n    this._activityMatcher = activityMatcher;\n    this._contactMatcher = contactMatcher;\n    this._callMonitor = callMonitor;\n    this._reducer = getCallHistoryReducer(this.actionTypes);\n\n    this.addSelector('normalizedCalls',\n      () => this._callLog.calls,\n      () => this._accountInfo.country.isoCode,\n      (calls, countryCode) => (\n        calls.map((call) => {\n          const callFrom = {\n            ...call.from,\n          };\n          if (callFrom.phoneNumber) {\n            callFrom.phoneNumber = normalizeNumber({\n              phoneNumber: callFrom.phoneNumber,\n              countryCode,\n            });\n          }\n          const callTo = {\n            ...call.to,\n          };\n          if (callTo.phoneNumber) {\n            callTo.phoneNumber = normalizeNumber({\n              phoneNumber: callTo.phoneNumber,\n              countryCode,\n            });\n          }\n          return {\n            ...call,\n            from: callFrom,\n            to: callTo,\n          };\n        })\n      ),\n    );\n\n    this.addSelector('calls',\n      this._selectors.normalizedCalls,\n      () => this.state.endedCalls,\n      () => (this._contactMatcher && this._contactMatcher.ready ?\n        this._contactMatcher.cache :\n        null),\n      () => (this._activityMatcher && this._activityMatcher.ready ?\n        this._activityMatcher.cache :\n        null),\n      (normalizedCalls, endedCalls, contactCache, activityCache) => {\n        const sessionIds = {};\n        return normalizedCalls.map((call) => {\n          sessionIds[call.sessionId] = true;\n          const fromNumber = call.from && (call.from.phoneNumber || call.from.extensionNumber);\n          const toNumber = call.to && (call.to.phoneNumber || call.to.extensionNumber);\n          return {\n            ...call,\n            fromMatches: (fromNumber && contactCache && contactCache.dataMap[fromNumber]) || [],\n            toMatches: (toNumber && contactCache && contactCache.dataMap[toNumber]) || [],\n            activityMatches: (activityCache && activityCache.dataMap[call.sessionId]) || [],\n          };\n        }).concat(endedCalls.filter(call => !sessionIds[call.sessionId]))\n          .sort(sortByStartTime);\n      },\n    );\n\n    this.addSelector('uniqueNumbers',\n      this._selectors.normalizedCalls,\n      () => this.state.endedCalls,\n      (normalizedCalls, endedCalls) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        function addNumbersFromCall(call) {\n          if (call.from && call.from.phoneNumber) {\n            addIfNotExist(call.from.phoneNumber);\n          } else if (call.from && call.from.extensionNumber) {\n            addIfNotExist(call.from.extensionNumber);\n          }\n          if (call.to && call.to.phoneNumber) {\n            addIfNotExist(call.to.phoneNumber);\n          } else if (call.to && call.to.extensionNumber) {\n            addIfNotExist(call.to.extensionNumber);\n          }\n        }\n        normalizedCalls.forEach(addNumbersFromCall);\n        endedCalls.forEach(addNumbersFromCall);\n        return output;\n      },\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          (!this._callMonitor || this._callMonitor.ready) &&\n          this._callLog.ready &&\n          this._accountInfo.ready\n        ),\n      });\n    }\n\n    this.addSelector('sessionIds',\n      () => this._callLog.calls,\n      () => this.state.endedCalls,\n      (calls, endedCalls) => {\n        const sessionIds = {};\n        return calls.map((call) => {\n          sessionIds[call.sessionId] = true;\n          return call.sessionIds;\n        }).concat(\n          endedCalls\n            .filter(call => !sessionIds[call.sessionId])\n            .map(call => call.sessionId)\n          );\n      },\n    );\n\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: this._selectors.sessionIds,\n        readyCheckFn: () => (\n          (!this._callMonitor || this._callMonitor.ready) &&\n          this._callLog.ready\n        ),\n      });\n    }\n  }\n  _onStateChange = async () => {\n    if (\n      this._callLog.ready &&\n      (!this._callMonitor || this._callMonitor.ready) &&\n      this._accountInfo.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      this.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._callLog.ready ||\n        (this._callMonitor && !this._callMonitor.ready) ||\n        !this._accountInfo.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready)\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready\n    ) {\n      const uniqueNumbers = this._selectors.uniqueNumbers();\n      if (this._lastProcessedNumbers !== uniqueNumbers) {\n        this._lastProcessedNumbers = uniqueNumbers;\n        if (this._contactMatcher && this._contactMatcher.ready) {\n          this._contactMatcher.triggerMatch();\n        }\n      }\n      const sessionIds = this._selectors.sessionIds();\n      if (this._lastProcessedIds !== sessionIds) {\n        this._lastProcessedIds = sessionIds;\n        if (this._activityMatcher && this._activityMatcher.ready) {\n          this._activityMatcher.triggerMatch();\n        }\n      }\n      if (this._callMonitor) {\n        const monitorCalls = this._callMonitor.calls;\n        if (this._lastProcessedMonitorCalls !== monitorCalls) {\n          const endedCalls = (this._lastProcessedMonitorCalls || [])\n            .filter(call => (\n              !monitorCalls.find(currentCall => call.sessionId === currentCall.sessionId)\n            ));\n          this._lastProcessedMonitorCalls = monitorCalls;\n          if (endedCalls.length) {\n            this.store.dispatch({\n              type: this.actionTypes.addEndedCalls,\n              endedCalls,\n              timestamp: Date.now(),\n            });\n          }\n        }\n      }\n      const currentCalls = this._callLog.calls;\n      if (currentCalls !== this._lastProcessedCalls) {\n        this._lastProcessedCalls = currentCalls;\n        const ids = {};\n        currentCalls.forEach((call) => {\n          ids[call.sessionId] = true;\n        });\n        const shouldRemove = this.state.endedCalls.filter(call => ids[call.sessionId]);\n        if (shouldRemove.length) {\n          this.store.dispatch({\n            type: this.actionTypes.removeEndedCalls,\n            endedCalls: shouldRemove,\n          });\n        }\n      }\n    }\n  }\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatus.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatus.pending;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n}\n"]}