{"version":3,"sources":["modules/Environment/index.js"],"names":["Environment","client","globalStorage","sdkConfig","options","actionTypes","_client","_globalStorage","_sdkConfig","_reducer","_serverStorageKey","_enabledStorageKey","registerReducer","key","reducer","types","defaultServer","server","sandbox","store","subscribe","ready","enabled","dispatch","type","init","environmentChanged","newConfig","service","setData","state","status","getItem","changed"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAKA;;;;IAIqBA,W;;;AACnB,6BAKG;AAAA,QAJDC,MAIC,QAJDA,MAIC;AAAA,QAHDC,aAGC,QAHDA,aAGC;AAAA,QAFDC,SAEC,QAFDA,SAEC;AAAA,QADEC,OACF;AAAA;;AAAA,2KAEIA,OAFJ;AAGCC;AAHD;;AAKD,UAAKC,OAAL,GAAeL,MAAf;AACA,UAAKM,cAAL,GAAsBL,aAAtB;AACA,UAAKM,UAAL,GAAkBL,SAAlB;AACA,UAAKM,QAAL,GAAgB,qCAAsB,MAAKJ,WAA3B,CAAhB;AACA,UAAKK,iBAAL,GAAyB,mBAAzB;AACA,UAAKC,kBAAL,GAA0B,oBAA1B;AACA,UAAKJ,cAAL,CAAoBK,eAApB,CAAoC;AAClCC,WAAK,MAAKH,iBADwB;AAElCI,eAAS,6CAAiB;AACxBC,eAAO,MAAKV,WADY;AAExBW,uBAAe,sBAAIC,MAAJ,CAAWC;AAFF,OAAjB;AAFyB,KAApC;AAOA,UAAKX,cAAL,CAAoBK,eAApB,CAAoC;AAClCC,WAAK,MAAKF,kBADwB;AAElCG,eAAS,8CAAkB,MAAKT,WAAvB;AAFyB,KAApC;AAlBC;AAsBF;;;;iCACY;AAAA;;AACX,WAAKc,KAAL,CAAWC,SAAX,CAAqB,YAAM;AACzB,YACE,OAAKb,cAAL,CAAoBc,KAApB,IACA,CAAC,OAAKA,KAFR,EAGE;AACA,cAAI,OAAKC,OAAT,EAAkB;AAChB,mBAAKhB,OAAL,CAAaW,MAAb,GAAsB,qDACjB,OAAKT,UADY;AAEpBS,sBAAQ,OAAKA;AAFO,eAAtB;AAID;AACD,iBAAKE,KAAL,CAAWI,QAAX,CAAoB;AAClBC,kBAAM,OAAKnB,WAAL,CAAiBoB;AADL,WAApB;AAGD;AACF,OAfD;AAgBD;;;mCAE4B;AAAA,UAAnBR,MAAmB,SAAnBA,MAAmB;AAAA,UAAXK,OAAW,SAAXA,OAAW;;AAC3B,UAAMI,qBACJ,KAAKJ,OAAL,KAAiBA,OAAjB,IACCA,WAAW,KAAKL,MAAL,KAAgBA,MAF9B;AAGA,UAAIS,kBAAJ,EAAwB;AACtB,YAAMC,uCACD,KAAKnB,UADJ,CAAN;AAGA,YAAI,KAAKc,OAAT,EAAkB;AAChBK,oBAAUV,MAAV,GAAmB,KAAKA,MAAxB;AACD;AACD,aAAKX,OAAL,CAAasB,OAAb,GAAuB,0BAAQD,SAAR,CAAvB;AACD;AACD,WAAKR,KAAL,CAAWI,QAAX,CAAoB;AAClBC,cAAM,KAAKnB,WAAL,CAAiBwB,OADL;AAElBZ,sBAFkB;AAGlBK,wBAHkB;AAIlBI;AAJkB,OAApB;AAMD;;;wBACY;AACX,aAAO,KAAKI,KAAL,CAAWC,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKD,KAAL,CAAWC,MAAX,KAAsB,uBAAaV,KAA1C;AACD;;;wBAEY;AACX,aAAO,KAAKd,cAAL,CAAoByB,OAApB,CAA4B,KAAKtB,iBAAjC,CAAP;AACD;;;wBAEa;AACZ,aAAO,KAAKH,cAAL,CAAoByB,OAApB,CAA4B,KAAKrB,kBAAjC,CAAP;AACD;;;wBAEa;AACZ,aAAO,KAAKmB,KAAL,CAAWG,OAAlB;AACD;;;;;kBAtFkBjC,W","file":"index.js","sourcesContent":["import SDK from 'ringcentral';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatus from '../../enums/moduleStatus';\nimport actionTypes from './actionTypes';\nimport getEnvironmentReducer, {\n  getServerReducer,\n  getEnabledReducer,\n} from './getEnvironmentReducer';\n\n/**\n * @class\n * @description Environment module manages which api server the app calls.\n */\nexport default class Environment extends RcModule {\n  constructor({\n    client,\n    globalStorage,\n    sdkConfig,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    this._globalStorage = globalStorage;\n    this._sdkConfig = sdkConfig;\n    this._reducer = getEnvironmentReducer(this.actionTypes);\n    this._serverStorageKey = 'environmentServer';\n    this._enabledStorageKey = 'environmentEnabled';\n    this._globalStorage.registerReducer({\n      key: this._serverStorageKey,\n      reducer: getServerReducer({\n        types: this.actionTypes,\n        defaultServer: SDK.server.sandbox,\n      }),\n    });\n    this._globalStorage.registerReducer({\n      key: this._enabledStorageKey,\n      reducer: getEnabledReducer(this.actionTypes),\n    });\n  }\n  initialize() {\n    this.store.subscribe(() => {\n      if (\n        this._globalStorage.ready &&\n        !this.ready\n      ) {\n        if (this.enabled) {\n          this._client.server = new SDK({\n            ...this._sdkConfig,\n            server: this.server,\n          });\n        }\n        this.store.dispatch({\n          type: this.actionTypes.init,\n        });\n      }\n    });\n  }\n\n  setData({ server, enabled }) {\n    const environmentChanged =\n      this.enabled !== enabled ||\n      (enabled && this.server !== server);\n    if (environmentChanged) {\n      const newConfig = {\n        ...this._sdkConfig,\n      };\n      if (this.enabled) {\n        newConfig.server = this.server;\n      }\n      this._client.service = new SDK(newConfig);\n    }\n    this.store.dispatch({\n      type: this.actionTypes.setData,\n      server,\n      enabled,\n      environmentChanged,\n    });\n  }\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatus.ready;\n  }\n\n  get server() {\n    return this._globalStorage.getItem(this._serverStorageKey);\n  }\n\n  get enabled() {\n    return this._globalStorage.getItem(this._enabledStorageKey);\n  }\n\n  get changed() {\n    return this.state.changed;\n  }\n}\n"]}