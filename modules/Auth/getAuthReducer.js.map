{"version":3,"sources":["modules/Auth/getAuthReducer.js"],"names":["getStatusReducer","getErrorReducer","getOwnerIdReducer","getFreshLoginReducer","getAuthReducer","prefix","prefixedTypes","enumMap","state","pending","type","loggedIn","login","loggingIn","loginSuccess","refreshSuccess","cancelLogout","loginError","logoutSuccess","logoutError","refreshError","notLoggedIn","logout","loggingOut","beforeLogout","init","refresh","error","token","owner_id","status","freshLogin","ownerId"],"mappings":"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","file":"getAuthReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { prefixEnum } from '../../lib/Enum';\nimport authActionTypes from './authActionTypes';\nimport authStatus from './authStatus';\n\nexport function getStatusReducer(prefix) {\n  const prefixedTypes = prefixEnum({ enumMap: authActionTypes, prefix });\n  return (state = authStatus.pending, { type, loggedIn }) => {\n    switch (type) {\n      case prefixedTypes.login:\n        return authStatus.loggingIn;\n\n      case prefixedTypes.loginSuccess:\n      case prefixedTypes.refreshSuccess:\n      case prefixedTypes.cancelLogout:\n        return authStatus.loggedIn;\n\n      case prefixedTypes.loginError:\n      case prefixedTypes.logoutSuccess:\n      case prefixedTypes.logoutError:\n      case prefixedTypes.refreshError:\n        return authStatus.notLoggedIn;\n\n      case prefixedTypes.logout:\n        return authStatus.loggingOut;\n\n      case prefixedTypes.beforeLogout:\n        return authStatus.beforeLogout;\n\n      case prefixedTypes.init:\n        return loggedIn ? authStatus.loggedIn : authStatus.notLoggedIn;\n\n      case prefixedTypes.refresh:\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getErrorReducer(prefix) {\n  const prefixedTypes = prefixEnum({ enumMap: authActionTypes, prefix });\n  return (state = null, { type, error = null }) => {\n    switch (type) {\n      case prefixedTypes.loginError:\n      case prefixedTypes.logoutError:\n      case prefixedTypes.refreshError:\n      case prefixedTypes.cancelLogout:\n        return error;\n      case prefixedTypes.login:\n      case prefixedTypes.loginSuccess:\n      case prefixedTypes.logout:\n      case prefixedTypes.logoutSuccess:\n      case prefixedTypes.refresh:\n      case prefixedTypes.refreshSuccess:\n      case prefixedTypes.beforeLogout:\n      case prefixedTypes.init:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getOwnerIdReducer(prefix) {\n  const prefixedTypes = prefixEnum({ enumMap: authActionTypes, prefix });\n  return (state = null, { type, token }) => {\n    switch (type) {\n\n      case prefixedTypes.loginSuccess:\n      case prefixedTypes.refreshSuccess:\n        return token.owner_id;\n\n      case authActionTypes.loginError:\n      case authActionTypes.logoutSuccess:\n      case authActionTypes.logoutError:\n      case authActionTypes.refreshError:\n        return null;\n\n      case prefixedTypes.init:\n        return token && token.owner_id || null;\n\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getFreshLoginReducer(prefix) {\n  const prefixedTypes = prefixEnum({ enumMap: authActionTypes, prefix });\n  return (state = null, { type, loggedIn }) => {\n    switch (type) {\n\n      case prefixedTypes.init:\n        return loggedIn ? false : null;\n\n      case prefixedTypes.login:\n        return true;\n\n      case prefixedTypes.loginError:\n      case prefixedTypes.refreshError:\n      case prefixedTypes.logoutSuccess:\n      case prefixedTypes.logoutError:\n        return null;\n\n      case prefixedTypes.cancelLogout:\n      case prefixedTypes.loginSuccess:\n      case prefixedTypes.logout:\n      case prefixedTypes.refresh:\n      case prefixedTypes.refreshSuccess:\n      case prefixedTypes.beforeLogout:\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getAuthReducer(prefix) {\n  return combineReducers({\n    status: getStatusReducer(prefix),\n    freshLogin: getFreshLoginReducer(prefix),\n    error: getErrorReducer(prefix),\n    ownerId: getOwnerIdReducer(prefix),\n  });\n}\n"]}