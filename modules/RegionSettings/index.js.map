{"version":3,"sources":["modules/RegionSettings/index.js"],"names":["RegionSettings","deps","dep","optional","storage","extensionInfo","dialingPlan","alert","tabManager","options","actionTypes","_storage","_alert","_dialingPlan","_extensionInfo","_tabManager","_countryCodeKey","_areaCodeKey","_reducer","registerReducer","key","reducer","_processedPlans","store","subscribe","ready","status","pending","dispatch","type","init","active","checkRegionSettings","plans","initSuccess","resetSuccess","warning","message","dialingPlansChanged","ttl","countryCode","getItem","find","plan","isoCode","_alertSettingsChanged","country","setData","areaCode","danger","areaCodeInvalid","trim","info","saveSuccess","state"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport getRegionSettingsReducer, {\n  getCountryCodeReducer,\n  getAreaCodeReducer,\n} from './getRegionSettingsReducer';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport regionSettingsMessages from '../RegionSettings/regionSettingsMessages';\nimport actionTypes from './actionTypes';\nimport validateAreaCode from '../../lib/validateAreaCode';\nimport proxify from '../../lib/proxy/proxify';\n\n/**\n * @class\n * @description Region settings managing module\n */\n@Module({\n  deps: [\n    'Alert',\n    'DialingPlan',\n    'ExtensionInfo',\n    'Storage',\n    { dep: 'TabManager', optional: true },\n  ],\n})\nexport default class RegionSettings extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Storage} params.storage - storage module instance\n   * @param {ExtensionInfo} params.extensionInfo - extensionInfo module instance\n   * @param {DialingPlan} params.dialingPlan - dialingPlan module instance\n   * @param {Alert} params.alert - alert module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   */\n  constructor({\n    storage,\n    extensionInfo,\n    dialingPlan,\n    alert,\n    tabManager,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._storage = storage;\n    this._alert = alert;\n    this._dialingPlan = dialingPlan;\n    this._extensionInfo = extensionInfo;\n    this._tabManager = tabManager;\n\n    this._countryCodeKey = 'regionSettingsCountryCode';\n    this._areaCodeKey = 'regionSettingsAreaCode';\n    this._reducer = getRegionSettingsReducer(this.actionTypes);\n\n    this._storage.registerReducer({\n      key: this._countryCodeKey,\n      reducer: getCountryCodeReducer(this.actionTypes),\n    });\n    this._storage.registerReducer({\n      key: this._areaCodeKey,\n      reducer: getAreaCodeReducer(this.actionTypes),\n    });\n\n    this._processedPlans = null;\n  }\n  initialize() {\n    this.store.subscribe(async () => {\n      if (\n        this._storage.ready &&\n        this._dialingPlan.ready &&\n        this._extensionInfo.ready &&\n        this.status === moduleStatuses.pending\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.init,\n        });\n        if (!this._tabManager || this._tabManager.active) {\n          await this.checkRegionSettings();\n        }\n        this._processedPlans = this._dialingPlan.plans;\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        !this._storage.ready &&\n        this.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      } else if (\n        this.ready &&\n        this._processedPlans !== this._dialingPlan.plans\n      ) {\n        this._processedPlans = this._dialingPlan.plans;\n        if (!this._tabManager || this._tabManager.active) {\n          await this.checkRegionSettings();\n        }\n      }\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get availableCountries() {\n    return this._dialingPlan.plans;\n  }\n\n  _alertSettingsChanged() {\n    this._alert.warning({\n      message: regionSettingsMessages.dialingPlansChanged,\n      ttl: 0\n    });\n  }\n\n  @proxify\n  async checkRegionSettings() {\n    let countryCode = this._storage.getItem(this._countryCodeKey);\n    if (\n      countryCode &&\n      !this._dialingPlan.plans.find(plan => (\n        plan.isoCode === countryCode\n      ))\n    ) {\n      countryCode = null;\n      this._alertSettingsChanged();\n    }\n    if (!countryCode) {\n      const country = this._dialingPlan.plans.find(plan => (\n        plan.isoCode === this._extensionInfo.country.isoCode\n      )) || this._dialingPlan.plans[0];\n      countryCode = country && country.isoCode;\n      this.store.dispatch({\n        type: this.actionTypes.setData,\n        countryCode,\n        areaCode: '',\n      });\n    }\n  }\n\n  @proxify\n  async setData({\n    areaCode,\n    countryCode,\n  }) {\n    if (!validateAreaCode(areaCode)) {\n      this._alert.danger({\n        message: regionSettingsMessages.areaCodeInvalid,\n      });\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.setData,\n      countryCode,\n      areaCode: areaCode && areaCode.trim(),\n    });\n    this._alert.info({\n      message: regionSettingsMessages.saveSuccess,\n    });\n  }\n\n  setCountryCode(countryCode) {\n    this.setData({\n      countryCode,\n    });\n  }\n\n  setAreaCode(areaCode) {\n    this.setData({\n      areaCode,\n    });\n  }\n\n  get countryCode() {\n    return this._storage.getItem(this._countryCodeKey) || 'US';\n  }\n\n  get areaCode() {\n    return this._storage.getItem(this._areaCodeKey) || '';\n  }\n}\n"]}