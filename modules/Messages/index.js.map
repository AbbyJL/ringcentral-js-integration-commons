{"version":3,"sources":["modules/Messages/index.js"],"names":["Messages","deps","dep","optional","messageStore","extensionInfo","defaultPerPage","contactMatcher","conversationLogger","options","actionTypes","_contactMatcher","_conversationLogger","_messageStore","_extensionInfo","_reducer","addSelector","conversations","messages","output","numberMap","addIfNotExist","number","push","forEach","message","from","phoneNumber","extensionNumber","to","length","toUser","state","searchInput","input","dataMapping","loggingMap","contactMapping","conversationLogMapping","map","self","correspondents","selfNumber","selfMatches","correspondentMatches","reduce","matches","contact","concat","conversationLogId","getConversationLogId","isLogging","conversationMatches","lastMatchedCorrespondentEntity","getLastMatchedCorrespondentEntity","allConversations","typeFilter","all","text","filter","conversation","voiceMail","_selectors","typeFilteredConversations","effectiveSearchString","searchResults","searchNumber","searchRegExp","RegExp","find","indexOf","matchOrder","entity","name","test","subject","matchedMessage","item","conversationId","sort","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","_lastProcessedNumbers","store","subscribe","_onStateChange","_shouldInit","_init","_shouldReset","_reset","triggerMatch","pending","dispatch","type","init","initSuccess","reset","resetSuccess","page","setPage","nextPage","updateSearchInput","updateTypeFilter","status","filteredConversations"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getMessagesReducer from './getMessagesReducer';\nimport {\n  getNumbersFromMessage,\n  sortSearchResults,\n  messageIsTextMessage,\n  messageIsVoicemail,\n} from '../../lib/messageHelper';\nimport cleanNumber from '../../lib/cleanNumber';\nimport proxify from '../../lib/proxy/proxify';\nimport messageTypes from '../../enums/messageTypes';\n\n/**\n * @class\n * @description Conversation list managing module\n */\n@Module({\n  deps: [\n    'MessageStore',\n    'ExtensionInfo',\n    { dep: 'ContactMatcher', optional: true },\n    { dep: 'ConversationLogger', optional: true },\n    { dep: 'MessagesOptions', optional: true }\n  ]\n})\nexport default class Messages extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {MessageStore} params.messageStore - messageStore module instance\n   * @param {ExtensionInfo} params.extensionInfo - extensionInfo module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {ConversationLogger} params.conversationLogger - conversationLogger module instance\n   * @param {Number} params.defaultPerPage - default numbers of perPage, default 20\n   */\n  constructor({\n    messageStore,\n    extensionInfo,\n    defaultPerPage = 20,\n    contactMatcher,\n    conversationLogger,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._contactMatcher = contactMatcher;\n    this._conversationLogger = conversationLogger;\n    this._messageStore = this::ensureExist(messageStore, 'messageStore');\n    this._extensionInfo = this::ensureExist(extensionInfo, 'extensionInfo');\n    this._reducer = getMessagesReducer(this.actionTypes, defaultPerPage);\n\n    this.addSelector('uniqueNumbers',\n      () => this._messageStore.conversations,\n      (messages) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        messages.forEach((message) => {\n          if (message.from && message.from.phoneNumber) {\n            addIfNotExist(message.from.phoneNumber);\n          } else if (message.from && message.from.extensionNumber) {\n            addIfNotExist(message.from.extensionNumber);\n          }\n          if (message.to && message.to.length > 0) {\n            message.to.forEach((toUser) => {\n              if (toUser && toUser.phoneNumber) {\n                addIfNotExist(toUser.phoneNumber);\n              } else if (toUser && toUser.extensionNumber) {\n                addIfNotExist(toUser.extensionNumber);\n              }\n            });\n          }\n        });\n        return output;\n      },\n    );\n    this.addSelector('effectiveSearchString',\n      () => this.state.searchInput,\n      (input) => {\n        if (input.length >= 3) return input;\n        return '';\n      }\n    );\n\n    this.addSelector('allConversations',\n      () => this._messageStore.conversations,\n      () => this._extensionInfo.extensionNumber,\n      () => this._contactMatcher && this._contactMatcher.dataMapping,\n      () => this._conversationLogger && this._conversationLogger.loggingMap,\n      () => this._conversationLogger && this._conversationLogger.dataMapping,\n      (\n        conversations,\n        extensionNumber,\n        contactMapping = {},\n        loggingMap = {},\n        conversationLogMapping = {},\n      ) => (\n        conversations.map((message) => {\n          const {\n            self,\n            correspondents,\n          } = getNumbersFromMessage({ extensionNumber, message });\n          const selfNumber = self && (self.phoneNumber || self.extensionNumber);\n          const selfMatches = (selfNumber && contactMapping[selfNumber]) || [];\n          const correspondentMatches = correspondents.reduce((matches, contact) => {\n            const number = contact && (contact.phoneNumber || contact.extensionNumber);\n            return number && contactMapping[number] && contactMapping[number].length ?\n              matches.concat(contactMapping[number]) :\n              matches;\n          }, []);\n          const conversationLogId = this._conversationLogger ?\n            this._conversationLogger.getConversationLogId(message) :\n            null;\n          const isLogging = !!(conversationLogId && loggingMap[conversationLogId]);\n          const conversationMatches = conversationLogMapping[conversationLogId] || [];\n          return {\n            ...message,\n            self,\n            selfMatches,\n            correspondents,\n            correspondentMatches,\n            conversationLogId,\n            isLogging,\n            conversationMatches,\n            lastMatchedCorrespondentEntity: (\n              this._conversationLogger &&\n                this._conversationLogger.getLastMatchedCorrespondentEntity(message)\n            ) || null,\n          };\n        })\n      ),\n    );\n\n    this.addSelector('typeFilteredConversations',\n      () => this.allConversations,\n      () => this.typeFilter,\n      (allConversations, typeFilter) => {\n        switch (typeFilter) {\n          case messageTypes.all:\n            return allConversations;\n          case messageTypes.text:\n            return allConversations.filter(\n              conversation => messageIsTextMessage(conversation)\n            );\n          case messageTypes.voiceMail:\n            return allConversations.filter(\n              conversation => messageIsVoicemail(conversation)\n            );\n          default:\n            return allConversations;\n        }\n      }\n    );\n\n    this.addSelector('filteredConversations',\n      this._selectors.typeFilteredConversations,\n      () => this._selectors.effectiveSearchString(),\n      (allConversations, effectiveSearchString) => {\n        if (effectiveSearchString !== '') {\n          const searchResults = [];\n          allConversations.forEach((message) => {\n            const searchNumber = cleanNumber(effectiveSearchString, false);\n            const searchRegExp = new RegExp(effectiveSearchString, 'i');\n            if (searchNumber !== '' && message.correspondents.find(contact => (\n              cleanNumber(contact.phoneNumber || contact.extensionNumber || '')\n                .indexOf(searchNumber) > -1\n            ))) {\n              // match by phoneNumber or extensionNumber\n              searchResults.push({\n                ...message,\n                matchOrder: 0,\n              });\n              return;\n            }\n            if (message.correspondentMatches.length) {\n              if (\n                message.correspondentMatches.find(entity => (\n                  entity.name && searchRegExp.test(entity.name)\n                ))\n              ) {\n                // match by entity's name\n                searchResults.push({\n                  ...message,\n                  matchOrder: 0,\n                });\n                return;\n              }\n            } else if (message.correspondents.find(contact => (\n              searchRegExp.test(contact.name || '')\n            ))) {\n              searchResults.push({\n                ...message,\n                matchOrder: 0,\n              });\n              return;\n            }\n\n            // try match messages of the same conversation\n            if (searchRegExp.test(message.subject)) {\n              searchResults.push({\n                ...message,\n                matchOrder: 1,\n              });\n              return;\n            }\n            const matchedMessage = this._messageStore.messages.find(item => (\n              item.conversationId === message.conversationId &&\n              searchRegExp.test(item.subject)\n            ));\n            if (matchedMessage) {\n              searchResults.push({\n                ...message,\n                matchedMessage,\n                matchOrder: 1,\n              });\n            }\n          });\n          return searchResults.sort(sortSearchResults);\n        }\n        return allConversations.sort(sortSearchResults);\n      },\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          this._messageStore.ready\n        ),\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    } else if (this._lastProcessedNumbers !== this.uniqueNumbers) {\n      this._lastProcessedNumbers = this.uniqueNumbers;\n      if (this._contactMatcher) {\n        this._contactMatcher.triggerMatch();\n      }\n    }\n  }\n\n  _shouldInit() {\n    return !!(\n      this._messageStore.ready &&\n      this._extensionInfo.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._conversationLogger || this._conversationLogger.ready) &&\n      this.pending\n    );\n  }\n  _init() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    if (this._contactMatcher) {\n      this._contactMatcher.triggerMatch();\n    }\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _shouldReset() {\n    return !!(\n      (\n        !this._messageStore.ready ||\n        !this._extensionInfo.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._conversationLogger && !this._conversationLogger.ready)\n      ) &&\n      this.ready\n    );\n  }\n  _reset() {\n    this.store.dispatch({\n      type: this.actionTypes.reset,\n    });\n    this._lastProcessedNumbers = null;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  async _getCurrentPageMessages(page) {\n    this.store.dispatch({\n      type: this.actionTypes.setPage,\n      page,\n    });\n  }\n\n  @proxify\n  async loadNextPageMessages() {\n    this.store.dispatch({\n      type: this.actionTypes.nextPage,\n    });\n  }\n\n  @proxify\n  async updateSearchInput(input) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchInput,\n      input,\n    });\n  }\n\n  @proxify\n  async updateTypeFilter(type) {\n    this.store.dispatch({\n      type: this.actionTypes.updateTypeFilter,\n      typeFilter: type,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatuses.pending;\n  }\n\n  get searchInput() {\n    return this.state.searchInput;\n  }\n\n  get typeFilter() {\n    return this.state.typeFilter;\n  }\n\n  get allConversations() {\n    return this._selectors.allConversations();\n  }\n\n  get filteredConversations() {\n    return this._selectors.filteredConversations();\n  }\n}\n"]}