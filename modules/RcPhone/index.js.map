{"version":3,"sources":["modules/RcPhone/index.js"],"names":["RcPhone","providers","provide","useValue","prefix","spread","useFactory","clientOptions","config","clearCacheOnRefreshError","deps","dep","optional","id","name","fullName","checkConnectionFunc","fetch","logFunction","readyCheckFunction","appKey","appName","appVersion","extensionMode","addressBook","accountContacts","moduleOptions","modules","router","webphone","contactSearch","contacts","callMonitor","contactMatcher","_onCallEndFunc","session","currentPath","currentSession","activeSession","goBack","_onCallStartFunc","push","_onCallRingFunc","ringSessions","length","forEach","toggleMinimized","addSearchProvider","searchFn","queries","matchContacts","phoneNumbers","readyCheckFn","ready","addSearchSource","sourceName","searchString","items","companyContacts","searchText","toLowerCase","filter","item","firstName","lastName","indexOf","extensionNumber","find","x","phoneNumber","formatFn","entities","map","entity","toString","type","hasProfileImage","phoneType","entityType","personalContacts","_onRinging","_webphone"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AAEA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAiGqBA,O,WA/FpB,uBAAc;AACbC,aAAW,4wCAuDT,EAAEC,SAAS,eAAX;AACEC,cAAU,EAAEC,QAAQ,UAAV,EADZ;AAEEC,YAAQ,IAFV,EAvDS,EA0DT,EAAEH,SAAS,QAAX;AACEI,gBAAY;AAAA,UAAGC,aAAH,QAAGA,aAAH;AAAA,UAAkBC,MAAlB,QAAkBA,MAAlB;AAAA,aACV,gCAAsB;AACpBC,kCAA0B;AADN,SAEjBD,MAFiB,EAGjBD,aAHiB,EAAtB,CADU;AAAA,KADd;AAOEG,UAAM,CAAC,EAAEC,KAAK,QAAP,EAAD,EAAoB,EAAEA,KAAK,eAAP,EAAwBC,UAAU,IAAlC,EAApB,CAPR,EA1DS,EAkET,EAAEV,SAAS,cAAX;AACEG,YAAQ,IADV;AAEEF,cAAU,EAAEU,IAAI,MAAN,EAAcC,MAAM,aAApB,EAAmCC,UAAU,aAA7C,EAFZ,EAlES,EAqET,EAAEb,SAAS,4BAAX;AACEC,cAAU;AACRa;AAAA,+EAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAoBC,MAAM,4BAAN,CAApB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAArB;;AAAA;AAAA;AAAA;AAAA,SADQ,EADZ;AAGEZ,YAAQ,IAHV,EArES,EAyET,EAAEH,SAAS,mBAAX;AACEC,cAAU;AACRe;AAAA,+EAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAb;;AAAA;AAAA;AAAA;AAAA,SADQ;AAERC,0BAAoB;AAAA,eAAM,IAAN;AAAA,OAFZ,EADZ;AAIEd,YAAQ,IAJV,EAzES,EA8ET,EAAEH,SAAS,iBAAX;AACEG,YAAQ,IADV;AAEEF,cAAU,EAAEiB,QAAQ,IAAV,EAAgBC,SAAS,IAAzB,EAA+BC,YAAY,IAA3C,EAFZ,EA9ES,EAiFT,EAAEpB,SAAS,2BAAX;AACEC,cAAU;AACRe;AAAA,+EAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAb;;AAAA;AAAA;AAAA;AAAA,SADQ;AAERC,0BAAoB;AAAA,eAAM,IAAN;AAAA,OAFZ,EADZ;AAIEd,YAAQ,IAJV,EAjFS,EAsFT,EAAEH,SAAS,kBAAX,EAA+BC,UAAU,EAAEoB,eAAe,IAAjB,EAAzC,EAAkElB,QAAQ,IAA1E,EAtFS,EAuFT,EAAEH,SAAS,gBAAX;AACEI,gBAAY;AAAA,UAAGkB,WAAH,SAAGA,WAAH;AAAA,UAAgBC,eAAhB,SAAgBA,eAAhB;AAAA,aACV,CAACD,WAAD,EAAcC,eAAd,CADU;AAAA,KADd;AAGEf,UAAM,CAAC,iBAAD,EAAoB,aAApB;AAHR,GAvFS;AADE,CAAd,C;;;AAgGC,0BAA2C;AAAA;;AAAA,QAA7BgB,aAA6B,SAA7BA,aAA6B;AAAA,QAAXC,OAAW;AAAA;;AAAA,iKACjCvB,QAAQsB,cAActB,MADW,IACAuB,OADA;;AAAA,QAGvCC,MAHuC,GASrCD,OATqC,CAGvCC,MAHuC;AAAA,QAIvCC,QAJuC,GASrCF,OATqC,CAIvCE,QAJuC;AAAA,QAKvCC,aALuC,GASrCH,OATqC,CAKvCG,aALuC;AAAA,QAMvCC,QANuC,GASrCJ,OATqC,CAMvCI,QANuC;AAAA,QAOvCC,WAPuC,GASrCL,OATqC,CAOvCK,WAPuC;AAAA,QAQvCC,cARuC,GASrCN,OATqC,CAQvCM,cARuC;;AAWzC;;AACAJ,aAASK,cAAT,GAA0B,UAACC,OAAD,EAAa;AACrC,UAAIP,OAAOQ,WAAP,KAAuB,eAA3B,EAA4C;AAC1C;AACD;AACD,UAAMC,iBAAiBR,SAASS,aAAhC;AACA,UAAID,kBAAkBF,QAAQtB,EAAR,KAAewB,eAAexB,EAApD,EAAwD;AACtD;AACD;AACDe,aAAOW,MAAP;AACD,KATD;AAUAV,aAASW,gBAAT,GAA4B,YAAM;AAChC,UAAIZ,OAAOQ,WAAP,KAAuB,eAA3B,EAA4C;AAC1C;AACD;AACDR,aAAOa,IAAP,CAAY,eAAZ;AACD,KALD;AAMAZ,aAASa,eAAT,GAA2B,YAAM;AAC/B,UACEb,SAASc,YAAT,CAAsBC,MAAtB,GAA+B,CADjC,EAEE;AACA,YAAIhB,OAAOQ,WAAP,KAAuB,QAA3B,EAAqC;AACnCR,iBAAOa,IAAP,CAAY,QAAZ;AACD;AACDZ,iBAASc,YAAT,CAAsBE,OAAtB,CAA8B,UAACV,OAAD,EAAa;AACzCN,mBAASiB,eAAT,CAAyBX,QAAQtB,EAAjC;AACD,SAFD;AAGD;AACF,KAXD;;AAaA;AACAoB,mBAAec,iBAAf,CAAiC;AAC/BjC,YAAM,UADyB;AAE/BkC;AAAA,+EAAU;AAAA,cAASC,OAAT,SAASA,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA,oDAAuB,MAAKlB,QAAL,CAAcmB,aAAd,CAA4B,EAAEC,cAAcF,OAAhB,EAA5B,CAAvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAV;;AAAA;AAAA;AAAA;AAAA,SAF+B;AAG/BG,oBAAc;AAAA,eAAM,MAAKrB,QAAL,CAAcsB,KAApB;AAAA;AAHiB,KAAjC;;AAMA;AACAvB,kBAAcwB,eAAd,CAA8B;AAC5BC,kBAAY,iBADgB;AAE5BP,gBAAU,yBAAsB;AAAA,YAAnBQ,YAAmB,SAAnBA,YAAmB;;AAC9B,YAAMC,QAAQ1B,SAAS2B,eAAvB;AACA,YAAI,CAACF,YAAL,EAAmB;AACjB,iBAAOC,KAAP;AACD;AACD,YAAME,aAAaH,aAAaI,WAAb,EAAnB;AACA,eAAOH,MAAMI,MAAN,CAAa,UAACC,IAAD,EAAU;AAC5B,cAAMhD,OAAUgD,KAAKC,SAAf,SAA4BD,KAAKE,QAAvC;AACA,cACElD,KAAK8C,WAAL,GAAmBK,OAAnB,CAA2BN,UAA3B,KAA0C,CAA1C,IACAG,KAAKI,eAAL,CAAqBD,OAArB,CAA6BN,UAA7B,KAA4C,CAD5C,IAEAG,KAAKX,YAAL,CAAkBgB,IAAlB,CAAuB;AAAA,mBAAKC,EAAEC,WAAF,CAAcJ,OAAd,CAAsBN,UAAtB,KAAqC,CAA1C;AAAA,WAAvB,CAHF,EAIE;AACA,mBAAO,IAAP;AACD;AACD,iBAAO,KAAP;AACD,SAVM,CAAP;AAWD,OAnB2B;AAoB5BW,gBAAU;AAAA,eAAYC,SAASC,GAAT,CAAa;AAAA,iBAAW;AAC5C3D,gBAAI4D,OAAO5D,EAAP,CAAU6D,QAAV,EADwC;AAE5CC,kBAAMF,OAAOE,IAF+B;AAG5C7D,kBAAS2D,OAAOV,SAAhB,SAA6BU,OAAOT,QAHQ;AAI5CY,6BAAiB,CAAC,CAACH,OAAOG,eAJkB;AAK5CzB,0BAAcsB,OAAOtB,YALuB;AAM5CkB,yBAAaI,OAAOP,eANwB;AAO5CW,uBAAW,WAPiC;AAQ5CC,wBAAY;AARgC,WAAX;AAAA,SAAb,CAAZ;AAAA,OApBkB;AA8B5B1B,oBAAc;AAAA,eAAMrB,SAASsB,KAAf;AAAA;AA9Bc,KAA9B;AAgCAvB,kBAAcwB,eAAd,CAA8B;AAC5BC,kBAAY,kBADgB;AAE5BP,gBAAU,0BAAsB;AAAA,YAAnBQ,YAAmB,UAAnBA,YAAmB;;AAC9B,YAAMC,QAAQ1B,SAASgD,gBAAvB;AACA,YAAI,CAACvB,YAAL,EAAmB;AACjB,iBAAOC,KAAP;AACD;AACD,YAAME,aAAaH,aAAaI,WAAb,EAAnB;AACA,eAAOH,MAAMI,MAAN,CAAa,UAACC,IAAD,EAAU;AAC5B,cAAMhD,OAAUgD,KAAKC,SAAf,SAA4BD,KAAKE,QAAvC;AACA,cACElD,KAAK8C,WAAL,GAAmBK,OAAnB,CAA2BN,UAA3B,KAA0C,CAA1C,IACAG,KAAKX,YAAL,CAAkBgB,IAAlB,CAAuB;AAAA,mBAAKC,EAAEC,WAAF,CAAcJ,OAAd,CAAsBN,UAAtB,KAAqC,CAA1C;AAAA,WAAvB,CAFF,EAGE;AACA,mBAAO,IAAP;AACD;AACD,iBAAO,KAAP;AACD,SATM,CAAP;AAUD,OAlB2B;AAmB5BW,gBAAU;AAAA,eAAYC,SAASC,GAAT,CAAa;AAAA,iBAAW;AAC5C3D,gBAAI4D,OAAO5D,EAAP,CAAU6D,QAAV,EADwC;AAE5CC,kBAAMF,OAAOE,IAF+B;AAG5C7D,kBAAS2D,OAAOV,SAAhB,SAA6BU,OAAOT,QAHQ;AAI5CY,6BAAiB,KAJ2B;AAK5CzB,0BAAcsB,OAAOtB,YALuB;AAM5CkB,yBAAaI,OAAOtB,YAAP,CAAoB,CAApB,KAA0BsB,OAAOtB,YAAP,CAAoB,CAApB,EAAuBkB,WANlB;AAO5CQ,uBAAWJ,OAAOtB,YAAP,CAAoB,CAApB,KAA0BsB,OAAOtB,YAAP,CAAoB,CAApB,EAAuB0B,SAPhB;AAQ5CC,wBAAY;AARgC,WAAX;AAAA,SAAb,CAAZ;AAAA,OAnBkB;AA6B5B1B,oBAAc;AAAA,eAAMrB,SAASsB,KAAf;AAAA;AA7Bc,KAA9B;;AAgCA;AACArB,gBAAYgD,UAAZ,8DAAyB;AAAA;AAAA;AAAA;AAAA;AAAA,mBACnB,MAAKnD,QAAL,CAAcoD,SADK;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIvB;AACA,oBAAKrD,MAAL,CAAYa,IAAZ,CAAiB,QAAjB;;AALuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzB;AAlHyC;AAyH1C;;;;kBA1HkBzC,O","file":"index.js","sourcesContent":["import 'whatwg-fetch';\nimport SDK from 'ringcentral';\nimport RingCentralClient from 'ringcentral-client';\n\nimport { ModuleFactory } from '../../lib/di';\nimport RcModule from '../../lib/RcModule';\n\nimport AccountContacts from '../AccountContacts';\nimport AccountExtension from '../AccountExtension';\nimport AccountInfo from '../AccountInfo';\nimport AccountPhoneNumber from '../AccountPhoneNumber';\nimport ActivityMatcher from '../ActivityMatcher';\nimport AddressBook from '../AddressBook';\nimport Alert from '../Alert';\nimport Auth from '../Auth';\nimport BlockedNumber from '../BlockedNumber';\nimport Brand from '../Brand';\nimport Call from '../Call';\nimport CallHistory from '../CallHistory';\nimport CallingSettings from '../CallingSettings';\nimport CallLog from '../CallLog';\nimport CallLogger from '../CallLogger';\nimport CallMonitor from '../CallMonitor';\nimport ComposeText from '../ComposeText';\nimport Conference from '../Conference';\nimport ConnectivityMonitor from '../ConnectivityMonitor';\nimport ContactMatcher from '../ContactMatcher';\nimport Contacts from '../Contacts';\nimport ContactDetails from '../ContactDetails';\nimport ContactSearch from '../ContactSearch';\nimport Conversation from '../Conversation';\nimport ConversationLogger from '../ConversationLogger';\nimport ConversationMatcher from '../ConversationMatcher';\nimport DateTimeFormat from '../DateTimeFormat';\nimport Presence from '../Presence';\nimport DetailedPresence from '../DetailedPresence';\nimport DialingPlan from '../DialingPlan';\nimport Environment from '../Environment';\nimport ExtensionDevice from '../ExtensionDevice';\nimport ExtensionInfo from '../ExtensionInfo';\nimport ExtensionPhoneNumber from '../ExtensionPhoneNumber';\nimport ForwardingNumber from '../ForwardingNumber';\nimport GlobalStorage from '../GlobalStorage';\nimport Locale from '../Locale';\nimport Messages from '../Messages';\nimport MessageSender from '../MessageSender';\nimport MessageStore from '../MessageStore';\nimport NumberValidate from '../NumberValidate';\nimport RateLimiter from '../RateLimiter';\nimport RegionSettings from '../RegionSettings';\nimport Ringout from '../Ringout';\nimport RolesAndPermissions from '../RolesAndPermissions';\nimport Softphone from '../Softphone';\nimport Storage from '../Storage';\nimport Subscription from '../Subscription';\nimport TabManager from '../TabManager';\nimport Webphone from '../Webphone';\nimport RecentMessages from '../RecentMessages';\nimport RecentCalls from '../RecentCalls';\nimport Analytics from '../Analytics';\nimport AudioSettings from '../AudioSettings';\n\n@ModuleFactory({\n  providers: [\n    AudioSettings,\n    Alert,\n    Brand,\n    Locale,\n    TabManager,\n    GlobalStorage,\n    Environment,\n    ConnectivityMonitor,\n    Auth,\n    Storage,\n    RateLimiter,\n    ExtensionDevice,\n    Softphone,\n    Ringout,\n    AccountInfo,\n    ExtensionInfo,\n    RolesAndPermissions,\n    DialingPlan,\n    ExtensionPhoneNumber,\n    ForwardingNumber,\n    BlockedNumber,\n    ContactMatcher,\n    Subscription,\n    RegionSettings,\n    AccountExtension,\n    NumberValidate,\n    Webphone,\n    CallingSettings,\n    Presence,\n    DetailedPresence,\n    CallLog,\n    Call,\n    MessageSender,\n    ComposeText,\n    CallMonitor,\n    CallHistory,\n    ActivityMatcher,\n    ConversationMatcher,\n    ContactSearch,\n    MessageStore,\n    Conversation,\n    DateTimeFormat,\n    Conference,\n    CallLogger,\n    AccountPhoneNumber,\n    AddressBook,\n    AccountContacts,\n    Contacts,\n    ContactDetails,\n    ConversationLogger,\n    Messages,\n    RecentMessages,\n    RecentCalls,\n    Analytics,\n    { provide: 'ModuleOptions',\n      useValue: { prefix: 'rc-phone' },\n      spread: true },\n    { provide: 'Client',\n      useFactory: ({ clientOptions, config }) =>\n        new RingCentralClient(new SDK({\n          clearCacheOnRefreshError: false,\n          ...config,\n          ...clientOptions,\n        })),\n      deps: [{ dep: 'Config' }, { dep: 'ClientOptions', optional: true }] },\n    { provide: 'BrandOptions',\n      spread: true,\n      useValue: { id: '1210', name: 'RingCentral', fullName: 'RingCentral' } },\n    { provide: 'ConnectivityMonitorOptions',\n      useValue: {\n        checkConnectionFunc: async () => { await fetch('//pubsub.pubnub.com/time/0'); } },\n      spread: true },\n    { provide: 'CallLoggerOptions',\n      useValue: {\n        logFunction: async () => { },\n        readyCheckFunction: () => true },\n      spread: true },\n    { provide: 'WebphoneOptions',\n      spread: true,\n      useValue: { appKey: null, appName: null, appVersion: null } },\n    { provide: 'ConversationLoggerOptions',\n      useValue: {\n        logFunction: async () => { },\n        readyCheckFunction: () => true },\n      spread: true },\n    { provide: 'SoftphoneOptions', useValue: { extensionMode: null }, spread: true },\n    { provide: 'ContactSources',\n      useFactory: ({ addressBook, accountContacts }) =>\n        [addressBook, accountContacts],\n      deps: ['AccountContacts', 'AddressBook']\n    },\n  ]\n})\nexport default class RcPhone extends RcModule {\n  constructor({ moduleOptions, ...modules }) {\n    super({ prefix: moduleOptions.prefix, ...modules });\n    const {\n      router,\n      webphone,\n      contactSearch,\n      contacts,\n      callMonitor,\n      contactMatcher,\n    } = modules;\n\n    // Webphone configuration\n    webphone._onCallEndFunc = (session) => {\n      if (router.currentPath !== '/calls/active') {\n        return;\n      }\n      const currentSession = webphone.activeSession;\n      if (currentSession && session.id !== currentSession.id) {\n        return;\n      }\n      router.goBack();\n    };\n    webphone._onCallStartFunc = () => {\n      if (router.currentPath === '/calls/active') {\n        return;\n      }\n      router.push('/calls/active');\n    };\n    webphone._onCallRingFunc = () => {\n      if (\n        webphone.ringSessions.length > 1\n      ) {\n        if (router.currentPath !== '/calls') {\n          router.push('/calls');\n        }\n        webphone.ringSessions.forEach((session) => {\n          webphone.toggleMinimized(session.id);\n        });\n      }\n    };\n\n    // ContactMatcher configuration\n    contactMatcher.addSearchProvider({\n      name: 'contacts',\n      searchFn: async ({ queries }) => this.contacts.matchContacts({ phoneNumbers: queries }),\n      readyCheckFn: () => this.contacts.ready,\n    });\n\n    // ContactSearch configuration\n    contactSearch.addSearchSource({\n      sourceName: 'companyContacts',\n      searchFn: ({ searchString }) => {\n        const items = contacts.companyContacts;\n        if (!searchString) {\n          return items;\n        }\n        const searchText = searchString.toLowerCase();\n        return items.filter((item) => {\n          const name = `${item.firstName} ${item.lastName}`;\n          if (\n            name.toLowerCase().indexOf(searchText) >= 0 ||\n            item.extensionNumber.indexOf(searchText) >= 0 ||\n            item.phoneNumbers.find(x => x.phoneNumber.indexOf(searchText) >= 0)\n          ) {\n            return true;\n          }\n          return false;\n        });\n      },\n      formatFn: entities => entities.map(entity => ({\n        id: entity.id.toString(),\n        type: entity.type,\n        name: `${entity.firstName} ${entity.lastName}`,\n        hasProfileImage: !!entity.hasProfileImage,\n        phoneNumbers: entity.phoneNumbers,\n        phoneNumber: entity.extensionNumber,\n        phoneType: 'extension',\n        entityType: 'companyContact',\n      })),\n      readyCheckFn: () => contacts.ready,\n    });\n    contactSearch.addSearchSource({\n      sourceName: 'personalContacts',\n      searchFn: ({ searchString }) => {\n        const items = contacts.personalContacts;\n        if (!searchString) {\n          return items;\n        }\n        const searchText = searchString.toLowerCase();\n        return items.filter((item) => {\n          const name = `${item.firstName} ${item.lastName}`;\n          if (\n            name.toLowerCase().indexOf(searchText) >= 0 ||\n            item.phoneNumbers.find(x => x.phoneNumber.indexOf(searchText) >= 0)\n          ) {\n            return true;\n          }\n          return false;\n        });\n      },\n      formatFn: entities => entities.map(entity => ({\n        id: entity.id.toString(),\n        type: entity.type,\n        name: `${entity.firstName} ${entity.lastName}`,\n        hasProfileImage: false,\n        phoneNumbers: entity.phoneNumbers,\n        phoneNumber: entity.phoneNumbers[0] && entity.phoneNumbers[0].phoneNumber,\n        phoneType: entity.phoneNumbers[0] && entity.phoneNumbers[0].phoneType,\n        entityType: 'personalContact',\n      })),\n      readyCheckFn: () => contacts.ready,\n    });\n\n    // CallMonitor configuration\n    callMonitor._onRinging = async () => {\n      if (this.webphone._webphone) {\n        return;\n      }\n      // TODO refactor some of these logic into appropriate modules\n      this.router.push('/calls');\n    };\n  }\n}\n"]}