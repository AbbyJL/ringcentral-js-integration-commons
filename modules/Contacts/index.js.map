{"version":3,"sources":["modules/Contacts/index.js"],"names":["MaximumBatchGetPresence","addPhoneToContact","contact","phone","type","phoneNumber","existedPhone","phoneNumbers","find","number","phoneType","push","DEFAULT_TTL","DEFAULT_PRESENCETTL","DEFAULT_AVATARTTL","DEFAULT_AVATARQUERYINTERVAL","Contacts","deps","dep","optional","client","addressBook","accountExtension","accountPhoneNumber","alert","ttl","avatarTtl","presenceTtl","avatarQueryInterval","readyCheckFn","addContactsSources","options","actionTypes","_addressBook","_accountExtension","_accountPhoneNumber","_client","_alert","_reducer","_ttl","_avatarTtl","_presenceTtl","_avatarQueryInterval","_addContactsSources","_readyCheckFn","addSelector","availableExtensions","extensionToPhoneNumberMap","extensions","newExtensions","forEach","extension","status","indexOf","id","firstName","lastName","email","extensionNumber","ext","hasProfileImage","phones","length","contacts","rawContacts","rawContact","key","toLowerCase","sourcesName","get","_selectors","store","subscribe","_onStateChange","_shouldInit","dispatch","initSuccess","_handlerContactsSources","_shouldReset","_resetModuleStatus","ready","pending","resetSuccess","warning","message","inexistence","result","matchContact","found","contactPhoneNumber","name","matchedContact","entityType","companyContacts","personalContacts","matchPhoneNumber","contactType","contactId","toString","contactsSources","x","useCache","resolve","imageId","profileImages","Date","now","timestamp","image","imageUrl","_getAvatarContexts","_queryingAvatar","_processQueryAvatar","getAvatarContexts","ctx","account","profileImage","response","URL","_response","blob","createObjectURL","fetchImageSuccess","console","error","splice","presenceId","contactPresences","presence","_getPresenceContexts","clearTimeout","enqueueTimeoutId","_processQueryPresences","setTimeout","getPresenceContexts","map","_batchQueryPresences","responses","dndStatus","presenceStatus","telephonyStatus","userStatus","fetchPresenceSuccess","presenceSet","ids","join","platform","service","url","multipartResponse","json","item","state"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport isBlank from '../../lib/isBlank';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport ensureExist from '../../lib/ensureExist';\nimport { batchGetApi } from '../../lib/batchApiHelper';\nimport sleep from '../../lib/sleep';\nimport actionTypes from './actionTypes';\nimport getContactsReducer from './getContactsReducer';\nimport contactsMessages from './contactsMessages';\n\nconst MaximumBatchGetPresence = 30;\n\nfunction addPhoneToContact(contact, phone, type) {\n  const phoneNumber = normalizeNumber({ phoneNumber: phone });\n  if (isBlank(phoneNumber)) {\n    return;\n  }\n  const existedPhone = contact.phoneNumbers.find(\n    number => number && number.phoneNumber === phone\n  );\n  if (existedPhone) {\n    existedPhone.phoneType = type;\n  } else {\n    contact.phoneNumbers.push({\n      phoneNumber: phone,\n      phoneType: type,\n    });\n  }\n}\n\nconst DEFAULT_TTL = 30 * 60 * 1000; // 30 mins\nconst DEFAULT_PRESENCETTL = 10 * 60 * 1000; // 10 mins\nconst DEFAULT_AVATARTTL = 2 * 60 * 60 * 1000; // 2 hour\nconst DEFAULT_AVATARQUERYINTERVAL = 2 * 1000; // 2 seconds\n\n/**\n * @class\n * @description Contacts managing module\n */\n@Module({\n  deps: [\n    'Client',\n    'Alert',\n    'AddressBook',\n    'AccountExtension',\n    'AccountPhoneNumber',\n    { dep: 'ContactsOptions', optional: true }\n  ]\n})\nexport default class Contacts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Alert} params.alert - alert module instance\n   * @param {AddressBook} params.addressBook - addressBook module instance\n   * @param {AccountExtension} params.accountExtension - accountExtension module instance\n   * @param {AccountPhoneNumber} params.accountPhoneNumber - accountPhoneNumber module instance\n   * @param {Number} params.ttl - timestamp of local cache, default 30 mins\n   * @param {Number} params.avatarTtl - timestamp of avatar local cache, default 2 hour\n   * @param {Number} params.presenceTtl - timestamp of presence local cache, default 10 mins\n   * @param {Number} params.avatarQueryInterval - interval of query avatar, default 2 seconds\n   */\n  constructor({\n    client,\n    addressBook,\n    accountExtension,\n    accountPhoneNumber,\n    alert,\n    ttl = DEFAULT_TTL,\n    avatarTtl = DEFAULT_AVATARTTL,\n    presenceTtl = DEFAULT_PRESENCETTL,\n    avatarQueryInterval = DEFAULT_AVATARQUERYINTERVAL,\n    readyCheckFn,\n    addContactsSources = [],\n    ...options,\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._addressBook = this::ensureExist(addressBook, 'addressBook');\n    this._accountExtension = this::ensureExist(accountExtension, 'accountExtension');\n    this._accountPhoneNumber = this::ensureExist(accountPhoneNumber, 'accountPhoneNumber');\n    this._client = this::ensureExist(client, 'client');\n    this._alert = this::ensureExist(alert, 'alert');\n    this._reducer = getContactsReducer(this.actionTypes);\n    this._ttl = ttl;\n    this._avatarTtl = avatarTtl;\n    this._presenceTtl = presenceTtl;\n    this._avatarQueryInterval = avatarQueryInterval;\n    this._addContactsSources = addContactsSources;\n    this._readyCheckFn = readyCheckFn;\n    this.addSelector(\n      'companyContacts',\n      () => this._accountExtension.availableExtensions,\n      () => this._accountPhoneNumber.extensionToPhoneNumberMap,\n      (extensions, extensionToPhoneNumberMap) => {\n        const newExtensions = [];\n        extensions.forEach((extension) => {\n          if (!(extension.status === 'Enabled' &&\n            ['DigitalUser', 'User', 'Department'].indexOf(extension.type) >= 0)) {\n            return;\n          }\n          const contact = {\n            type: 'company',\n            id: extension.id,\n            firstName: extension.contact && extension.contact.firstName,\n            lastName: extension.contact && extension.contact.lastName,\n            email: extension.contact && extension.contact.email,\n            extensionNumber: extension.ext,\n            hasProfileImage: extension.hasProfileImage,\n            phoneNumbers: [],\n          };\n          if (isBlank(contact.extensionNumber)) {\n            return;\n          }\n          const phones = extensionToPhoneNumberMap[contact.extensionNumber];\n          if (phones && phones.length > 0) {\n            phones.forEach((phone) => {\n              addPhoneToContact(contact, phone.phoneNumber, 'directPhone');\n            });\n          }\n          newExtensions.push(contact);\n        });\n        return newExtensions;\n      }\n    );\n\n    this.addSelector(\n      'personalContacts',\n      () => this._addressBook.contacts,\n      (rawContacts) => {\n        const contacts = [];\n        rawContacts.forEach((rawContact) => {\n          const contact = {\n            type: 'personal',\n            phoneNumbers: [],\n            ...rawContact,\n          };\n          Object.keys(contact).forEach((key) => {\n            if (key.toLowerCase().indexOf('phone') === -1) {\n              return;\n            }\n            if (typeof contact[key] !== 'string') {\n              return;\n            }\n            addPhoneToContact(contact, contact[key], key);\n          });\n          contacts.push(contact);\n        });\n        return contacts;\n      }\n    );\n  }\n\n  _handlerContactsSources() {\n    this._addContactsSources.forEach(({ addSelector, sourcesName }) => {\n      if (!this[sourcesName]) {\n        Object.defineProperty(this, sourcesName, {\n          get: () => this._selectors[sourcesName]()\n        });\n        this.addSelector(...addSelector);\n      }\n    });\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      this._handlerContactsSources();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._addressBook.ready &&\n      this._accountExtension.ready &&\n      this._accountPhoneNumber.ready &&\n      (!this._readyCheckFn || this._readyCheckFn()) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._addressBook.ready ||\n        !this._accountExtension.ready ||\n        (this._readyCheckFn && !this._readyCheckFn()) ||\n        !this._accountPhoneNumber.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  async showAlert() {\n    if (this._alert) {\n      this._alert.warning({\n        message: contactsMessages.inexistence,\n      });\n    }\n  }\n\n  matchPhoneNumber(phone) {\n    const result = [];\n    const phoneNumber = normalizeNumber({ phoneNumber: phone });\n    const matchContact = (contact) => {\n      let found = contact.extensionNumber && contact.extensionNumber === phoneNumber;\n      if (!found) {\n        contact.phoneNumbers.forEach((contactPhoneNumber) => {\n          if (!found && contactPhoneNumber.phoneNumber === phoneNumber) {\n            found = true;\n          }\n        });\n      }\n      if (!found) {\n        return;\n      }\n      const name =\n        `${\n        contact.firstName ? contact.firstName : ''\n        } ${\n        contact.lastName ? contact.lastName : ''\n        }`;\n      const matchedContact = {\n        ...contact,\n        phoneNumbers: [\n          ...contact.phoneNumbers\n        ],\n        entityType: 'rcContact',\n        name,\n      };\n      if (contact.extensionNumber) {\n        matchedContact.phoneNumbers.push({\n          phoneType: 'extension',\n          phoneNumber: contact.extensionNumber,\n        });\n      }\n      result.push(matchedContact);\n    };\n    this.companyContacts.forEach(matchContact);\n    this.personalContacts.forEach(matchContact);\n    return result;\n  }\n\n  matchContacts({ phoneNumbers }) {\n    const result = {};\n    phoneNumbers.forEach((phoneNumber) => {\n      result[phoneNumber] = this.matchPhoneNumber(phoneNumber);\n    });\n    return result;\n  }\n\n  findContactItem({ contactType, contactId }) {\n    const id = (contactId || '').toString();\n    for (const contactsSources of this._addContactsSources) {\n      if (contactsSources.contactType === contactType) {\n        return this[contactsSources.sourcesName].find(x => x.id.toString() === id);\n      }\n    }\n    switch (contactType) {\n      case 'company':\n        return this.companyContacts.find(x => x.id.toString() === id);\n      case 'personal':\n        return this.personalContacts.find(x => x.id.toString() === id);\n      default:\n        return null;\n    }\n  }\n\n  getImageProfile(contact, useCache = true) {\n    return new Promise((resolve) => {\n      if (!contact || !contact.id || contact.type !== 'company' || !contact.hasProfileImage) {\n        resolve(null);\n        return;\n      }\n\n      const imageId = `${contact.type}${contact.id}`;\n      if (\n        useCache &&\n        this.profileImages[imageId] &&\n        (Date.now() - this.profileImages[imageId].timestamp < this._avatarTtl)\n      ) {\n        const image = this.profileImages[imageId].imageUrl;\n        resolve(image);\n        return;\n      }\n\n      if (!this._getAvatarContexts) {\n        this._getAvatarContexts = [];\n      }\n      this._getAvatarContexts.push({\n        contact,\n        resolve,\n      });\n\n      if (!this._queryingAvatar) {\n        this._queryingAvatar = true;\n        this._processQueryAvatar(this._getAvatarContexts);\n      }\n    });\n  }\n\n  async _processQueryAvatar(getAvatarContexts) {\n    const ctx = getAvatarContexts[0];\n    const imageId = `${ctx.contact.type}${ctx.contact.id}`;\n    let imageUrl = null;\n    try {\n      const response = await this._client\n        .account()\n        .extension(ctx.contact.id)\n        .profileImage('195x195')\n        .get();\n      imageUrl = URL.createObjectURL(await response._response.blob());\n      this.store.dispatch({\n        type: this.actionTypes.fetchImageSuccess,\n        imageId,\n        imageUrl,\n        ttl: this._avatarTtl,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n    ctx.resolve(imageUrl);\n    getAvatarContexts.splice(0, 1);\n    if (getAvatarContexts.length) {\n      await sleep(this._avatarQueryInterval);\n      this._processQueryAvatar(getAvatarContexts);\n    } else {\n      this._queryingAvatar = false;\n    }\n  }\n\n  getPresence(contact) {\n    return new Promise((resolve) => {\n      if (!contact || !contact.id || contact.type !== 'company') {\n        resolve(null);\n        return;\n      }\n\n      const presenceId = `${contact.type}${contact.id}`;\n      if (\n        this.contactPresences[presenceId] &&\n        (Date.now() - this.contactPresences[presenceId].timestamp < this._presenceTtl)\n      ) {\n        const presence = this.contactPresences[presenceId].presence;\n        resolve(presence);\n        return;\n      }\n\n      if (!this._getPresenceContexts) {\n        this._getPresenceContexts = [];\n      }\n      this._getPresenceContexts.push({\n        contact,\n        resolve,\n      });\n\n      clearTimeout(this.enqueueTimeoutId);\n      if (this._getPresenceContexts.length === MaximumBatchGetPresence) {\n        this._processQueryPresences(this._getPresenceContexts);\n        this._getPresenceContexts = null;\n      } else {\n        this.enqueueTimeoutId = setTimeout(() => {\n          this._processQueryPresences(this._getPresenceContexts);\n          this._getPresenceContexts = null;\n        }, 1000);\n      }\n    });\n  }\n\n  async _processQueryPresences(getPresenceContexts) {\n    const contacts = getPresenceContexts.map(x => x.contact);\n    const responses = await this._batchQueryPresences(contacts);\n    getPresenceContexts.forEach((ctx) => {\n      const response = responses[ctx.contact.id];\n      if (!response) {\n        ctx.resolve(null);\n        return;\n      }\n      const { dndStatus, presenceStatus, telephonyStatus, userStatus } = response;\n      const presence = {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      };\n      const presenceId = `${ctx.contact.type}${ctx.contact.id}`;\n      this.store.dispatch({\n        type: this.actionTypes.fetchPresenceSuccess,\n        presenceId,\n        presence,\n        ttl: this._presenceTtl,\n      });\n      ctx.resolve(presence);\n    });\n  }\n\n  async _batchQueryPresences(contacts) {\n    const presenceSet = {};\n    try {\n      if (contacts.length === 1) {\n        const id = contacts[0].id;\n        const response = await this._client.account().extension(id).presence().get();\n        presenceSet[id] = response;\n      } else if (contacts.length > 1) {\n        const ids = contacts.map(x => x.id).join(',');\n        const multipartResponse = await batchGetApi({\n          platform: this._client.service.platform(),\n          url: `/account/~/extension/${ids}/presence?detailedTelephonyState=true&sipData=true`,\n        });\n        const responses = multipartResponse.map(x => x.json());\n        responses.forEach((item) => {\n          presenceSet[item.extension.id] = item;\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    return presenceSet;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get companyContacts() {\n    return this._selectors.companyContacts();\n  }\n\n  get personalContacts() {\n    return this._selectors.personalContacts();\n  }\n\n  get profileImages() {\n    return this.state.profileImages;\n  }\n\n  get contactPresences() {\n    return this.state.contactPresences;\n  }\n}\n"]}