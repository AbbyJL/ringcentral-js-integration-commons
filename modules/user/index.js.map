{"version":3,"sources":["modules/user/index.js"],"names":["dataType","loadFunction","store","dispatch","type","actions","emit","payload","userInfoChange","error","loadData","symbols","api","account","get","extractAccountInfo","loadAccountInfo","extension","extractExtensionInfo","loadExtensionInfo","listDialingPlans","options","extractDialingPlans","loadDialingPlans","phoneNumber","list","extractPhoneNumbers","loadPhoneNumbers","forwardingNumber","extractForwardingNumbers","loadForwardingNumbers","blockedNumber","extractBlockedNumbers","loadBlockedNumbers","all","console","loadInfo","User","platform","settings","on","events","loginSuccess","logoutSuccess","clearUserInfo","loggedIn","prefix","state","phoneNumbers","filter","n","usageType","find","dialingPlans","extensionInfo","extensionNumber","features","indexOf"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/rc-module';\nimport SymbolMap from 'data-types/symbol-map';\nimport { extractData, fetchList, emit } from '../../lib/utils';\nimport userActions from './user-actions';\nimport getUserReducer from './user-reducer';\nimport { userEvents, userEventTypes } from './user-events';\n\nconst symbols = new SymbolMap([\n  'api',\n  'platform',\n  'settings',\n]);\n\n// const initialState = {\n//   test: true,\n// };\n\n// function getUserSettingsReducer(prefix) {\n//   return (state, action) => {\n//     if (typeof state === 'undefined') return Object.assign({}, initialState);\n//     if (!action) return state;\n//     switch (action.type) {\n//       default:\n//         return state;\n//     }\n//   };\n// }\n\n/**\n * @function\n * @param {String} dataType\n * @param {function} loadFunction - async loader function returning a promise\n * @return {Promise}\n * @description Generic data loading logic with events\n */\nasync function loadData(dataType, loadFunction) {\n  this.store.dispatch({\n    type: this.actions[`load${dataType}`],\n  });\n  this.emit(userEvents[`load${dataType}`]);\n  try {\n    const payload = await this::loadFunction();\n    this.store.dispatch({\n      type: this.actions[`load${dataType}Success`],\n      payload,\n    });\n    this::emit(userEventTypes.userInfoChange, userEvents[`load${dataType}Success`]);\n  } catch (error) {\n    this.store.dispatch({\n      type: this.actions[`load${dataType}Failed`],\n      error,\n    });\n    this.emit(userEvents[`load${dataType}Failed`]);\n    throw error;\n  }\n}\n\n/**\n * @function\n * @return {Promise<Object>}\n * @description Fetch account info and extract the data\n */\nasync function extractAccountInfo() {\n  return extractData(await this[symbols.api].account().get());\n}\nasync function loadAccountInfo() {\n  return await this::loadData('AccountInfo', extractAccountInfo);\n}\n\nasync function extractExtensionInfo() {\n  return extractData(await this[symbols.api].account().extension().get());\n}\nasync function loadExtensionInfo() {\n  return await this::loadData('ExtensionInfo', extractExtensionInfo);\n}\n\nasync function extractDialingPlans() {\n  // TODO: js-client have dialing-plan?\n  return extractData(await this::fetchList(options => (\n    this[symbols.api].account().listDialingPlans(options)\n  )));\n}\nasync function loadDialingPlans() {\n  return await this::loadData('DialingPlans', extractDialingPlans);\n}\n\nasync function extractPhoneNumbers() {\n  return extractData(await this::fetchList(options => (\n    this[symbols.api].account().extension().phoneNumber().list(options)\n  )));\n}\nasync function loadPhoneNumbers() {\n  return await this::loadData('PhoneNumbers', extractPhoneNumbers);\n}\n\nasync function extractForwardingNumbers() {\n  return extractData(await this::fetchList(options => (\n    this[symbols.api].account().extension().forwardingNumber().list()\n  )));\n}\nasync function loadForwardingNumbers() {\n  return await this::loadData('ForwardingNumbers', extractForwardingNumbers);\n}\n\nasync function extractBlockedNumbers() {\n  return extractData(await this::fetchList(options => (\n    this[symbols.api].account().extension().blockedNumber().list(options)\n  )));\n}\nasync function loadBlockedNumbers() {\n  return await this::loadData('BlockedNumbers', extractBlockedNumbers);\n}\n\n/**\n * @function\n * @return {Promise}\n */\nasync function loadInfo() {\n  try {\n    await Promise.all([\n      this::loadAccountInfo(),\n      this::loadExtensionInfo(),\n      // this::loadDialingPlans(),\n      this::loadPhoneNumbers(),\n      this::loadForwardingNumbers(),\n      this::loadBlockedNumbers(),\n    ]);\n    // this.emit(userEvents.userInfoLoaded);\n  } catch (e) {\n    // TODO send error out\n    console.error(e);\n  }\n}\n\n/**\n * @class User\n * @extends RcModule\n * @default\n * @export\n */\nexport default class User extends RcModule {\n  /**\n   * @function\n   * @param {Object} options\n   */\n  constructor(options) {\n    super({\n      ...options,\n      actions: userActions,\n    });\n    const {\n      api,\n      platform,\n      settings,\n    } = options;\n    this[symbols.api] = api;\n    this[symbols.platform] = platform;\n    this[symbols.settings] = settings;\n\n    // settings.registerReducer('user', getUserSettingsReducer());\n\n    // load info on login\n    platform.on(platform.events.loginSuccess, () => {\n      this::loadInfo();\n    });\n    // unload info on logout\n    platform.on(platform.events.logoutSuccess, () => {\n      this.store.dispatch({\n        type: this.actions.clearUserInfo,\n      });\n      // this.emit(userEvents.userInfoCleared);\n    });\n\n\n    // load info if already logged in\n    (async () => {\n      if (await platform.loggedIn()) {\n        await this::loadInfo();\n      }\n    })();\n\n    /**\n     * TODO:\n     *   1. Dialing Plan Checking\n     */\n  }\n  get reducer() {\n    return getUserReducer(this.prefix);\n  }\n\n  get events() {\n    return userEvents;\n  }\n\n  get eventTypes() {\n    return userEventTypes;\n  }\n\n  get directNumbers() {\n    return this.state.phoneNumbers.filter(n => n.usageType === 'DirectNumber');\n  }\n\n  get mainCompanyNumber() {\n    return this.state.phoneNumbers.find(n => n.usageType === 'MainCompanyNumber');\n  }\n\n  get dialingPlans() {\n    return this.state.dialingPlans;\n  }\n\n  get extensionNumber() {\n    return this.state.extensionInfo.extensionNumber;\n  }\n\n  get smsNumbers() {\n    return this.state.phoneNumbers.filter(n => n.features.indexOf('SmsSender') > -1);\n  }\n\n}\n"]}