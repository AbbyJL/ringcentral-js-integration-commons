{"version":3,"sources":["modules/Conference/index.js"],"names":["DEFAULT_MASK","Conference","deps","dep","optional","client","regionSettings","storage","options","name","fetchFunction","account","extension","conferencing","get","actionTypes","_dialInNumberStorageKey","_additionalNumbersStorageKey","_regionSetting","_lastCountryCode","_storage","registerReducer","key","reducer","updateDialInNumber","updateAdditionalNumbers","data","ready","countryCode","phoneNumbers","find","e","country","isoCode","phoneNumber","dialInNumber","allowJoinBeforeHost","_client","put","_store","dispatch","type","fetchSuccess","additionalNumbers","_tabManager","active","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import mask from 'json-mask';\nimport { Module } from '../../lib/di';\nimport DataFetcher from '../../lib/DataFetcher';\nimport createSimpleReducer from '../../lib/createSimpleReducer';\nimport actionTypes from './actionTypes';\nimport proxify from '../../lib/proxy/proxify';\n\nconst DEFAULT_MASK = 'phoneNumber,hostCode,participantCode,phoneNumbers(country,phoneNumber),allowJoinBeforeHost';\n\n/**\n * @class\n * @description Conference managing module\n */\n@Module({\n  deps: [\n    'Client', 'Storage', 'RegionSettings', { dep: 'ConferenceOptions', optional: true }\n  ]\n})\nexport default class Conference extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    client,\n    regionSettings,\n    storage,\n    ...options\n  }) {\n    super({\n      name: 'conference',\n      client,\n      fetchFunction: async () => mask(\n        await client.account().extension().conferencing().get(),\n        DEFAULT_MASK,\n      ),\n      actionTypes,\n      storage,\n      ...options,\n    });\n    this._dialInNumberStorageKey = 'conferenceDialInNumber';\n    this._additionalNumbersStorageKey = 'conferenceAdditionalNumbers';\n    this._regionSetting = regionSettings;\n    this._lastCountryCode = null;\n    this._storage.registerReducer({\n      key: this._dialInNumberStorageKey,\n      reducer: createSimpleReducer(this.actionTypes.updateDialInNumber, 'dialInNumber'),\n    });\n    this._storage.registerReducer({\n      key: this._additionalNumbersStorageKey,\n      reducer: createSimpleReducer(this.actionTypes.updateAdditionalNumbers, 'additionalNumbers'),\n    });\n  }\n\n  async _onStateChange() {\n    super._onStateChange();\n    if (!this.data\n      || !this._regionSetting.ready\n      || this._lastCountryCode === this._regionSetting.countryCode) {\n      return;\n    }\n    this._lastCountryCode = this._regionSetting.countryCode;\n    const { phoneNumber } = this.data.phoneNumbers.find(\n      e => e.country.isoCode === this._lastCountryCode\n    );\n    if (phoneNumber !== this.dialInNumber) {\n      this.updateDialInNumber(phoneNumber);\n    }\n  }\n\n  @proxify\n  async updateEnableJoinBeforeHost(allowJoinBeforeHost) {\n    const data = await this._client.account().extension().conferencing()\n      .put({ allowJoinBeforeHost });\n    this._store.dispatch({ type: this.actionTypes.fetchSuccess, data });\n  }\n\n  @proxify\n  updateDialInNumber(dialInNumber) {\n    this._store.dispatch({ type: this.actionTypes.updateDialInNumber, dialInNumber });\n  }\n\n  @proxify\n  updateAdditionalNumbers(additionalNumbers) {\n    this._store.dispatch({ type: this.actionTypes.updateAdditionalNumbers, additionalNumbers });\n  }\n\n  get additionalNumbers() {\n    return this._storage.getItem(this._additionalNumbersStorageKey) || [];\n  }\n\n  get dialInNumber() {\n    return this._storage.getItem(this._dialInNumberStorageKey) || this.data.phoneNumber;\n  }\n\n  _shouldFetch() {\n    return !this._tabManager || this._tabManager.active;\n  }\n}\n"]}