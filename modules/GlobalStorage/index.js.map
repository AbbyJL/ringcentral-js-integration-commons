{"version":3,"sources":["modules/GlobalStorage/index.js"],"names":["GlobalStorage","StorageProvider","options","actionTypes","_StorageProvider","_reducers","_reducer","types","reducers","storedData","storageKey","prefix","_storage","getData","key","removeItem","store","dispatch","type","init","data","_storageHandler","value","ready","sync","on","subscribe","status","pending","currentData","setItem","reducer","_initialized","Error","state"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport SynchronizedStorage from '../../lib/SynchronizedStorage';\n\nimport actionTypes from './actionTypes';\nimport moduleStatus from '../../enums/moduleStatus';\nimport getStorageReducer from '../Storage/getStorageReducer';\n\n/**\n * @class\n * @description Alternative implementation of the Storage class.\n *  Allows registeration of reducers so that persisted states can be computed with reducers.\n */\nexport default class GlobalStorage extends RcModule {\n  constructor({\n    StorageProvider = SynchronizedStorage,\n    ...options,\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._StorageProvider = StorageProvider;\n    this._reducers = {};\n    this._reducer = getStorageReducer({ types: this.actionTypes, reducers: this._reducers });\n  }\n  initialize() {\n    let storedData = null;\n    const storageKey =\n      `${this.prefix ? `${this.prefix}-` : ''}GlobalStorage`;\n    this._storage = new this._StorageProvider({\n      storageKey,\n    });\n    storedData = this._storage.getData();\n    for (const key in storedData) {\n      if (!this._reducers[key]) {\n        delete storedData[key];\n        this._storage.removeItem(key);\n      }\n    }\n    this.store.dispatch({\n      type: this.actionTypes.init,\n      storageKey,\n      data: storedData,\n    });\n    this._storageHandler = ({ key, value }) => {\n      if (this.ready) {\n        storedData[key] = value;\n        this.store.dispatch({\n          type: this.actionTypes.sync,\n          key,\n          value,\n        });\n      }\n    };\n    this._storage.on('storage', this._storageHandler);\n    this.store.subscribe(() => {\n      if (this.status !== moduleStatus.pending) {\n        // save new data to storage when changed\n        const currentData = this.data;\n        for (const key in currentData) {\n          if (storedData[key] !== currentData[key]) {\n            this._storage.setItem(key, currentData[key]);\n            storedData[key] = currentData[key];\n          }\n        }\n      }\n    });\n  }\n\n  registerReducer({ key, reducer }) {\n    if (this._initialized) {\n      throw new Error('Reducers must be registered before initialize');\n    }\n    if (this._reducers[key]) {\n      throw new Error(`Reducer of key: '${key}' already exists`);\n    }\n    this._reducers[key] = reducer;\n  }\n\n  getItem(key) {\n    return this.state.data[key];\n  }\n\n  get data() {\n    return this.state.data;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get storageKey() {\n    return this.state.storageKey;\n  }\n\n  get ready() {\n    return this.status === moduleStatus.ready;\n  }\n\n}\n"]}