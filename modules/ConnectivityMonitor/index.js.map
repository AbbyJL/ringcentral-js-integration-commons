{"version":3,"sources":["modules/ConnectivityMonitor/index.js"],"names":["ConnectivityMonitor","client","environment","options","actionTypes","_requestSuccessHandler","connectivity","store","dispatch","type","connectSuccess","_requestErrorHandler","apiResponse","Error","message","connectFail","_client","_environment","_reducer","subscribe","ready","_bindHandlers","initSuccess","changed","service","platform","on","events","requestSuccess","requestError","state","status"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEqBA,mB;;;AACnB,qCAIG;AAAA,QAHDC,MAGC,QAHDA,MAGC;AAAA,QAFDC,WAEC,QAFDA,WAEC;AAAA,QADEC,OACF;AAAA;;AAAA,2LAEIA,OAFJ;AAGCC;AAHD;;AAAA,UA2BHC,sBA3BG,GA2BsB,YAAM;AAC7B,UAAI,CAAC,MAAKC,YAAV,EAAwB;AACtB,cAAKC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,gBAAM,MAAKL,WAAL,CAAiBM;AADL,SAApB;AAGD;AACF,KAjCE;;AAAA,UAkCHC,oBAlCG,GAkCoB,UAACC,WAAD,EAAiB;AACtC,UACEA,uBAAuBC,KAAvB,IACAD,YAAYE,OAAZ,KAAwB,iBADxB,IAEA,MAAKR,YAHP,EAIE;AACA,cAAKC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,gBAAM,MAAKL,WAAL,CAAiBW;AADL,SAApB;AAGD;AACF,KA5CE;;AAKD,UAAKC,OAAL,GAAef,MAAf;AACA,UAAKgB,YAAL,GAAoBf,WAApB;AACA,UAAKgB,QAAL,GAAgB,6CAA8B,MAAKd,WAAnC,CAAhB;AAPC;AAQF;;;;iCACY;AAAA;;AACX,WAAKG,KAAL,CAAWY,SAAX,4DAAqB;AAAA;AAAA;AAAA;AAAA;AACnB,oBACE,CAAC,OAAKC,KAAN,KACC,CAAC,OAAKH,YAAN,IAAsB,OAAKA,YAAL,CAAkBG,KADzC,CADF,EAGE;AACA,yBAAKC,aAAL;AACA,yBAAKd,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,OAAKL,WAAL,CAAiBkB;AADL,mBAApB;AAGD,iBARD,MAQO,IACL,OAAKF,KAAL,IACA,OAAKH,YADL,IACqB,OAAKA,YAAL,CAAkBM,OAFlC,EAGL;AACA,yBAAKF,aAAL;AACD;;AAdkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAArB;AAgBD;;;oCAmBe;AACd,UAAMpB,SAAS,KAAKe,OAAL,CAAaQ,OAAb,CAAqBC,QAArB,GAAgCxB,MAAhC,EAAf;AACAA,aAAOyB,EAAP,CAAUzB,OAAO0B,MAAP,CAAcC,cAAxB,EAAwC,KAAKvB,sBAA7C;AACAJ,aAAOyB,EAAP,CAAUzB,OAAO0B,MAAP,CAAcE,YAAxB,EAAsC,KAAKlB,oBAA3C;AACD;;;wBAEY;AACX,aAAO,KAAKmB,KAAL,CAAWC,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKD,KAAL,CAAWC,MAAX,KAAsB,uBAAaX,KAA1C;AACD;;;wBAEkB;AACjB,aAAO,KAAKU,KAAL,CAAWxB,YAAlB;AACD;;;;;kBAlEkBN,mB","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport actionTypes from './actionTypes';\nimport moduleStatus from '../../enums/moduleStatus';\nimport getConnectivityMonitorReducer from './getConnectivityMonitorReducer';\n\nexport default class ConnectivityMonitor extends RcModule {\n  constructor({\n    client,\n    environment,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    this._environment = environment;\n    this._reducer = getConnectivityMonitorReducer(this.actionTypes);\n  }\n  initialize() {\n    this.store.subscribe(async () => {\n      if (\n        !this.ready &&\n        (!this._environment || this._environment.ready)\n      ) {\n        this._bindHandlers();\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        this.ready &&\n        this._environment && this._environment.changed\n      ) {\n        this._bindHandlers();\n      }\n    });\n  }\n  _requestSuccessHandler = () => {\n    if (!this.connectivity) {\n      this.store.dispatch({\n        type: this.actionTypes.connectSuccess,\n      });\n    }\n  }\n  _requestErrorHandler = (apiResponse) => {\n    if (\n      apiResponse instanceof Error &&\n      apiResponse.message === 'Failed to fetch' &&\n      this.connectivity\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.connectFail,\n      });\n    }\n  }\n  _bindHandlers() {\n    const client = this._client.service.platform().client();\n    client.on(client.events.requestSuccess, this._requestSuccessHandler);\n    client.on(client.events.requestError, this._requestErrorHandler);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatus.ready;\n  }\n\n  get connectivity() {\n    return this.state.connectivity;\n  }\n}\n"]}