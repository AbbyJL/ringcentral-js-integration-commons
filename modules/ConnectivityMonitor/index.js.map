{"version":3,"sources":["modules/ConnectivityMonitor/index.js"],"names":["DEFAULT_TIME_TO_RETRY","ConnectivityMonitor","client","environment","timeToRetry","options","actionTypes","_requestSuccessHandler","connectivity","store","dispatch","type","connectSuccess","_clearTimeout","_requestErrorHandler","apiResponse","Error","message","connectFail","_retry","_client","_environment","_timeToRetry","_reducer","_timeoutId","subscribe","ready","_bindHandlers","initSuccess","changed","_unbindHandlers","service","platform","on","events","requestSuccess","requestError","off","get","skipAuthCheck","clearTimeout","t","setTimeout","_checkConnection","state","status"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport actionTypes from './actionTypes';\nimport moduleStatus from '../../enums/moduleStatus';\nimport getConnectivityMonitorReducer from './getConnectivityMonitorReducer';\n\nconst DEFAULT_TIME_TO_RETRY = 5000;\n\nexport default class ConnectivityMonitor extends RcModule {\n  constructor({\n    client,\n    environment,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    this._environment = environment;\n    this._timeToRetry = timeToRetry;\n    this._reducer = getConnectivityMonitorReducer(this.actionTypes);\n    this._timeoutId = null;\n  }\n  initialize() {\n    this.store.subscribe(async () => {\n      if (\n        !this.ready &&\n        (!this._environment || this._environment.ready)\n      ) {\n        this._bindHandlers();\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        this.ready &&\n        this._environment && this._environment.changed\n      ) {\n        this._bindHandlers();\n      }\n    });\n  }\n  _requestSuccessHandler = () => {\n    if (!this.connectivity) {\n      this.store.dispatch({\n        type: this.actionTypes.connectSuccess,\n      });\n    }\n    this._clearTimeout();\n  }\n  _requestErrorHandler = (apiResponse) => {\n    if (\n      apiResponse instanceof Error &&\n      apiResponse.message === 'Failed to fetch' &&\n      this.connectivity\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.connectFail,\n      });\n    }\n    this._retry();\n  }\n  _bindHandlers() {\n    if (this._unbindHandlers) {\n      this._unbindHandlers();\n    }\n    const client = this._client.service.platform().client();\n    client.on(client.events.requestSuccess, this._requestSuccessHandler);\n    client.on(client.events.requestError, this._requestErrorHandler);\n    this._unbindHandlers = () => {\n      client.off(client.events.requestSuccess, this._requestSuccessHandler);\n      client.off(client.events.requestError, this._requestErrorHandler);\n      this._unbindHandlers = null;\n    };\n  }\n\n  async _checkConnection() {\n    try {\n      // query api info as a test of connectivity\n      await this._client.service.platform().get('', null, { skipAuthCheck: true });\n    } catch (error) {\n      /* falls through */\n    }\n  }\n  _clearTimeout() {\n    if (this._timeoutId) clearTimeout(this._timeoutId);\n  }\n  _retry(t = this._timeToRetry) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      this._checkConnection();\n    }, t);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatus.ready;\n  }\n\n  get connectivity() {\n    return this.state.connectivity;\n  }\n}\n"]}