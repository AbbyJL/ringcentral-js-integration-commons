{"version":3,"sources":["modules/storage/index.js"],"names":["logger","prefix","symbols","CONSTANTS","status","events","Storage","options","actions","StorageProvider","auth","storage","storageProvider","on","oldState","newState","statusChanged","data","emit","dataChanged","key","ready","loggedIn","ownerId","error","saved","getData","dirty","store","dispatch","type","init","unsubscribeStorage","subscribe","load","newData","notLoggedIn","reset","destroy","value","setData","state","pending","Error","update","save","saveSuccess","saveError","remove"],"mappings":"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","file":"index.js","sourcesContent":["import SymbolMap from 'data-types/symbol-map';\nimport Loganberry from 'loganberry';\nimport KeyValueMap from 'data-types/key-value-map';\nimport RcModule, { initFunction } from '../../lib/rc-module';\nimport { proxify } from '../../modules/proxy';\nimport NamedStorage from '../../lib/named-storage';\nimport getStorageReducer from './get-storage-reducer';\nimport storageActions from './storage-actions';\nimport storageStatus from './storage-status';\nimport storageEvents from './storage-events';\nimport { emit } from '../../lib/utils';\n\nconst logger = new Loganberry({\n  prefix: 'storage',\n});\n\nconst symbols = new SymbolMap([\n  'storage',\n  'storageProvider',\n  'unsubscribeStorage',\n]);\n\nconst CONSTANTS = new KeyValueMap({\n  status: storageStatus,\n  events: storageEvents,\n});\n\nexport default class Storage extends RcModule {\n  constructor(options) {\n    super({\n      ...options,\n      actions: storageActions,\n    });\n    const {\n      StorageProvider = NamedStorage,\n      auth,\n    } = options;\n    this[symbols.storage] = null;\n    this[symbols.storageProvider] = StorageProvider;\n    this[symbols.auth] = auth;\n\n    this.on('state-change', ({ oldState, newState }) => {\n      if (!oldState || oldState.status !== newState.status) {\n        this::emit(storageEvents.statusChanged, newState.status);\n      }\n      if (!oldState || oldState.data !== newState.data) {\n        this.emit(storageEvents.dataChanged, newState.data);\n      }\n      if (newState.key && (!oldState || !oldState.key)) {\n        this.emit(storageEvents.ready);\n      }\n    });\n  }\n  get reducer() {\n    return getStorageReducer(this.prefix);\n  }\n\n  get key() {\n    return this.state.key;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get constants() {\n    return CONSTANTS;\n  }\n\n  @initFunction\n  init() {\n    this[symbols.auth].on(this[symbols.auth].events.loggedIn, async () => {\n      const key = `${this.prefix ? `${this.prefix}-` : ''}storage-${this[symbols.auth].ownerId}`;\n      this[symbols.storage] = new this[symbols.storageProvider]({ key });\n\n      let data = null;\n      let error = null;\n      let status = storageStatus.saved;\n\n      try {\n        data = await (async () => this[symbols.storage].getData())();\n      } catch (e) {\n        status = storageStatus.dirty;\n        error = e;\n      }\n\n      if (!data) data = {};\n\n      this.store.dispatch({\n        type: this.actions.init,\n        key,\n        data,\n        error,\n        status,\n      });\n\n      this[symbols.unsubscribeStorage] = this[symbols.storage].subscribe(newData => {\n        this.store.dispatch({\n          type: this.actions.load,\n          data: newData,\n        });\n      });\n    });\n\n    this[symbols.auth].on(this[symbols.auth].events.notLoggedIn, () => {\n      this.store.dispatch({\n        type: this.actions.reset,\n      });\n      this[symbols.unsubscribeStorage]();\n      this[symbols.storage].destroy();\n      this[symbols.storage] = null;\n    });\n  }\n\n  @proxify\n  async setItem(key, value) {\n    await this.setData({\n      [key]: value,\n    });\n  }\n\n  @proxify\n  async setData(data) {\n    if (!this.state || this.state.status === storageStatus.pending) {\n      throw new Error('Storage is not ready');\n    }\n    this.store.dispatch({\n      type: this.actions.update,\n      data,\n    });\n    try {\n      this.store.dispatch({\n        type: this.actions.save,\n      });\n      await(\n        async () => this[symbols.storage].setData(this.getData())\n      )();\n      this.store.dispatch({\n        type: this.actions.saveSuccess,\n      });\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actions.saveError,\n        error,\n      });\n    }\n  }\n\n  @proxify\n  async removeItem(key) {\n    if (!this.state || this.state.status === storageStatus.pending) {\n      throw new Error('Storage is not ready');\n    }\n    this.store.dispatch({\n      type: this.actions.remove,\n      key,\n    });\n    try {\n      this.store.dispatch({\n        type: this.actions.save,\n      });\n      await(\n        async () => this[symbols.storage].setData(this.getData())\n      )();\n      this.store.dispatch({\n        type: this.actions.saveSuccess,\n      });\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actions.saveError,\n        error,\n      });\n    }\n  }\n\n  getItem(key) {\n    return this.state.data[key];\n  }\n\n  getData() {\n    return {\n      ...this.state.data,\n    };\n  }\n}\n"]}