{"version":3,"sources":["modules/ActiveCalls/index.js"],"names":["presenceRegExp","FETCH_DELAY","DEFAULT_TTL","ActiveCalls","deps","dep","optional","client","rolesAndPermissions","tabManager","ttl","options","name","getDataReducer","subscriptionFilters","detailedPresence","subscriptionHandler","message","test","event","ownerId","_auth","fetchData","fetchFunction","_client","account","extension","activeCalls","list","params","_rolesAndPermissions","addSelector","data","ready","permissions","ReadCallLog","_selectors","calls"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAIA,IAAMA,iBAAiB,0CAAvB;AACA,IAAMC,cAAc,IAApB;AACA,IAAMC,cAAc,IAAI,EAAJ,GAAS,IAA7B;;AAEA;;;;IAYqBC,W,WARpB,gBAAO;AACNC,QAAM,CACJ,QADI,EAEJ,qBAFI,EAGJ,EAAEC,KAAK,YAAP,EAAqBC,UAAU,IAA/B,EAHI,EAIJ,EAAED,KAAK,2BAAP,EAAoCC,UAAU,IAA9C,EAJI;AADA,CAAP,C;;;AASC;;;;;;AAMA,6BAMG;AAAA;;AAAA,QALDC,MAKC,QALDA,MAKC;AAAA,QAJDC,mBAIC,QAJDA,mBAIC;AAAA,QAHDC,UAGC,QAHDA,UAGC;AAAA,wBAFDC,GAEC;AAAA,QAFDA,GAEC,4BAFKR,WAEL;AAAA,QADES,OACF;AAAA;;AAAA,2KAEIA,OAFJ;AAGCC,YAAM,aAHP;AAICL,oBAJD;AAKCG,cALD;AAMCG,2DAND;AAOCC,2BAAqB,CAAC,8BAAoBC,gBAArB,CAPtB;AAQCC;AAAA,+EAAqB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACfjB,eAAekB,IAAf,CAAoBD,QAAQE,KAA5B,CADe;AAAA;AAAA;AAAA;;AAEXC,yBAFW,GAED,MAAKC,KAAL,CAAWD,OAFV;AAAA;AAAA,yBAGX,qBAAMnB,WAAN,CAHW;;AAAA;AAAA,wBAIbmB,YAAY,MAAKC,KAAL,CAAWD,OAJV;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAKT,MAAKE,SAAL,EALS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAArB;;AAAA;AAAA;AAAA;AAAA,SARD;AAiBCC;AAAA,+EAAe;AAAA;AAAA;AAAA;AAAA;AAAA,oDAAY,yBAAU;AAAA,2BACnC,MAAKC,OAAL,CAAaC,OAAb,GAAuBC,SAAvB,GAAmCC,WAAnC,GAAiDC,IAAjD,CAAsDC,MAAtD,CADmC;AAAA,mBAAV,CAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;;AAAA;AAAA;AAAA;AAAA;AAjBD;;AAqBD,UAAKC,oBAAL,GAA4BtB,mBAA5B;AACA,UAAKuB,WAAL,CACE,OADF,EAEE;AAAA,aAAM,MAAKC,IAAX;AAAA,KAFF,EAGE;AAAA,aAAQA,QAAQ,EAAhB;AAAA,KAHF;AAtBC;AA2BF;;;;kCAEa;AACZ,aAAO,+IAAuB,KAAKF,oBAAL,CAA0BG,KAAxD;AACD;;;wBAEoB;AACnB,aAAO,KAAKH,oBAAL,CAA0BI,WAA1B,CAAsCC,WAA7C;AACD;;;wBAEW;AACV,aAAO,KAAKC,UAAL,CAAgBC,KAAhB,EAAP;AACD;;;;kBApDkBlC,W","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport DataFetcher from '../../lib/DataFetcher';\nimport sleep from '../../lib/sleep';\nimport fetchList from '../../lib/fetchList';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport {\n  getDataReducer\n} from './getActiveCallsReducer';\n\nconst presenceRegExp = /\\/presence\\?detailedTelephonyState=true$/;\nconst FETCH_DELAY = 1000;\nconst DEFAULT_TTL = 5 * 60 * 1000;\n\n/**\n * @class\n * @description Active calls list manaing module\n */\n@Module({\n  deps: [\n    'Client',\n    'RolesAndPermissions',\n    { dep: 'TabManager', optional: true },\n    { dep: 'AccountPhoneNumberOptions', optional: true }\n  ]\n})\nexport default class ActiveCalls extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Number} params.ttl - local cache timestamp, default 5 mins.\n   */\n  constructor({\n    client,\n    rolesAndPermissions,\n    tabManager, // do not pass tabManager to DataFetcher as data is not shared in localStorage\n    ttl = DEFAULT_TTL,\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'activeCalls',\n      client,\n      ttl,\n      getDataReducer,\n      subscriptionFilters: [subscriptionFilters.detailedPresence],\n      subscriptionHandler: async (message) => {\n        if (presenceRegExp.test(message.event)) {\n          const ownerId = this._auth.ownerId;\n          await sleep(FETCH_DELAY);\n          if (ownerId === this._auth.ownerId) {\n            await this.fetchData();\n          }\n        }\n      },\n      fetchFunction: async () => fetchList(params =>\n        this._client.account().extension().activeCalls().list(params)\n      )\n    });\n    this._rolesAndPermissions = rolesAndPermissions;\n    this.addSelector(\n      'calls',\n      () => this.data,\n      data => data || [],\n    );\n  }\n\n  _shouldInit() {\n    return super._shouldInit() && this._rolesAndPermissions.ready;\n  }\n\n  get _hasPermission() {\n    return this._rolesAndPermissions.permissions.ReadCallLog;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n}\n"]}