{"version":3,"sources":["modules/auth/index.js"],"names":["logger","prefix","symbols","CONSTANTS","loginStatus","Auth","options","actions","platform","on","oldState","newState","status","loginStatusChanged","beforeLogoutHandlers","events","loginSuccess","store","dispatch","type","token","auth","data","loginError","error","logoutSuccess","logoutError","refreshSuccess","refreshError","loggedIn","init","notLoggedIn","username","password","extension","remember","trace","login","payload","redirectUri","state","brandId","display","prompt","loginUrl","url","parseLoginRedirectUrl","code","logout","handlers","handler","add","remove","owner_id"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule, { initFunction } from '../../lib/rc-module';\nimport { proxify, throwOnProxy } from '../proxy';\nimport SymbolMap from 'data-types/symbol-map';\nimport KeyValueMap from 'data-types/key-value-map';\nimport loginStatus from './login-status';\nimport authActions from './auth-actions';\nimport getAuthReducer from './auth-reducer';\nimport { authEvents, authEventTypes } from './auth-events';\nimport { emit } from '../../lib/utils';\nimport Loganberry from 'loganberry';\n\nconst logger = new Loganberry({\n  prefix: 'auth',\n});\n\nconst symbols = new SymbolMap([\n  'platform',\n  'emitter',\n  'beforeLogoutHandlers',\n  'init',\n]);\n\nconst CONSTANTS = new KeyValueMap({\n  loginStatus,\n});\n\n/**\n * @class\n * @description Authentication module\n */\nexport default class Auth extends RcModule {\n  /**\n   * @function\n   */\n  constructor(options) {\n    super({\n      ...options,\n      actions: authActions,\n    });\n\n    const {\n      platform,\n    } = options;\n    this.on('state-change', ({ oldState, newState }) => {\n      // loginStatusChanged\n      if (!oldState || oldState.status !== newState.status) {\n        this::emit(authEventTypes.loginStatusChanged, newState.status);\n      }\n    });\n    this[symbols.platform] = platform;\n  }\n  @initFunction\n  init() {\n    const platform = this[symbols.platform];\n    this[symbols.beforeLogoutHandlers] = new Set();\n\n    // load info on login\n    platform.on(platform.events.loginSuccess, () => {\n      this.store.dispatch({\n        type: this.actions.loginSuccess,\n        token: platform.auth().data(),\n      });\n    });\n    // loginError\n    platform.on(platform.events.loginError, error => {\n      this.store.dispatch({\n        type: this.actions.loginError,\n        error,\n      });\n    });\n    // unload info on logout\n    platform.on(platform.events.logoutSuccess, () => {\n      this.store.dispatch({\n        type: this.actions.logoutSuccess,\n      });\n    });\n\n    platform.on(platform.events.logoutError, error => {\n      this.store.dispatch({\n        type: this.actions.logoutError,\n        error,\n      });\n    });\n    platform.on(platform.events.refreshSuccess, () => {\n      this.store.dispatch({\n        type: this.actions.refreshSuccess,\n        token: platform.auth().data(),\n      });\n    });\n    platform.on(platform.events.refreshError, error => {\n      this.store.dispatch({\n        type: this.actions.refreshError,\n        error,\n      });\n    });\n\n    // load info if already logged in\n    (async () => {\n      const loggedIn = await platform.loggedIn();\n      this.store.dispatch({\n        type: this.actions.init,\n        status: loggedIn ? loginStatus.loggedIn : loginStatus.notLoggedIn,\n        token: loggedIn ? platform.auth().data() : null,\n      });\n    })();\n  }\n\n  get reducer() {\n    return getAuthReducer(this.prefix);\n  }\n  /**\n   * @function\n   * @async\n   * @description Login function using username and password\n   */\n  @proxify\n  async login({ username, password, extension, remember }) {\n    logger.trace('login()');\n    this.store.dispatch({\n      type: this.actions.login,\n      payload: {\n        username,\n        password,\n        extension,\n        remember,\n      },\n    });\n    return await this[symbols.platform].login({\n      username,\n      password,\n      extension,\n      remember,\n    });\n  }\n\n  /**\n   * @function\n   * @description get OAuth page url\n   */\n  loginUrl({ redirectUri, state, brandId, display, prompt }) {\n    return this[symbols.platform].loginUrl({\n      redirectUri,\n      state,\n      brandId,\n      display,\n      prompt,\n    });\n  }\n\n  /**\n   * @function\n   * @param {string} url\n   * @return {Object}\n   */\n  parseLoginUrl(url) {\n    return this[symbols.platform].parseLoginRedirectUrl(url);\n  }\n\n  /**\n   * @function\n   * @async\n   * @description Authorize using OAauth code\n   */\n  @proxify\n  async authorize({ code, redirectUri }) {\n    this.store.dispatch({\n      type: this.actions.login,\n      payload: {\n        code,\n        redirectUri,\n      },\n    });\n    return await this[symbols.platform].login({\n      code,\n      redirectUri,\n    });\n  }\n\n  /**\n   * @function\n   * @async\n   * @description Log the user out\n   */\n  @proxify\n  async logout() {\n    // deal with removing subscriptions\n    this.store.dispatch({\n      type: this.actions.logout,\n    });\n    const handlers = [...this[symbols.beforeLogoutHandlers]];\n    for (const handler of handlers) {\n      try {\n        // wraps with async so even normal functions can be awaited\n        // TODO cancel logout if handler resolves to false\n        await (async () => handler())();\n      } catch (e) {\n        // TODO: should emit error\n      }\n    }\n    return await this[symbols.platform].logout();\n  }\n  /**\n   * @function\n   * @param {Function} handler\n   * @returns {Function}\n   */\n  @throwOnProxy\n  addBeforeLogoutHandler(handler) {\n    this[symbols.beforeLogoutHandlers].add(handler);\n    return () => {\n      this[symbols.beforeLogoutHandlers].remove(handler);\n    };\n  }\n  /**\n   * @function\n   * @param {Function} handler\n   */\n  @throwOnProxy\n  removeBeforeLogoutHandler(handler) {\n    this[symbols.beforeLogoutHandlers].remove(handler);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get events() {\n    return authEvents;\n  }\n\n  get eventTypes() {\n    return authEventTypes;\n  }\n\n  get constants() {\n    return CONSTANTS;\n  }\n\n  get ownerId() {\n    return this.state.token.owner_id;\n  }\n\n  @proxify\n  async isLoggedIn() {\n    return await this[symbols.platform].loggedIn();\n  }\n}\n\n"]}