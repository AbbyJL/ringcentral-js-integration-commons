{"version":3,"sources":["modules/DetailedPresence/getDetailedPresenceReducer.js"],"names":["getDataReducer","getDetailedPresenceReducer","types","state","type","activeCalls","timestamp","fetchSuccess","notification","map","activeCall","existingCall","find","call","id","startTime","resetSuccess","getTelephonyStatusReducer","telephonyStatus","status","data","dndStatus"],"mappings":";;;;;;;;;;QAUgBA,c,GAAAA,c;kBAqCQC,0B;;AA/CxB;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AAKO,SAASD,cAAT,CAAwBE,KAAxB,EAA+B;AACpC,SAAO,YAAuD;AAAA,QAAtDC,KAAsD,uEAA9C,EAA8C;AAAA;AAAA,QAAxCC,IAAwC,QAAxCA,IAAwC;AAAA,gCAAlCC,WAAkC;AAAA,QAAlCA,WAAkC,oCAApB,EAAoB;AAAA,QAAhBC,SAAgB,QAAhBA,SAAgB;;AAC5D,YAAQF,IAAR;AACE,WAAKF,MAAMK,YAAX;AACA,WAAKL,MAAMM,YAAX;AAAyB;AACvB,iBAAOH,YAAYI,GAAZ,CAAgB,UAACC,UAAD,EAAgB;AACrC,gBAAMC,eAAeR,MAAMS,IAAN,CAAW;AAAA,qBAASC,KAAKC,EAAL,KAAYJ,WAAWI,EAAhC;AAAA,aAAX,CAArB;AACA,gBAAI,CAACH,YAAL,EAAmB,kCAAY,qCAAgBD,UAAhB,CAAZ,IAAyCK,WAAWT,SAApD;AACnB;AACA,gBAAI,wCAAmBI,UAAnB,CAAJ,EAAoC,OAAOC,YAAP;AACpC,8CAAYA,YAAZ,EAA6B,qCAAgBD,UAAhB,CAA7B;AACD,WANM,CAAP;AAOD;AACD,WAAKR,MAAMc,YAAX;AACE,eAAO,EAAP;AACF;AACE,eAAOb,KAAP;AAdJ;AAgBD,GAjBD;AAkBD;;AAGD,SAASc,yBAAT,CAAmCf,KAAnC,EAA0C;AACxC,SAAO,YAAqD;AAAA,QAApDC,KAAoD,uEAA5C,IAA4C;AAAA;AAAA,QAApCC,IAAoC,SAApCA,IAAoC;AAAA,sCAA9Bc,eAA8B;AAAA,QAA9BA,eAA8B,yCAAZf,KAAY;;AAC1D,YAAQC,IAAR;AACE,WAAKF,MAAMK,YAAX;AACA,WAAKL,MAAMM,YAAX;AACE,eAAOU,eAAP;AACF,WAAKhB,MAAMc,YAAX;AACE,eAAO,IAAP;AACF;AACE,eAAOb,KAAP;AAPJ;AASD,GAVD;AAWD;;AAED;AACe,SAASF,0BAAT,CAAoCC,KAApC,EAA2C;AACxD,SAAO,4BAAgB;AACrBiB,YAAQ,sCAAuBjB,KAAvB,CADa;AAErBkB,UAAMpB,eAAeE,KAAf,CAFe;AAGrBmB,eAAW,6CAAoBnB,KAApB,CAHU;AAIrBgB,qBAAiBD,0BAA0Bf,KAA1B;AAJI,GAAhB,CAAP;AAMD","file":"getDetailedPresenceReducer.js","sourcesContent":["import 'core-js/fn/array/find';\nimport 'core-js/fn/array/find-index';\nimport { combineReducers } from 'redux';\nimport { getDndStatusReducer } from '../Presence/getPresenceReducer';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport {\n  normalizeFromTo,\n  isIntermediateCall,\n} from '../../lib/callLogHelpers';\n\nexport function getDataReducer(types) {\n  return (state = [], { type, activeCalls = [], timestamp }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.notification: {\n        return activeCalls.map((activeCall) => {\n          const existingCall = state.find(call => (call.id === activeCall.id));\n          if (!existingCall) return { ...normalizeFromTo(activeCall), startTime: timestamp };\n          // [RCINT-3558] should ignore intermediate call states\n          if (isIntermediateCall(activeCall)) return existingCall;\n          return { ...existingCall, ...normalizeFromTo(activeCall) };\n        });\n      }\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\n\nfunction getTelephonyStatusReducer(types) {\n  return (state = null, { type, telephonyStatus = state }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.notification:\n        return telephonyStatus;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\n/* istanbul ignore next: unnecessary to test combineReducers */\nexport default function getDetailedPresenceReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n    data: getDataReducer(types),\n    dndStatus: getDndStatusReducer(types),\n    telephonyStatus: getTelephonyStatusReducer(types),\n  });\n}\n"]}