{"version":3,"sources":["modules/DetailedPresence/index.js"],"names":["presenceRegExp","DetailedPresence","auth","client","subscription","connectivityMonitor","onRinging","onNewCall","onCallUpdated","onCallEnded","options","actionTypes","_subscriptionHandler","message","test","event","body","activeCalls","dndStatus","telephonyStatus","store","dispatch","type","notification","timestamp","Date","now","_onStateChange","_auth","loggedIn","_subscription","ready","_connectivityMonitor","status","pending","init","_connectivity","connectivity","fetch","subscribe","detailedPresence","initSuccess","_lastProcessedCalls","resetSuccess","_lastMessage","_fetch","calls","oldCalls","forEach","call","oldCallIndex","findIndex","item","sessionId","_onNewCall","_onRinging","oldCall","splice","_onCallUpdated","_onCallEnded","_client","_reducer","addSelector","state","map","data","filter","_lastTelephonyStatus","ownerId","service","platform","get","json","fetchSuccess","_promise","fetchError","error","_selectors","sessionIdList"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAOA,IAAMA,iBAAiB,mBAAvB;;IAEqBC,gB;;;AACnB,kCAUG;AAAA;;AAAA,QATDC,IASC,QATDA,IASC;AAAA,QARDC,MAQC,QARDA,MAQC;AAAA,QAPDC,YAOC,QAPDA,YAOC;AAAA,QANDC,mBAMC,QANDA,mBAMC;AAAA,QALDC,SAKC,QALDA,SAKC;AAAA,QAJDC,SAIC,QAJDA,SAIC;AAAA,QAHDC,aAGC,QAHDA,aAGC;AAAA,QAFDC,WAEC,QAFDA,WAEC;AAAA,QADEC,OACF;AAAA;;AAAA,qLAEIA,OAFJ;AAGCC;AAHD;;AAAA,UAiCHC,oBAjCG,GAiCoB,UAACC,OAAD,EAAa;AAClC,UAAIb,eAAec,IAAf,CAAoBD,QAAQE,KAA5B,KAAsCF,QAAQG,IAAlD,EAAwD;AAAA,4BAKlDH,QAAQG,IAL0C;AAAA,YAEpDC,WAFoD,iBAEpDA,WAFoD;AAAA,YAGpDC,SAHoD,iBAGpDA,SAHoD;AAAA,YAIpDC,eAJoD,iBAIpDA,eAJoD;;AAMtD,cAAKC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,gBAAM,MAAKX,WAAL,CAAiBY,YADL;AAElBN,kCAFkB;AAGlBC,8BAHkB;AAIlBC,0CAJkB;AAKlBK,qBAAWC,KAAKC,GAAL;AALO,SAApB;AAOD;AACF,KAhDE;;AAAA,UAiDHC,cAjDG,8DAiDc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEb,MAAKC,KAAL,CAAWC,QAAX,IACA,MAAKC,aAAL,CAAmBC,KADnB,KAEC,CAAC,MAAKC,oBAAN,IAA8B,MAAKA,oBAAL,CAA0BD,KAFzD,KAGA,MAAKE,MAAL,KAAgB,uBAAaC,OALhB;AAAA;AAAA;AAAA;;AAOb,oBAAKd,KAAL,CAAWC,QAAX,CAAoB;AAClBC,sBAAM,MAAKX,WAAL,CAAiBwB;AADL,eAApB;AAGA,kBAAI,MAAKH,oBAAT,EAA+B;AAC7B,sBAAKI,aAAL,GAAqB,MAAKJ,oBAAL,CAA0BK,YAA/C;AACD;AAZY;AAAA,qBAaP,MAAKC,KAAL,EAbO;;AAAA;AAcb,oBAAKR,aAAL,CAAmBS,SAAnB,CAA6B,8BAAoBC,gBAAjD;AACA,oBAAKpB,KAAL,CAAWC,QAAX,CAAoB;AAClBC,sBAAM,MAAKX,WAAL,CAAiB8B;AADL,eAApB;AAfa;AAAA;;AAAA;AAkBR,kBACL,CACE,CAAC,MAAKb,KAAL,CAAWC,QAAZ,IACA,CAAC,MAAKC,aAAL,CAAmBC,KADpB,IAEC,MAAKC,oBAAL,IAA6B,CAAC,MAAKA,oBAAL,CAA0BD,KAH3D,KAKA,MAAKA,KANA,EAOL;AACA,sBAAKW,mBAAL,GAA2B,EAA3B;AACA,sBAAKtB,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,MAAKX,WAAL,CAAiBgC;AADL,iBAApB;AAGD,eAZM,MAYA,IACL,MAAKZ,KAAL,IACA,MAAKD,aAAL,CAAmBC,KADnB,IAEA,MAAKD,aAAL,CAAmBjB,OAFnB,IAGA,MAAKiB,aAAL,CAAmBjB,OAAnB,KAA+B,MAAK+B,YAJ/B,EAKL;AACA,sBAAKA,YAAL,GAAoB,MAAKd,aAAL,CAAmBjB,OAAvC;AACA,sBAAKD,oBAAL,CAA0B,MAAKgC,YAA/B;AACD,eARM,MAQA,IACL,MAAKb,KAAL,IACA,MAAKC,oBADL,IAEA,MAAKA,oBAAL,CAA0BD,KAF1B,IAGA,MAAKK,aAAL,KAAuB,MAAKJ,oBAAL,CAA0BK,YAJ5C,EAKL;AACA,sBAAKD,aAAL,GAAqB,MAAKJ,oBAAL,CAA0BK,YAA/C;AACA;AACA,oBAAI,MAAKD,aAAT,EAAwB;AACtB,wBAAKS,MAAL;AACD;AACF;;AAjDc;AAkDf,kBACE,MAAKd,KAAL,IACA,MAAKW,mBAAL,KAA6B,MAAKI,KAFpC,EAGE;AACMC,wBADN,8CACqB,MAAKL,mBAD1B;;AAEA,sBAAKA,mBAAL,GAA2B,MAAKI,KAAhC;;AAEA,sBAAKA,KAAL,CAAWE,OAAX,CAAmB,UAACC,IAAD,EAAU;AAC3B,sBAAMC,eAAeH,SAASI,SAAT,CAAmB;AAAA,2BAAQC,KAAKC,SAAL,KAAmBJ,KAAKI,SAAhC;AAAA,mBAAnB,CAArB;AACA,sBAAIH,iBAAiB,CAAC,CAAtB,EAAyB;AACvB,wBAAI,OAAO,MAAKI,UAAZ,KAA2B,UAA/B,EAA2C;AACzC,4BAAKA,UAAL,CAAgBL,IAAhB;AACD;AACD,wBAAI,OAAO,MAAKM,UAAZ,KAA2B,UAA3B,IAAyC,+BAAUN,IAAV,CAA7C,EAA8D;AAC5D,4BAAKM,UAAL,CAAgBN,IAAhB;AACD;AACF,mBAPD,MAOO;AACL,wBAAMO,UAAUT,SAASG,YAAT,CAAhB;AACAH,6BAASU,MAAT,CAAgBP,YAAhB,EAA8B,CAA9B;AACA,wBACED,KAAK9B,eAAL,KAAyBqC,QAAQrC,eAAjC,IACA,OAAO,MAAKuC,cAAZ,KAA+B,UAFjC,EAGE;AACA,4BAAKA,cAAL,CAAoBT,IAApB;AACD;AACF;AACF,iBAnBD;AAoBAF,yBAASC,OAAT,CAAiB,UAACC,IAAD,EAAU;AACzB,sBAAI,OAAO,MAAKU,YAAZ,KAA6B,UAAjC,EAA6C;AAC3C,0BAAKA,YAAL,CAAkBV,IAAlB;AACD;AACF,iBAJD;AAKD;;AAlFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjDd;;AAKD,UAAKrB,KAAL,GAAa1B,IAAb;AACA,UAAK0D,OAAL,GAAezD,MAAf;AACA,UAAK2B,aAAL,GAAqB1B,YAArB;AACA,UAAK4B,oBAAL,GAA4B3B,mBAA5B;AACA,UAAKkD,UAAL,GAAkBjD,SAAlB;AACA,UAAKgD,UAAL,GAAkB/C,SAAlB;AACA,UAAKmD,cAAL,GAAsBlD,aAAtB;AACA,UAAKmD,YAAL,GAAoBlD,WAApB;;AAEA,UAAKoD,QAAL,GAAgB,0CAA2B,MAAKlD,WAAhC,CAAhB;AACA,UAAKiC,YAAL,GAAoB,IAApB;AACA,UAAKkB,WAAL,CAAiB,eAAjB,EACE;AAAA,aAAM,MAAKC,KAAL,CAAWjB,KAAjB;AAAA,KADF,EAEE;AAAA,aAASA,MAAMkB,GAAN,CAAU;AAAA,eAAQf,KAAKI,SAAb;AAAA,OAAV,CAAT;AAAA,KAFF;;AAKA,UAAKS,WAAL,CAAiB,OAAjB,EACE;AAAA,aAAM,MAAKC,KAAL,CAAWE,IAAjB;AAAA,KADF,EAEE;AAAA,aACE,8CAAyB,sDAAiCA,IAAjC,CAAzB,EACGC,MADH,CACU;AAAA,eAAQ,CAAC,6BAAQjB,IAAR,CAAT;AAAA,OADV,CADF;AAAA,KAFF;;AAQA,UAAKP,mBAAL,GAA2B,EAA3B;AACA,UAAKyB,oBAAL,GAA4B,IAA5B;AA9BC;AA+BF;;;;iCAuGY;AACX,WAAK/C,KAAL,CAAWmB,SAAX,CAAqB,KAAKZ,cAA1B;AACD;;;;;;;;;;;AAkBC,qBAAKP,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKX,WAAL,CAAiB2B;AADL,iBAApB;AAGM8B,uB,GAAU,KAAKxC,KAAL,CAAWwC,O;;;uBAMd,KAAKR,OAAL,CAAaS,OAAb,CAAqBC,QAArB,GACRC,GADQ,CACJ,8BAAoB/B,gBADhB,C;;;uCACmCgC,I;AAJ5CvD,2B,SAAAA,W;AACAC,yB,SAAAA,S;AACAC,+B,SAAAA,e;;AAGF,oBAAI,KAAKS,KAAL,CAAWwC,OAAX,KAAuBA,OAA3B,EAAoC;AAClC,uBAAKhD,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,KAAKX,WAAL,CAAiB8D,YADL;AAElBxD,4CAFkB;AAGlBC,wCAHkB;AAIlBC,oDAJkB;AAKlBK,+BAAWC,KAAKC,GAAL;AALO,mBAApB;AAOA,uBAAKgD,QAAL,GAAgB,IAAhB;AACD;;;;;;;;AAED,oBAAI,KAAK9C,KAAL,CAAWwC,OAAX,KAAuBA,OAA3B,EAAoC;AAClC,uBAAKhD,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,KAAKX,WAAL,CAAiBgE,UADL;AAElBC;AAFkB,mBAApB;AAIA,uBAAKF,QAAL,GAAgB,IAAhB;AACD;;;;;;;;;;;;;;;;;;wBA5CM;AACT,aAAO,KAAKX,KAAL,CAAWE,IAAlB;AACD;;;wBACW;AACV,aAAO,KAAKY,UAAL,CAAgB/B,KAAhB,EAAP;AACD;;;wBAEqB;AACpB,aAAO,KAAKiB,KAAL,CAAW5C,eAAlB;AACD;;;wBAEmB;AAClB,aAAO,KAAK0D,UAAL,CAAgBC,aAAhB,EAAP;AACD;;;;;kBAlKkB7E,gB","file":"index.js","sourcesContent":["import Presence from '../Presence';\nimport moduleStatus from '../../enums/moduleStatus';\nimport actionTypes from './actionTypes';\nimport getDetailedPresenceReducer from './getDetailedPresenceReducer';\nimport telephonyStatuses from '../../enums/telephonyStatuses';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport {\n  isEnded,\n  isRinging,\n  removeDuplicateIntermediateCalls,\n  removeInboundRingOutLegs,\n} from '../../lib/callLogHelpers';\n\nconst presenceRegExp = /\\/presence(\\?.*)?/;\n\nexport default class DetailedPresence extends Presence {\n  constructor({\n    auth,\n    client,\n    subscription,\n    connectivityMonitor,\n    onRinging,\n    onNewCall,\n    onCallUpdated,\n    onCallEnded,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._client = client;\n    this._subscription = subscription;\n    this._connectivityMonitor = connectivityMonitor;\n    this._onRinging = onRinging;\n    this._onNewCall = onNewCall;\n    this._onCallUpdated = onCallUpdated;\n    this._onCallEnded = onCallEnded;\n\n    this._reducer = getDetailedPresenceReducer(this.actionTypes);\n    this._lastMessage = null;\n    this.addSelector('sessionIdList',\n      () => this.state.calls,\n      calls => calls.map(call => call.sessionId),\n    );\n\n    this.addSelector('calls',\n      () => this.state.data,\n      data => (\n        removeInboundRingOutLegs(removeDuplicateIntermediateCalls(data))\n          .filter(call => !isEnded(call))\n      ),\n    );\n\n    this._lastProcessedCalls = [];\n    this._lastTelephonyStatus = null;\n  }\n\n  _subscriptionHandler = (message) => {\n    if (presenceRegExp.test(message.event) && message.body) {\n      const {\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n      } = message.body;\n      this.store.dispatch({\n        type: this.actionTypes.notification,\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n        timestamp: Date.now(),\n      });\n    }\n  }\n  _onStateChange = async () => {\n    if (\n      this._auth.loggedIn &&\n      this._subscription.ready &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      this.status === moduleStatus.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._connectivityMonitor) {\n        this._connectivity = this._connectivityMonitor.connectivity;\n      }\n      await this.fetch();\n      this._subscription.subscribe(subscriptionFilters.detailedPresence);\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._auth.loggedIn ||\n        !this._subscription.ready ||\n        (this._connectivityMonitor && !this._connectivityMonitor.ready)\n      ) &&\n      this.ready\n    ) {\n      this._lastProcessedCalls = [];\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    ) {\n      this._lastMessage = this._subscription.message;\n      this._subscriptionHandler(this._lastMessage);\n    } else if (\n      this.ready &&\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      // fetch data on regain connectivity\n      if (this._connectivity) {\n        this._fetch();\n      }\n    }\n    if (\n      this.ready &&\n      this._lastProcessedCalls !== this.calls\n    ) {\n      const oldCalls = [...this._lastProcessedCalls];\n      this._lastProcessedCalls = this.calls;\n\n      this.calls.forEach((call) => {\n        const oldCallIndex = oldCalls.findIndex(item => item.sessionId === call.sessionId);\n        if (oldCallIndex === -1) {\n          if (typeof this._onNewCall === 'function') {\n            this._onNewCall(call);\n          }\n          if (typeof this._onRinging === 'function' && isRinging(call)) {\n            this._onRinging(call);\n          }\n        } else {\n          const oldCall = oldCalls[oldCallIndex];\n          oldCalls.splice(oldCallIndex, 1);\n          if (\n            call.telephonyStatus !== oldCall.telephonyStatus &&\n            typeof this._onCallUpdated === 'function'\n          ) {\n            this._onCallUpdated(call);\n          }\n        }\n      });\n      oldCalls.forEach((call) => {\n        if (typeof this._onCallEnded === 'function') {\n          this._onCallEnded(call);\n        }\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get data() {\n    return this.state.data;\n  }\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get telephonyStatus() {\n    return this.state.telephonyStatus;\n  }\n\n  get sessionIdList() {\n    return this._selectors.sessionIdList();\n  }\n\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const ownerId = this._auth.ownerId;\n    try {\n      const {\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n      } = (await this._client.service.platform()\n        .get(subscriptionFilters.detailedPresence)).json();\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          activeCalls,\n          dndStatus,\n          telephonyStatus,\n          timestamp: Date.now(),\n        });\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        this._promise = null;\n      }\n    }\n  }\n}\n"]}