{"version":3,"sources":["modules/Locale/index.js"],"names":["Locale","defaultLocale","options","actionTypes","_reducer","types","_checkIntl","setLocale","currentLocale","setup","locale","store","dispatch","type","init","global","Intl","process","browser","require","ensure","resolve","state","status","ready","pending"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;IAEqBA,M;;;AACnB,oBAGQ;AAAA,mFAAJ,EAAI;AAAA,QAFNC,aAEM,QAFNA,aAEM;AAAA,QADHC,OACG;;AAAA;;AAAA,iKAEDA,OAFC;AAGJC;AAHI;;AAKN,UAAKC,QAAL,GAAgB,gCAAiB,EAAEH,4BAAF,EAAiBI,OAAO,MAAKF,WAA7B,EAAjB,CAAhB;AALM;AAMP;;;;iCACY;AAAA;;AACX,iEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACO,OAAKG,UAAL,EADP;;AAAA;AAAA;AAAA,uBAEO,eAAKC,SAAL,CAAe,OAAKC,aAApB,CAFP;;AAAA;AAGC,wCAAcC,KAAd,CAAoB;AAClBC,0BAAQ,OAAKF;AADK,iBAApB;AAGA,uBAAKG,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,OAAKV,WAAL,CAAiBW;AADL,iBAApB;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;AAUD;;AAED;;;;;;;;iCAKa;AACX,aAAO,sBAAY,mBAAW;AAC5B,YAAI,CAACC,OAAOC,IAAZ,EAAkB;AAChB,cAAIC,QAAQC,OAAZ,EAAqB;AACnBC,oBAAQC,MAAR,CAAe,CACb,MADa,EAEb,2BAFa,EAGb,2BAHa,EAIb,2BAJa,CAAf,EAKG,mBAAW;AACZD,sBAAQ,MAAR;AACAA,sBAAQ,2BAAR;AACAA,sBAAQ,2BAAR;AACAA,sBAAQ,2BAAR;;AAEAE;AACD,aAZD,EAYG,MAZH;AAaD,WAdD,MAcO;AACLF,oBAAQ,MAAR;;AAEAE;AACD;AACF,SApBD,MAoBO;AACLA;AACD;AACF,OAxBM,CAAP;AAyBD;;AAED;;;;;;;;AAmBA;;;;;;;;;+FAQgBX,M;;;;;;uBACR,eAAKH,SAAL,CAAeG,MAAf,C;;;AACN,wCAAcD,KAAd,CAAoB;AAClBC,0BAAQ,KAAKF;AADK,iBAApB;AAGA,qBAAKG,KAAL,CAAWC,QAAX,CAAoB;AAClBC,wBAAM,KAAKV,WAAL,CAAiBI,SADL;AAElBG;AAFkB,iBAApB;;;;;;;;;;;;;;;;;;wBA7BkB;AAClB,aAAO,KAAKY,KAAL,CAAWd,aAAlB;AACD;;;wBAEY;AACX,aAAO,KAAKc,KAAL,CAAWC,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKD,KAAL,CAAWC,MAAX,KAAsB,uBAAaC,KAA1C;AACD;;;wBAEa;AACZ,aAAO,KAAKF,KAAL,CAAWC,MAAX,KAAsB,uBAAaE,OAA1C;AACD;;;;;kBA1EkBzB,M","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport formatMessage from 'format-message';\n\nimport I18n from '../../lib/I18n';\nimport moduleStatus from '../../enums/moduleStatus';\nimport actionTypes from './actionTypes';\nimport getLocaleReducer from './getLocaleReducer';\n\n/* eslint-disable global-require */\n\nexport default class Locale extends RcModule {\n  constructor({\n    defaultLocale,\n    ...options\n  } = {}) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._reducer = getLocaleReducer({ defaultLocale, types: this.actionTypes });\n  }\n  initialize() {\n    (async () => {\n      await this._checkIntl();\n      await I18n.setLocale(this.currentLocale);\n      formatMessage.setup({\n        locale: this.currentLocale,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n    })();\n  }\n\n  /**\n   *  @function\n   *  @description Check if the current environement requires the Intl polyfill.\n   *  @return {Promise}\n   */\n  _checkIntl() {\n    return new Promise(resolve => {\n      if (!global.Intl) {\n        if (process.browser) {\n          require.ensure([\n            'intl',\n            'intl/locale-data/jsonp/en',\n            'intl/locale-data/jsonp/de',\n            'intl/locale-data/jsonp/fr',\n          ], require => {\n            require('intl');\n            require('intl/locale-data/jsonp/en');\n            require('intl/locale-data/jsonp/de');\n            require('intl/locale-data/jsonp/fr');\n\n            resolve();\n          }, 'intl');\n        } else {\n          require('intl');\n\n          resolve();\n        }\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * @property {String} currentLocale\n   */\n  get currentLocale() {\n    return this.state.currentLocale;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatus.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatus.pending;\n  }\n\n  /**\n   *  @function\n   *  @description Sets the desired locale as the current locale. This will also\n   *    set all I18n instances to the same locale, as well as set formatMessage to use\n   *    the same locale.\n   *  @param {String} locale\n   *  @return {Promise}\n   */\n  async setLocale(locale) {\n    await I18n.setLocale(locale);\n    formatMessage.setup({\n      locale: this.currentLocale,\n    });\n    this.store.dispatch({\n      type: this.actionTypes.setLocale,\n      locale,\n    });\n  }\n}\n"]}