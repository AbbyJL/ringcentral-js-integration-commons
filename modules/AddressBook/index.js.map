{"version":3,"sources":["modules/AddressBook/index.js"],"names":["CONTACTS_PER_PAGE","DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","REGX_DECODE","DECODE","getSyncParams","syncToken","pageId","query","perPage","syncType","iSync","fSync","AddressBook","deps","dep","optional","client","auth","storage","ttl","timeToRetry","polling","disableCache","options","actionTypes","_client","_storage","_auth","_ttl","_timeToRetry","_polling","_promise","_syncTokenStorageKey","_syncTimestampStorageKey","_addressBookStorageKey","_reducer","registerReducer","key","reducer","contactList","syncTimestamp","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_shouleCleanCache","_cleanUp","_initAddressBook","initSuccess","_shouldReset","_resetModuleStatus","ready","loggedIn","pending","isFreshLogin","timestamp","Date","now","sync","console","error","reset","_clearTimeout","resetSuccess","_sync","response","syncSuccess","records","syncInfo","syncTime","_startPolling","_onSyncError","_retry","syncError","params","_syncAddressBookApi","nextPageId","lastResponse","concat","account","extension","addressBookSync","list","updateRequest","_decodeAddressBook","text","replace","$0","handleText","origin","Array","isArray","forEach","record","firstName","_decode","lastName","cleanUp","state","status","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport sleep from '../../lib/sleep';\nimport syncTypes from '../../enums/syncTypes';\nimport actionTypes from './actionTypes';\nimport proxify from '../../lib/proxy/proxify';\n\nimport getAddressBookReducer, {\n  getSyncTokenReducer,\n  getContactListReducer,\n  getSyncTimestampReducer,\n} from './getAddressBookReducer';\n\nconst CONTACTS_PER_PAGE = 250;\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst REGX_DECODE = /&\\w+;/g;\nconst DECODE = {\n  '&amp;': '&',\n  '&bsol;': '\\\\',\n  '&sol;': '/',\n  '&apos;': '\\''\n};\n\nfunction getSyncParams(syncToken, pageId) {\n  const query = {\n    perPage: CONTACTS_PER_PAGE,\n  };\n  if (syncToken) {\n    query.syncToken = syncToken;\n    query.syncType = syncTypes.iSync;\n  } else {\n    query.syncType = syncTypes.fSync;\n  }\n  if (pageId) {\n    query.pageId = pageId;\n  }\n  return query;\n}\n\n/**\n * @class\n * @description Accound book module to get user person contacts in RC\n */\n@Module({\n  deps: [\n    'Client',\n    'Auth',\n    { dep: 'Storage', optional: true },\n    { dep: 'AddressBookOptions', optional: true }\n  ]\n})\nexport default class AddressBook extends Pollable {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {Auth} params.auth - Auth module instance\n   * @param {Storage} params.storage - storage module instance, optional\n   * @param {Number} params.ttl - local cache timestamp, default 30 mins\n   * @param {Number} params.timeToRetry - timestamp to retry, default 62 seconds\n   * @param {Bool} params.polling - polling flag, default true\n   * @param {Bool} params.disableCache - polling flag, default false\n   */\n  constructor({\n    client,\n    auth,\n    storage,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    polling = true,\n    disableCache = false,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._auth = auth;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._polling = polling;\n    this._promise = null;\n    this._syncTokenStorageKey = 'contactsSyncToken';\n    this._syncTimestampStorageKey = 'contactsSyncTimestamp';\n    this._addressBookStorageKey = 'addressBookContactsList';\n    if (this._storage) {\n      this._reducer = getAddressBookReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._syncTokenStorageKey,\n        reducer: getSyncTokenReducer(this.actionTypes),\n      });\n      this._storage.registerReducer({\n        key: this._syncTimestampStorageKey,\n        reducer: getSyncTimestampReducer(this.actionTypes),\n      });\n      this._storage.registerReducer({\n        key: this._addressBookStorageKey,\n        reducer: getContactListReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getAddressBookReducer(this.actionTypes, {\n        contactList: getContactListReducer(this.actionTypes),\n        syncToken: getSyncTokenReducer(this.actionTypes),\n        syncTimestamp: getSyncTimestampReducer(this.actionTypes),\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._shouleCleanCache()) {\n        this._cleanUp();\n      }\n      await this._initAddressBook();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      (!this._storage || this._storage.ready) &&\n      this._auth.loggedIn &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        (!!this._storage && !this._storage.ready) ||\n        !this._auth.loggedIn\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouleCleanCache() {\n    return (\n      this._auth.isFreshLogin ||\n      !this.timestamp ||\n      (Date.now() - this.timestamp) > this._ttl\n    );\n  }\n\n  async _initAddressBook() {\n    try {\n      await this.sync();\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.reset,\n    });\n    this._clearTimeout();\n    this._promise = null;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n  @proxify\n  async sync() {\n    if (!this._promise) {\n      this._promise = (async () => {\n        try {\n          this.store.dispatch({\n            type: this.actionTypes.sync,\n          });\n          const response = await this._sync(this.syncToken);\n          this.store.dispatch({\n            type: this.actionTypes.syncSuccess,\n            records: response.records,\n            syncToken: response.syncInfo.syncToken,\n            syncTime: response.syncInfo.syncTime,\n          });\n          if (this._polling) {\n            this._startPolling();\n          }\n        } catch (error) {\n          this._onSyncError();\n          if (this._polling) {\n            this._startPolling(this.timeToRetry);\n          } else {\n            this._retry();\n          }\n          throw error;\n        }\n        this._promise = null;\n      })();\n    }\n  }\n\n  _onSyncError() {\n    this.store.dispatch({\n      type: this.actionTypes.syncError,\n    });\n  }\n\n  @proxify\n  async _sync(syncToken, pageId) {\n    const params = getSyncParams(syncToken, pageId);\n    const response = await this._syncAddressBookApi(params);\n    if (!response.nextPageId) {\n      return response;\n    }\n    await sleep(1000);\n    const lastResponse = await this._sync(syncToken, response.nextPageId);\n    return {\n      ...lastResponse,\n      records: response.records.concat(lastResponse.records),\n    };\n  }\n  @proxify\n  async _syncAddressBookApi(params) {\n    const updateRequest = await this._client\n      .account()\n      .extension()\n      .addressBookSync()\n      .list(params);\n    this._decodeAddressBook(updateRequest);\n    return updateRequest;\n  }\n\n  _decode(text) {\n    return text.replace(REGX_DECODE, ($0) => {\n      let handleText = $0;\n      if (DECODE[$0]) {\n        handleText = DECODE[$0];\n      }\n      return handleText;\n    });\n  }\n\n  _decodeAddressBook(origin) {\n    if (origin && origin.records && Array.isArray(origin.records)) {\n      origin.records.forEach((record) => {\n        if (record.firstName) {\n          record.firstName = this._decode(record.firstName);\n        }\n        if (record.lastName) {\n          record.lastName = this._decode(record.lastName);\n        }\n      });\n    }\n  }\n\n  _cleanUp() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanUp,\n    });\n  }\n  @proxify\n  async fetchData() {\n    await this.sync();\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get syncToken() {\n    if (this._storage) {\n      return this._storage.getItem(this._syncTokenStorageKey);\n    }\n    return this.state.syncToken;\n  }\n\n  get contacts() {\n    if (this._storage) {\n      return this._storage.getItem(this._addressBookStorageKey);\n    }\n    return this.state.contactList;\n  }\n\n  get timestamp() {\n    if (this._storage) {\n      return this._storage.getItem(this._syncTimestampStorageKey);\n    }\n    return this.state.syncTimestamp;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n}\n"]}