{"version":3,"sources":["modules/webphone/index.js"],"names":["symbols","platform","post","sipInfo","transport","then","res","json","info","logLevel","audioHelper","enabled","initPhoneInstance","flag","currentSession","stopRecord","store","dispatch","type","actions","callOperation","operation","startRecord","record","unmute","mute","unhold","hold","park","number","checkSession","transfer","payload","flip","dtmf","name","args","call","error","emit","operations","CONSTANTS","webphoneStatus","callStatus","Webphone","options","api","settings","auth","isRegistered","on","AuthStatusChange","phoneInstance","userAgent","registerSuccess","registerSuccessed","unregister","clear","registerError","registerFailed","session","listenSessionEvents","callIncoming","remoteIdentity","localIdentity","toNumber","fromNumber","media","Error","callConnecting","invite","render","console","callError","callFailed","accept","terminate","incoming","outgoing","loadAudio","sessionError","response","data","callConnect","to","from","callAccept","callConnected","cause","callEnd","prefix"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/rc-module';\nimport SymbolMap from 'data-types/symbol-map';\nimport KeyValueMap from 'data-types/key-value-map';\nimport webphoneActions from './webphone-actions';\nimport callActions from './call-actions';\nimport getReducer from './webphone-reducer';\nimport RingCentralWebphone from 'ringcentral-web-phone';\nimport webphoneStatus from './webphone-status';\nimport callStatus from './call-status';\n\nimport authEvents from '../auth/auth-events';\nimport { webphoneEvents } from './webphone-events';\n\nconst symbols = new SymbolMap([\n  'api',\n  'auth',\n  'platform',\n  'emitter',\n  'settings',\n  'phoneInstance',\n]);\n\nconst CONSTANTS = new KeyValueMap({\n  webphoneStatus,\n  callStatus,\n});\n\nasync function initPhoneInstance() {\n  const info = await this[symbols.platform]\n    .post('/client-info/sip-provision', {\n      sipInfo: [{ transport: 'WSS' }],\n    })\n    .then(res => res.json());\n  return new RingCentralWebphone(info, {\n    logLevel: 0,\n    audioHelper: {\n      enabled: true,\n    },\n  });\n}\n\nasync function record(flag = true) {\n  if (!flag) {\n    await this.currentSession.stopRecord();\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.stopRecord,\n      },\n    });\n  } else {\n    await this.currentSession.startRecord();\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.record,\n      },\n    });\n  }\n}\n\nasync function mute(flag = true) {\n  if (!flag) {\n    await this.currentSession.unmute();\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.unmute,\n      },\n    });\n  } else {\n    await this.currentSession.mute();\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.mute,\n      },\n    });\n  }\n}\n\nasync function hold(flag = true) {\n  if (!flag) {\n    await this.currentSession.unhold();\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.unhold,\n      },\n    });\n  } else {\n    await this.currentSession.hold();\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.hold,\n      },\n    });\n  }\n}\n\nasync function park() {\n  await this.currentSession.park();\n  this.store.dispatch({\n    type: this.actions.callOperation,\n    operation: {\n      type: callActions.park,\n    },\n  });\n}\n\nasync function transfer(number) {\n  this.checkSession();\n  await this.currentSession.transfer(number);\n  this.store.dispatch({\n    type: this.actions.callOperation,\n    operation: {\n      type: callActions.transfer,\n      payload: {\n        number,\n      },\n    },\n  });\n}\n\nasync function flip(number) {\n  this.checkSession();\n  await this.currentSession.flip(number);\n  this.store.dispatch({\n    type: this.actions.callOperation,\n    operation: {\n      type: callActions.flip,\n      payload: {\n        number,\n      },\n    },\n  });\n}\n\nasync function dtmf(number) {\n  this.checkSession();\n  await this.currentSession.dtmf(number);\n  this.store.dispatch({\n    type: this.actions.callOperation,\n    operation: {\n      type: callActions.dtmf,\n      payload: {\n        number,\n      },\n    },\n  });\n}\n\nasync function operations(name, ...args) {\n  const actions = { record, mute, hold, park, transfer, flip, dtmf };\n  this.checkSession();\n  try {\n    await actions[name].call(this, ...args);\n  } catch (error) {\n    this.store.dispatch({\n      type: this.actions.callOperation,\n      operation: {\n        type: callActions.error,\n        error,\n      },\n    });\n    this.emit(webphoneEvents[name]);\n    // TODO: needed?\n    throw error;\n  }\n}\n\nexport default class Webphone extends RcModule {\n  constructor(options) {\n    super({\n      ...options,\n      actions: webphoneActions,\n    });\n    const {\n      api,\n      platform,\n      settings,\n      auth,\n    } = options;\n    this[symbols.api] = api;\n    this[symbols.platform] = platform;\n    this[symbols.settings] = settings;\n    this[symbols.auth] = auth;\n\n    this.currentSession = null;\n    this.isRegistered = false;\n\n    // TODO: commented out until setting module completed\n    // settings.registerReducer('webphone', getWebphoneReducer())\n    this[symbols.auth].on(authEvents.AuthStatusChange, async () => {\n      this[symbols.phoneInstance] = await this::initPhoneInstance();\n      this[symbols.phoneInstance].userAgent.on('registered', () => {\n        // sip will fire multiple registered events, only dispatch one register action to state.\n        // TODO: is this isRegistered state needed to be store as instance variable\n        //       or just check store state\n        if (!this.isRegistered) {\n          this.store.dispatch({\n            type: this.actions.registerSuccess,\n          });\n          this.emit(webphoneEvents.registerSuccessed);\n        }\n        this.isRegistered = this[symbols.phoneInstance].userAgent.isRegistered();\n      });\n      this[symbols.phoneInstance].userAgent.on('unregistered', () => {\n        this.isRegistered = this[symbols.phoneInstance].userAgent.isRegistered();\n        this.store.dispatch({\n          type: this.actions.unregister,\n          operation: {\n            type: callActions.clear,\n          },\n        });\n      });\n      this[symbols.phoneInstance].userAgent.on('registrationFailed', (error) => {\n        this.store.dispatch({\n          type: this.actions.registerError,\n          error,\n        });\n        this.emit(webphoneEvents.registerFailed);\n      });\n      this[symbols.phoneInstance].userAgent.on('invite', (session) => {\n        this.currentSession = session;\n        this.listenSessionEvents();\n        this.store.dispatch({\n          type: this.actions.callIncoming,\n          payload: {\n            remoteIdentity: session.remoteIdentity,\n            localIdentity: session.localIdentity,\n          },\n        });\n        this.emit(webphoneEvents.callIncoming);\n      });\n    });\n  }\n\n  get reducer() {\n    return getReducer(this.prefix);\n  }\n\n  get constants() {\n    return CONSTANTS;\n  }\n\n  /**\n   * Make a phone call, this method should be called in registerSuccess state\n   * @param {string} toNumber\n   * @param {string} [fromNumber]\n   * @return {Session}\n   */\n  async call({ toNumber, fromNumber, media }) {\n    // Check status\n    if (!this[symbols.phoneInstance]) {\n      throw Error('not registered');\n    }\n    this.store.dispatch({\n      type: this.actions.call,\n      payload: {\n        toNumber,\n        fromNumber,\n      },\n    });\n    this.emit(webphoneEvents.callConnecting);\n    this.currentSession = this[symbols.phoneInstance].userAgent.invite(toNumber, {\n      fromNumber,\n      media: {\n        render: media,\n      },\n    });\n    this.listenSessionEvents();\n    try {\n      await this.currentSession;\n    } catch (error) {\n      console.error(error);\n      this.store.dispatch({\n        type: this.actions.callError,\n        error,\n      });\n      this.emit(webphoneEvents.callFailed);\n    }\n    return this.currentSession;\n  }\n\n  /**\n   * Accept a phone call, this method should be called when call is incoming\n   * @param {Object} media, see https://github.com/ringcentral/ringcentral-web-phone#accepting-incoming-call\n   * @return {Promise}\n   */\n  async accept(media) {\n    this.checkSession();\n    try {\n      await this.currentSession.accept(media);\n    } catch (error) {\n      // TODO\n      console.error(error);\n    }\n  }\n\n  async bye() {\n    this.checkSession();\n    try {\n      await this.currentSession.terminate();\n    } catch (error) {\n      // TODO\n      console.error(error);\n    }\n  }\n\n  async record(flag) {\n    operations.call(this, 'record', flag);\n  }\n\n  async mute(flag) {\n    operations.call(this, 'mute', flag);\n  }\n\n  async hold(flag) {\n    operations.call(this, 'hold', flag);\n  }\n\n  async park(flag) {\n    operations.call(this, 'park', flag);\n  }\n\n  async transfer(number) {\n    operations.call(this, 'transfer', number);\n  }\n\n  async flip(number) {\n    operations.call(this, 'flip', number);\n  }\n\n  async dtmf(number) {\n    operations.call(this, 'dtmf', number);\n  }\n\n  loadRingAudio({ incoming, outgoing }) {\n    this[symbols.phoneInstance].userAgent.audioHelper.loadAudio({\n      incoming,\n      outgoing,\n    });\n  }\n\n  checkSession() {\n    if (!this.currentSession) {\n      this.store.dispatch({\n        type: this.actions.sessionError,\n      });\n      throw Error('No active session');\n    }\n  }\n\n  /**\n   * Internal method for listen session events\n   */\n  listenSessionEvents() {\n    this.currentSession.on('accepted', (response) => {\n      // accepted event for outbound call will returne a incomingResponse\n      if (response.data) {\n        this.store.dispatch({\n          type: this.actions.callConnect,\n          payload: {\n            remoteIdentity: response.to,\n            localIdentity: response.from,\n          },\n        });\n      // accepted event for inbound call will only contain a raw sip data\n      } else {\n        this.store.dispatch({\n          type: this.actions.callAccept,\n        });\n      }\n      this.emit(webphoneEvents.callConnected);\n    });\n    // all situation about call terminated except 'call cancel'\n    this.currentSession.on('terminated', (response, cause) => {\n      this.store.dispatch({\n        type: this.actions.callEnd,\n        error: cause,\n      });\n      this.currentSession = null;\n    });\n    // when we call out and cancel the phone call\n    this.currentSession.on('cancel', (response, cause) => {\n      this.store.dispatch({\n        type: this.actions.callEnd,\n        error: cause,\n      });\n      this.currentSession = null;\n    });\n    // should not need\n    this.currentSession.on('bye', (response) => {\n      this.store.dispatch({\n        type: this.actions.callEnd,\n      });\n      this.currentSession = null;\n    });\n  }\n}\n"]}