{"version":3,"sources":["modules/GlipPosts/getReducer.js"],"names":["getGlipPostsStatusReducer","getGlipPostsCreateStatusReducer","getGlipPostsStoreReducer","getGlipPostsInputsReducer","getGlipPostsReducer","types","state","idle","type","fetch","fetching","fetchError","fetchSuccess","create","creating","createError","createSuccess","groupId","records","record","oldRecordId","isSendByMe","newState","newPosts","oldPostIndex","findIndex","p","id","splice","creatorId","text","sendStatus","concat","resetSuccess","textValue","updatePostInput","reducers","status","fetchStatus","glipPostsStore","createStatus","postInputs"],"mappings":"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","file":"getReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport status from './status';\n\nexport function getGlipPostsStatusReducer(types) {\n  return (state = status.idle, { type }) => {\n    switch (type) {\n      case types.fetch:\n        return status.fetching;\n      case types.fetchError:\n      case types.fetchSuccess:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsCreateStatusReducer(types) {\n  return (state = status.idle, { type }) => {\n    switch (type) {\n      case types.create:\n        return status.creating;\n      case types.createError:\n      case types.createSuccess:\n        return status.idle;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsStoreReducer(types) {\n  return (state = {}, {\n    type, groupId, records, record, oldRecordId, isSendByMe\n  }) => {\n    let newState;\n    let newPosts;\n    let oldPostIndex;\n    switch (type) {\n      case types.fetchSuccess:\n        newState = {\n          ...state,\n        };\n        newState[groupId] = records;\n        return newState;\n      case types.create:\n      case types.createSuccess:\n      case types.createError:\n        newState = {\n          ...state,\n        };\n        newPosts = (newState[groupId] && [...newState[groupId]]) || [];\n        if (oldRecordId) {\n          oldPostIndex = newPosts.findIndex(p => p.id === oldRecordId);\n        }\n        if (oldPostIndex > -1) {\n          newPosts.splice(oldPostIndex, 1, record);\n          newState[groupId] = newPosts;\n        } else if (isSendByMe) {\n          oldPostIndex = newPosts.findIndex(p =>\n            p.creatorId === record.creatorId &&\n            p.text === record.text &&\n            p.sendStatus === status.creating\n          );\n          if (oldPostIndex === -1) {\n            newState[groupId] = [record].concat(newPosts);\n          }\n        } else {\n          newState[groupId] = [record].concat(newPosts);\n        }\n        return newState;\n      case types.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getGlipPostsInputsReducer(types) {\n  return (state = {}, { type, groupId, textValue }) => {\n    let newState;\n    switch (type) {\n      case types.updatePostInput:\n        newState = {\n          ...state,\n        };\n        newState[groupId] = {\n          text: textValue,\n        };\n        return newState;\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getGlipPostsReducer(types, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n    fetchStatus: getGlipPostsStatusReducer(types),\n    glipPostsStore: getGlipPostsStoreReducer(types),\n    createStatus: getGlipPostsCreateStatusReducer(types),\n    postInputs: getGlipPostsInputsReducer(types),\n  });\n}\n"]}