{"version":3,"sources":["modules/subscription/index.js"],"names":["base","reset","platform","symbols","subscription","sdk","createSubscription","ownerId","auth","data","owner_id","cacheKey","localStorage","prefix","cachedSubscription","getItem","setSubscription","JSON","parse","e","setEventFilters","filters","on","events","notification","messageHandler","message","removeSuccess","store","dispatch","type","actions","updateStatus","status","notSubscribed","removeError","renewSuccess","setItem","subscribed","renewError","register","catch","subscribeSuccess","subscribeError","length","init","Subscription","options","oldState","newState","eventTypes","statusChanged","lastMessage","emit","loggedIn","loggedOut","addBeforeLogoutHandler","event","indexOf","newFilters","slice","push","updateFilters","idx","splice","remove","state"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule, { initFunction } from '../../lib/rc-module';\nimport SymbolMap from 'data-types/symbol-map';\nimport subscriptionActions from './subscription-actions';\nimport getSubscriptionReducer from './subscription-reducer';\nimport { subscriptionEvents, subscriptionEventTypes } from './subscription-events';\nimport subscriptionStatus from './subscription-status';\nimport { emit } from '../../lib/utils';\nimport { proxify } from '../proxy';\n\nconst symbols = new SymbolMap([\n  'auth',\n  'sdk',\n  'platform',\n  'subscription',\n]);\n\n/**\n * @function\n * @param {Object} message\n * @description Handles messages delivered by the subscripton\n */\nfunction messageHandler(message) {\n  // dispatch the message in redux manner\n  this.store.dispatch({\n    type: this.actions.notification,\n    message,\n  });\n}\nasync function init() {\n  if (this.base) {\n    await this.reset();\n  }\n  const platform = this[symbols.platform];\n  this[symbols.subscription] = this[symbols.sdk].createSubscription();\n  const ownerId = platform.auth().data().owner_id;\n  let cacheKey = null;\n  if (typeof localStorage !== 'undefined') {\n    cacheKey = `${this.prefix}-sub-${ownerId}`;\n    const cachedSubscription = localStorage.getItem(cacheKey);\n    if (cachedSubscription) {\n      try {\n        this.base.setSubscription(JSON.parse(cachedSubscription));\n      } catch (e) {\n        /* do nothing */\n      }\n    }\n  }\n  this.base.setEventFilters(this.filters);\n  this.base.on(this.base.events.notification, message => {\n    this::messageHandler(message);\n  });\n  this.base.on(this.base.events.removeSuccess, () => {\n    this.store.dispatch({\n      type: this.actions.updateStatus,\n      status: subscriptionStatus.notSubscribed,\n      subscription: null,\n    });\n    // this::emit(subscriptionEventTypes.statusChanged, this.status);\n  });\n  this.base.on(this.base.events.removeError, () => {\n    // TODO\n  });\n  this.base.on(this.base.events.renewSuccess, () => {\n    if (cacheKey) {\n      localStorage.setItem(cacheKey, JSON.stringify(this.base.subscription()));\n    }\n    // const oldStatus = this.status;\n    this.store.dispatch({\n      type: this.actions.updateStatus,\n      status: subscriptionStatus.subscribed,\n      subscription: this.base.subscription(),\n    });\n  });\n  this.base.on(this.base.events.renewError, error => {\n    // TODO handle 429\n    this.store.dispatch({\n      type: this.actions.updateStatus,\n      status: subscriptionStatus.notSubscribed,\n      subscription: null,\n    });\n    this.base.reset().setEventFilters(this.filters).register().catch(e => { });\n  });\n  this.base.on(this.base.events.subscribeSuccess, () => {\n    if (cacheKey) {\n      localStorage.setItem(cacheKey, JSON.stringify(this.base.subscription()));\n    }\n    this.store.dispatch({\n      type: this.actions.updateStatus,\n      status: subscriptionStatus.subscribed,\n      subscription: this.base.subscription(),\n    });\n  });\n  this.base.on(this.base.events.subscribeError, error => {\n    // TODO\n    // handle 429\n    // handle subscription limit\n  });\n\n  if (this.filters.length) {\n    await this.base.register().catch(() => { /* do nothing */ });\n  } else {\n    this.store.dispatch({\n      type: this.actions.updateStatus,\n      status: subscriptionStatus.notSubscribed,\n    });\n  }\n}\n\nexport default class Subscription extends RcModule {\n  constructor(options) {\n    super({\n      ...options,\n      actions: subscriptionActions,\n    });\n\n    const {\n      auth,\n      platform,\n      sdk,\n    } = options;\n    this[symbols.auth] = auth;\n    this[symbols.platform] = platform;\n    this[symbols.sdk] = sdk;\n    this[symbols.subscription] = null;\n\n    // send events based on state change\n    this.on('state-change', ({ oldState, newState }) => {\n      if (!oldState || oldState.status !== newState.status) {\n        this::emit(this.eventTypes.statusChanged, newState.status);\n      }\n      if (newState.lastMessage && (!oldState || newState.lastMessage !== oldState.lastMessage)) {\n        this.emit(this.eventTypes.notification, newState.lastMessage);\n      }\n    });\n  }\n  @initFunction\n  init() {\n    const auth = this[symbols.auth];\n    auth.on(auth.events.loggedIn, () => {\n      this::init();\n    });\n\n    auth.on(auth.events.loggedOut, () => {\n      if (this.base) {\n        this.reset();\n      }\n    });\n\n    auth.addBeforeLogoutHandler(async () => {\n      await this.reset();\n    });\n  }\n\n  get reducer() {\n    return getSubscriptionReducer(this.prefix);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get filters() {\n    return this.state.filters;\n  }\n\n  get base() {\n    return this[symbols.subscription];\n  }\n\n  get events() {\n    return subscriptionEvents;\n  }\n\n  get eventTypes() {\n    return subscriptionEventTypes;\n  }\n\n  @proxify\n  async subscribe(event) {\n    if (this.filters.indexOf(event) === -1) {\n      const newFilters = this.filters.slice();\n      newFilters.push(event);\n      this.store.dispatch({\n        type: this.actions.updateFilters,\n        filters: newFilters,\n      });\n      if (this.base) {\n        this.base.setEventFilters(newFilters);\n        await this.base.register().catch(() => { /* do nothing */ });\n      }\n    }\n  }\n\n  @proxify\n  async unsubscribe(event) {\n    const idx = this.filters.indexOf(event);\n    if (this.filters.indexOf(event) > -1) {\n      const newFilters = this.filters.slice();\n      newFilters.splice(idx, 1);\n      this.store.dispatch({\n        type: this.actions.updateFilters,\n        filters: newFilters,\n      });\n      if (this.base) {\n        this.base.setEventFilters(newFilters);\n        if (newFilters.length) {\n          this.base.register().catch(() => { /* do nothing */ });\n        } else {\n          this.base.remove();\n        }\n      }\n    }\n  }\n\n  @proxify\n  async reset() {\n    try {\n      if (this.base) {\n        if (this.status === subscriptionStatus.subscribed) {\n          await this.base.remove();\n        } else {\n          await this.base.reset();\n        }\n      }\n    } catch (e) {\n      // TODO\n    }\n    this[symbols.subscription] = null;\n    this.store.dispatch({\n      type: this.actions.reset,\n    });\n  }\n}\n"]}