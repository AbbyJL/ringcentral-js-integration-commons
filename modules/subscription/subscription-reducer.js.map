{"version":3,"sources":["modules/subscription/subscription-reducer.js"],"names":["getSubscriptionReducer","initialState","cacheKey","filters","status","pending","lastMessage","prefix","actions","state","action","type","updateStatus","subscription","updateFilters","slice","notification","message","reset","notSubscribed"],"mappings":";;;;;;;;;;kBAWwBA,sB;;AAXxB;;AACA;;;;AACA;;;;;;AAEA,IAAMC,eAAe;AACnBC,YAAU,IADS;AAEnBC,WAAS,EAFU;AAGnBC,UAAQ,6BAAmBC,OAHR;AAInBC,eAAa;AAJM,CAArB;;AAOe,SAASN,sBAAT,CAAgCO,MAAhC,EAAwC;AACrD,MAAMC,UAAU,+DAAmCD,MAAnC,CAAhB;AACA,SAAO,UAACE,KAAD,EAAQC,MAAR,EAAmB;AACxB,QAAI,OAAOD,KAAP,KAAiB,WAArB,EAAkC,OAAO,sBAAc,EAAd,EAAkBR,YAAlB,CAAP;AAClC,QAAI,CAACS,MAAL,EAAa,OAAOD,KAAP;AACb,YAAQC,OAAOC,IAAf;AACE,WAAKH,QAAQI,YAAb;AACE,eAAO,sBACL,EADK,EAELH,KAFK,EAGL;AACEL,kBAAQM,OAAON,MADjB;AAEES,wBAAcL,QAAQK;AAFxB,SAHK,CAAP;;AASF,WAAKL,QAAQM,aAAb;AACE,eAAO,sBACL,EADK,EAELL,KAFK,EAGL;AACEN,mBAASO,OAAOP,OAAP,CAAeY,KAAf;AADX,SAHK,CAAP;;AAQF,WAAKP,QAAQQ,YAAb;AACE,eAAO,sBACL,EADK,EAELP,KAFK,EAGL;AACEH,uBAAaI,OAAOO;AADtB,SAHK,CAAP;;AAQF,WAAKT,QAAQU,KAAb;AACE,eAAO,sBACL,EADK,EAELT,KAFK,EAGL;AACEH,uBAAa,IADf;AAEEU,wBAAc,IAFhB;AAGEZ,kBAAQ,6BAAmBe;AAH7B,SAHK,CAAP;;AAUF;AACE,eAAOV,KAAP;AAzCJ;AA2CD,GA9CD;AA+CD","file":"subscription-reducer.js","sourcesContent":["import { prefixActions } from '../../lib/redux-helper';\nimport subscriptionActions from './subscription-actions';\nimport subscriptionStatus from './subscription-status';\n\nconst initialState = {\n  cacheKey: null,\n  filters: [],\n  status: subscriptionStatus.pending,\n  lastMessage: null,\n};\n\nexport default function getSubscriptionReducer(prefix) {\n  const actions = prefixActions(subscriptionActions, prefix);\n  return (state, action) => {\n    if (typeof state === 'undefined') return Object.assign({}, initialState);\n    if (!action) return state;\n    switch (action.type) {\n      case actions.updateStatus:\n        return Object.assign(\n          {},\n          state,\n          {\n            status: action.status,\n            subscription: actions.subscription,\n          },\n        );\n\n      case actions.updateFilters:\n        return Object.assign(\n          {},\n          state,\n          {\n            filters: action.filters.slice(),\n          },\n        );\n\n      case actions.notification:\n        return Object.assign(\n          {},\n          state,\n          {\n            lastMessage: action.message,\n          },\n        );\n\n      case actions.reset:\n        return Object.assign(\n          {},\n          state,\n          {\n            lastMessage: null,\n            notification: null,\n            status: subscriptionStatus.notSubscribed,\n          },\n        );\n\n      default:\n        return state;\n    }\n  };\n}\n"]}