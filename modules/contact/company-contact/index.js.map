{"version":3,"sources":["modules/contact/company-contact/index.js"],"names":["symbols"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,UAAU,wBAAc,CAC5B,KAD4B,EAE5B,UAF4B,EAG5B,UAH4B,CAAd,CAAhB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"index.js","sourcesContent":["import RcModule from '../../../lib/RcModule';\nimport SymbolMap from 'data-types/symbol-map';\nimport KeyValueMap from 'data-types/key-value-map';\nimport reducer from './company-contact-reducer';\nimport actions from './company-contact-actions';\n\nimport fetchList from '../../../lib/fetchList';\n\nconst symbols = new SymbolMap([\n  'api',\n  'platform',\n  'settings',\n]);\n// TODO refactor\n// /**\n//  * @class\n//  * @description Contact module\n//  */\n// export default class CompanyContact extends RcModule {\n//   /**\n//    * @function\n//    */\n//   constructor(options) {\n//     super({\n//       ...options,\n//       actions,\n//     });\n//     const {\n//       api,\n//       platform,\n//       settings,\n//     } = options;\n//     this[symbols.api] = api;\n//     this[symbols.platform] = platform;\n//     this[symbols.settings] = settings;\n\n//     platform.on(platform.events.loginSuccess, () => {\n//       this.loadCompanyContact();\n//     });\n\n//     (async () => {\n//       if (await platform.loggedIn()) {\n//         await this.loadCompanyContact();\n//       }\n//     })();\n//   }\n\n//   async loadCompanyContact({\n//     userOptions = {},\n//     perPage = 'max',\n//   } = {}) {\n//     this.store.dispatch({\n//       type: this.actions.loadCompanyContact,\n//     });\n//     try {\n//       const contacts = extractData(await this::fetchList(options => (\n//         this[symbols.api].account().extension().list({\n//           ...options,\n//           ...userOptions,\n//           perPage,\n//         })\n//       )));\n//       this.store.dispatch({\n//         type: this.actions.loadCompanyContactSuccess,\n//         payload: contacts,\n//       });\n//     } catch (error) {\n//       this.store.dispatch({\n//         type: this.actions.loadCompanyContactFailed,\n//         error,\n//       });\n//     }\n//   }\n\n//   get reducer() {\n//     return reducer(this.prefix);\n//   }\n// }\n"]}