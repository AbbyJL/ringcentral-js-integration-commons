{"version":3,"sources":["modules/contact/company-contact/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA,IAAM,UAAU,wBAAc,CAC5B,KAD4B,EAE5B,UAF4B,EAG5B,UAH4B,CAAd,CAAhB;;AAMA;;;;;IAIqB,c;;;AACnB;;;AAGA,0BAAY,OAAZ,EAAqB;AAAA;;AAAA;;AAAA,mJAEd,OAFc;AAGjB;AAHiB;;AAAA,QAMjB,GANiB,GASf,OATe,CAMjB,GANiB;AAAA,QAOjB,QAPiB,GASf,OATe,CAOjB,QAPiB;AAAA,QAQjB,QARiB,GASf,OATe,CAQjB,QARiB;;AAUnB,UAAK,QAAQ,GAAb,IAAoB,GAApB;AACA,UAAK,QAAQ,QAAb,IAAyB,QAAzB;AACA,UAAK,QAAQ,QAAb,IAAyB,QAAzB;;AAEA,aAAS,EAAT,CAAY,SAAS,MAAT,CAAgB,YAA5B,EAA0C,YAAM;AAC9C,YAAK,kBAAL;AACD,KAFD;;AAIA,+DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACW,SAAS,QAAT,EADX;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAES,MAAK,kBAAL,EAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAlBmB;AAuBpB;;;;;;;;0EAKG,E;;sCAFF,W;YAAA,W,qCAAc,E;kCACd,O;YAAA,O,iCAAU,K;;;;;;AAEV,qBAAK,KAAL,CAAW,QAAX,CAAoB;AAClB,wBAAM,KAAK,OAAL,CAAa;AADD,iBAApB;;;uBAIqC,4BAAgB;AAAA,yBACjD,OAAK,QAAQ,GAAb,EAAkB,OAAlB,GAA4B,SAA5B,GAAwC,IAAxC,4BACK,OADL,EAEK,WAFL;AAGE;AAHF,qBADiD;AAAA,iBAAhB,C;;;;AAA7B,wB;;AAON,qBAAK,KAAL,CAAW,QAAX,CAAoB;AAClB,wBAAM,KAAK,OAAL,CAAa,yBADD;AAElB,2BAAS;AAFS,iBAApB;;;;;;;;AAKA,qBAAK,KAAL,CAAW,QAAX,CAAoB;AAClB,wBAAM,KAAK,OAAL,CAAa,qBADD;AAElB;AAFkB,iBAApB;;;;;;;;;;;;;;;;;;wBAOU;AACZ,aAAO,qCAAQ,KAAK,MAAb,CAAP;AACD;;;;;kBA1DkB,c","file":"index.js","sourcesContent":["import RcModule from '../../../lib/rc-module';\nimport SymbolMap from 'data-types/symbol-map';\nimport KeyValueMap from 'data-types/key-value-map';\nimport reducer from './company-contact-reducer';\nimport actions from './company-contact-actions';\n\nimport { fetchList, extractData } from '../../../lib/utils';\n\nconst symbols = new SymbolMap([\n  'api',\n  'platform',\n  'settings',\n]);\n\n/**\n * @class\n * @description Contact module\n */\nexport default class CompanyContact extends RcModule {\n  /**\n   * @function\n   */\n  constructor(options) {\n    super({\n      ...options,\n      actions,\n    });\n    const {\n      api,\n      platform,\n      settings,\n    } = options;\n    this[symbols.api] = api;\n    this[symbols.platform] = platform;\n    this[symbols.settings] = settings;\n\n    platform.on(platform.events.loginSuccess, () => {\n      this.loadCompanyContact();\n    });\n\n    (async () => {\n      if (await platform.loggedIn()) {\n        await this.loadCompanyContact();\n      }\n    })();\n  }\n\n  async loadCompanyContact({\n    userOptions = {},\n    perPage = 'max',\n  } = {}) {\n    this.store.dispatch({\n      type: this.actions.loadCompanyContact,\n    });\n    try {\n      const contacts = extractData(await this::fetchList(options => (\n        this[symbols.api].account().extension().list({\n          ...options,\n          ...userOptions,\n          perPage,\n        })\n      )));\n      this.store.dispatch({\n        type: this.actions.loadCompanyContactSuccess,\n        payload: contacts,\n      });\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actions.loadAddressBookFailed,\n        error,\n      });\n    }\n  }\n\n  get reducer() {\n    return reducer(this.prefix);\n  }\n}\n"]}