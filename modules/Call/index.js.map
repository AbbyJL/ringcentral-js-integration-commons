{"version":3,"sources":["modules/Call/index.js"],"names":["Call","deps","provide","optional","alert","storage","callingSettings","softphone","ringout","webphone","numberValidate","regionSettings","options","actionTypes","_alert","_storage","_storageKey","_reducer","_callingSettings","_ringout","_softphone","_webphone","_numberValidate","_regionSettings","_callSettingMode","registerReducer","key","reducer","lastPhoneNumber","lastRecipient","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_initCallModule","initSuccess","_shouldReset","_resetCallModule","ready","_processCall","pending","callingMode","connect","resetSuccess","disconnect","oldCallSettingMode","value","toNumberChanged","data","entityId","startTime","isIdle","toNumberMatched","cleanToNumberEntities","phoneNumber","recipient","toNumber","extension","trim","length","warning","message","noToNumber","callSettingMode","_getValidatedNumbers","validatedNumbers","_makeCall","connectSuccess","connectError","firstLegConnectFailed","connectFailed","payload","danger","networkError","internalError","isWebphone","fromNumber","myLocation","waitingValidateNumbers","push","validateNumbers","validatedResult","result","errors","forEach","error","parsedNumbers","numbers","parsedFromNumber","e164","subAddress","join","homeCountry","availableCountries","find","country","isoCode","countryCode","homeCountryId","callingCode","makeCall","prompt","ringoutPrompt","state","status","callStatus","idle","getItem","toNumberEntities"],"mappings":"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","file":"index.js","sourcesContent":["import { combineReducers } from 'redux';\nimport RcModule from '../../lib/RcModule';\nimport { Module } from '../../lib/di';\nimport callingModes from '../CallingSettings/callingModes';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport proxify from '../../lib/proxy/proxify';\nimport callActionTypes from './actionTypes';\nimport getCallReducer, {\n  getLastPhoneNumberReducer,\n  getLastRecipientReducer,\n} from './getCallReducer';\n\nimport callStatus from './callStatus';\nimport callErrors from './callErrors';\nimport ringoutErrors from '../Ringout/ringoutErrors';\n\n/**\n * @class\n * @description Call managing module\n */\n@Module({\n  deps: [\n    'Alert',\n    'Storage',\n    'Softphone',\n    'Ringout',\n    'Webphone',\n    'NumberValidate',\n    'RegionSettings',\n    'CallingSettings',\n    { provide: 'CallOptions', optional: true }\n  ]\n})\nexport default class Call extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Alert} params.alert - alert module instance\n   * @param {Client} params.client - client module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {CallingSettings} params.callingSettings - callingSettings module instance\n   * @param {Softphone} params.softphone - softphone module instance\n   * @param {Ringout} params.ringout - ringout module instance\n   * @param {Webphone} params.webphone - webphone module instance\n   * @param {NumberValidate} params.numberValidate - numberValidate module instance\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   */\n  constructor({\n    alert,\n    storage,\n    callingSettings,\n    softphone,\n    ringout,\n    webphone,\n    numberValidate,\n    regionSettings,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: callActionTypes,\n    });\n\n    this._alert = alert;\n    this._storage = storage;\n    this._storageKey = 'callData';\n    this._reducer = getCallReducer(this.actionTypes);\n    this._callingSettings = callingSettings;\n    this._ringout = ringout;\n    this._softphone = softphone;\n    this._webphone = webphone;\n    this._numberValidate = numberValidate;\n    this._regionSettings = regionSettings;\n    this._callSettingMode = null;\n\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: combineReducers({\n        lastPhoneNumber: getLastPhoneNumberReducer(this.actionTypes),\n        lastRecipient: getLastRecipientReducer(this.actionTypes),\n      }),\n    });\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      await this._initCallModule();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetCallModule();\n    } else if (this.ready) {\n      await this._processCall();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._numberValidate.ready &&\n      this._callingSettings.ready &&\n      this._storage.ready &&\n      this._regionSettings.ready &&\n      (!this._webphone || this._webphone.ready) &&\n      this._ringout.ready &&\n      this._softphone.ready &&\n      this.pending\n    );\n  }\n  _shouldReset() {\n    return (\n      (\n        !this._numberValidate.ready ||\n        !this._callingSettings.ready ||\n        !this._regionSettings.ready ||\n        (!!this._webphone && !this._webphone.ready) ||\n        !this._ringout.ready ||\n        !this._softphone.ready ||\n        !this._storage.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  async _initCallModule() {\n    this._callSettingMode = this._callingSettings.callingMode;\n    if (this._callSettingMode === callingModes.webphone && this._webphone) {\n      await this._webphone.connect();\n    }\n  }\n\n  _resetCallModule() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n    this._callSettingMode = this._callingSettings.callingMode;\n    if (this._callSettingMode === callingModes.webphone && this._webphone) {\n      this._webphone.disconnect();\n    }\n  }\n  async _processCall() {\n    const oldCallSettingMode = this._callSettingMode;\n    if (this._callingSettings.callingMode !== oldCallSettingMode && this._webphone) {\n      this._callSettingMode = this._callingSettings.callingMode;\n      if (oldCallSettingMode === callingModes.webphone) {\n        this._webphone.disconnect();\n      } else if (this._callSettingMode === callingModes.webphone) {\n        await this._webphone.connect();\n      }\n    }\n  }\n  @proxify\n  async onToNumberChange(value) {\n    this.store.dispatch({\n      type: this.actionTypes.toNumberChanged,\n      data: value,\n    });\n  }\n\n  // save the click to dial entity, only when call took place\n  onToNumberMatch({ entityId, startTime }) {\n    if (this.isIdle) {\n      this.store.dispatch({\n        type: this.actionTypes.toNumberMatched,\n        data: { entityId, startTime },\n      });\n    }\n  }\n\n  cleanToNumberEntities() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanToNumberEntities,\n    });\n  }\n\n  @proxify\n  async call({ phoneNumber, recipient }) {\n    if (this.isIdle) {\n      const toNumber = recipient && (recipient.phoneNumber || recipient.extension) || phoneNumber;\n      if (!toNumber || `${toNumber}`.trim().length === 0) {\n        this._alert.warning({\n          message: callErrors.noToNumber,\n        });\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.connect,\n          phoneNumber,\n          recipient,\n          callSettingMode: this._callSettingMode // for Track\n        });\n        try {\n          const validatedNumbers = await this._getValidatedNumbers({ toNumber });\n          if (validatedNumbers) {\n            await this._makeCall(validatedNumbers);\n            this.store.dispatch({\n              type: this.actionTypes.connectSuccess,\n              callSettingMode: this._callSettingMode // for Track\n            });\n          } else {\n            this.store.dispatch({\n              type: this.actionTypes.connectError\n            });\n          }\n        } catch (error) {\n          if (error.message === ringoutErrors.firstLegConnectFailed) {\n            this._alert.warning({\n              message: callErrors.connectFailed,\n              payload: error\n            });\n          } else if (error.message === 'Failed to fetch') {\n            this._alert.danger({\n              message: callErrors.networkError,\n              payload: error,\n            });\n          } else if (error.message !== 'Refresh token has expired') {\n            this._alert.danger({\n              message: callErrors.internalError,\n              payload: error,\n            });\n          }\n          this.store.dispatch({\n            type: this.actionTypes.connectError\n          });\n          throw error;\n        }\n      }\n    }\n  }\n\n  @proxify\n  async _getValidatedNumbers({ toNumber }) {\n    const isWebphone = (this._callingSettings.callingMode === callingModes.webphone);\n    const fromNumber = isWebphone ?\n      this._callingSettings.fromNumber :\n      this._callingSettings.myLocation;\n    if (isWebphone && (fromNumber === null || fromNumber === '')) return null;\n\n    const waitingValidateNumbers = [toNumber];\n    if (\n      fromNumber &&\n      fromNumber.length > 0 &&\n      !(isWebphone && fromNumber === 'anonymous')\n    ) {\n      waitingValidateNumbers.push(fromNumber);\n    }\n    const validatedResult\n      = await this._numberValidate.validateNumbers(waitingValidateNumbers);\n    if (!validatedResult.result) {\n      validatedResult.errors.forEach((error) => {\n        this._alert.warning({\n          message: callErrors[error.type],\n          payload: {\n            phoneNumber: error.phoneNumber\n          }\n        });\n      });\n      return null;\n    }\n    const parsedNumbers = validatedResult.numbers;\n    // using e164 in response to call\n    let parsedFromNumber =\n      parsedNumbers[1] ? parsedNumbers[1].e164 : '';\n    // add ext back if any\n    if (parsedFromNumber !== '') {\n      parsedFromNumber = (parsedNumbers[1].subAddress) ?\n        [parsedNumbers[1].e164, parsedNumbers[1].subAddress].join('*') :\n        parsedNumbers[1].e164;\n    }\n    if (isWebphone && fromNumber === 'anonymous') {\n      parsedFromNumber = 'anonymous';\n    }\n    return {\n      toNumber: parsedNumbers[0].e164,\n      fromNumber: parsedFromNumber,\n    };\n  }\n  @proxify\n  async _makeCall({\n    toNumber,\n    fromNumber,\n    callingMode = this._callingSettings.callingMode,\n  }) {\n    const homeCountry = this._regionSettings.availableCountries.find(\n      country => country.isoCode === this._regionSettings.countryCode\n    );\n    const homeCountryId = (homeCountry && homeCountry.callingCode) || '1';\n    switch (callingMode) {\n      case callingModes.softphone:\n        this._softphone.makeCall(toNumber);\n        break;\n      case callingModes.ringout:\n        await this._ringout.makeCall({\n          fromNumber,\n          toNumber,\n          prompt: this._callingSettings.ringoutPrompt,\n        });\n        break;\n      case callingModes.webphone:\n        if (this._webphone) {\n          await this._webphone.makeCall({\n            fromNumber,\n            toNumber,\n            homeCountryId,\n          });\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n\n  get status() {\n    return this.state.status;\n  }\n\n  get callStatus() {\n    return this.state.callStatus;\n  }\n\n  get isIdle() {\n    return this.state.callStatus === callStatus.idle;\n  }\n\n  get lastPhoneNumber() {\n    return this._storage.getItem(this._storageKey).lastPhoneNumber;\n  }\n  get lastRecipient() {\n    return this._storage.getItem(this._storageKey).lastRecipient;\n  }\n\n  get toNumber() {\n    return this.state.toNumber;\n  }\n\n  get toNumberEntities() {\n    return this.state.toNumberEntities;\n  }\n}\n"]}