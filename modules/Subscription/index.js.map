{"version":3,"sources":["modules/Subscription/index.js"],"names":["symbols","keys","storage","Subscription","auth","api","options","actions","subscription","on","oldState","newState","status","emit","statusChange","oldStatus","newStatus","lastMessage","notification","pending","ready","storageEvents","base","reset","createSubscription","cachedSubscription","getItem","setSubscription","events","store","dispatch","type","message","removeSuccess","removeItem","removeError","disptach","error","renewSuccess","setItem","renewError","setEventFilters","filters","register","catch","subscribeSuccess","subscribeError","authEvents","loggedOut","addBeforeLogoutHandler","Error","newFilters","concat","length","setFilters","remove","subscribed","prefix","state"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule, { initFunction } from '../../lib/RcModule';\nimport SymbolMap from 'data-types/symbol-map';\nimport KeyValueMap from 'data-types/key-value-map';\nimport subscriptionActions from './subscriptionActions';\nimport getSubscriptionReducer from './getSubscriptionReducer';\nimport subscriptionEvents from './subscriptionEvents';\nimport subscriptionStatus from './subscriptionStatus';\nimport { proxify } from '../../lib/proxy';\n\nconst symbols = new SymbolMap([\n  'auth',\n  'api',\n  'storage',\n  'subscription',\n]);\n\nconst keys = new KeyValueMap({\n  storage: 'subscription-cache',\n});\n\nexport default class Subscription extends RcModule {\n  constructor({\n    auth,\n    api,\n    storage,\n    ...options,\n  }) {\n    super({\n      ...options,\n      actions: subscriptionActions,\n    });\n\n    this[symbols.auth] = auth;\n    this[symbols.api] = api;\n    this[symbols.storage] = storage;\n    this[symbols.subscription] = null;\n\n    // send events based on state change\n    this.on('state-change', ({ oldState, newState }) => {\n      if (oldState) {\n        if (oldState.status !== newState.status) {\n          this.emit(\n            subscriptionEvents.statusChange,\n            {\n              oldStatus: oldState.status,\n              newStatus: newState.status,\n            },\n          );\n          this.emit(newState.status);\n        }\n        if (newState.lastMessage && oldState.lastMessage !== newState.lastMessage) {\n          this.emit(subscriptionEvents.notification, newState.lastMessage);\n        }\n        if (\n          oldState.status === subscriptionStatus.pending &&\n          oldState.status !== newState.status\n        ) {\n          this.emit(subscriptionEvents.ready);\n        }\n      }\n    });\n  }\n  @initFunction\n  init() {\n    const storage = this[symbols.storage];\n    storage.on(storage.storageEvents.ready, async () => {\n      if (this.base) {\n        await this.reset();\n      }\n      this[symbols.subscription] = this[symbols.api].createSubscription();\n      // cached subscription\n      const cachedSubscription = storage.getItem(keys.storage);\n      if (cachedSubscription) {\n        this.base.setSubscription(cachedSubscription);\n      }\n      this.base.on(this.base.events.notification, message => {\n        this.store.dispatch({\n          type: this.actions.notification,\n          message,\n        });\n      });\n      this.base.on(this.base.events.removeSuccess, async () => {\n        this.base.reset();\n        await storage.removeItem(keys.storage);\n        this.store.dispatch({\n          type: this.actions.removeSuccess,\n        });\n      });\n      this.base.on(this.base.events.removeError, error => {\n        this.store.disptach({\n          type: this.actions.removeError,\n          error,\n        });\n      });\n      this.base.on(this.base.events.renewSuccess, async () => {\n        await storage.setItem(keys.storage, this.base.subscription());\n        this.store.dispatch({\n          type: this.actions.renewSuccess,\n        });\n      });\n      this.base.on(this.base.events.renewError, async error => {\n        storage.removeItem(keys.storage);\n        this.store.dispatch({\n          type: this.actions.renewError,\n          error,\n        });\n        this.base.reset().setEventFilters(this.filters).register().catch(e => { });\n      });\n      this.base.on(this.base.events.subscribeSuccess, async () => {\n        await storage.setItem(keys.storage, this.base.subscription());\n        this.store.dispatch({\n          type: this.actions.subscribeSuccess,\n        });\n      });\n      this.base.on(this.base.events.subscribeError, async error => {\n        await storage.removeItem(keys.storage);\n        this.store.dispatch({\n          type: this.actions.subscribeError,\n          error,\n        });\n      });\n      this.store.dispatch({\n        type: this.actions.ready,\n      });\n    });\n\n    this[symbols.auth].on(this[symbols.auth].authEvents.loggedOut, async () => {\n      await this.reset();\n    });\n\n    this[symbols.auth].addBeforeLogoutHandler(async () => {\n      await this.reset();\n    });\n  }\n\n  get reducer() {\n    return getSubscriptionReducer(this.prefix);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get filters() {\n    return this.state.filters;\n  }\n\n  get base() {\n    return this[symbols.subscription];\n  }\n\n  get subscriptionEvents() {\n    return subscriptionEvents;\n  }\n  static get subscriptionEvents() {\n    return subscriptionEvents;\n  }\n  get subscriptionStatus() {\n    return subscriptionStatus;\n  }\n  static get subscriptionStatus() {\n    return subscriptionStatus;\n  }\n\n  @proxify\n  async subscribe(events) {\n    if (this.status === subscriptionStatus.pending) {\n      throw new Error('Called before module is ready');\n    }\n    const newFilters = [...(new Set([...this.filters].concat(events)))];\n    if (newFilters.length !== this.filters.length) {\n      this.store.dispatch({\n        type: this.actions.setFilters,\n        filters: newFilters,\n      });\n      this.base.setEventFilters(newFilters);\n      await this.base.register();\n    }\n  }\n\n  @proxify\n  async unsubscribe(events) {\n    if (this.status === subscriptionStatus.pending) {\n      throw new Error('Called before module is ready');\n    }\n    const newFilters = [...(new Set([...this.filters]).remove([].concat(events)))];\n    if (newFilters.length !== this.filters.length) {\n      this.store.dispatch({\n        type: this.actions.setFilters,\n        filters: newFilters,\n      });\n      this.base.setEventFilters(newFilters);\n      if (newFilters.length > 0) {\n        await this.base.register();\n      } else {\n        await this.base.remove();\n      }\n    }\n  }\n\n  @proxify\n  async reset() {\n    if (this.base) {\n      try {\n        if (this.status === subscriptionStatus.subscribed) {\n          await this.base.remove();\n        } else {\n          await this.base.reset();\n        }\n      } catch (e) {\n        // TODO\n      }\n      this[symbols.subscription] = null;\n      this.store.dispatch({\n        type: this.actions.reset,\n      });\n    }\n  }\n}\n"]}