{"version":3,"sources":["modules/extension-phone-number/index.js"],"names":["keys","storage","DEFAULT_TTL","symbols","ExtensionPhoneNumber","options","actions","api","auth","ttl","on","oldState","newState","status","emit","statusChange","oldStatus","newStatus","error","storageEvents","dataChange","oldData","newData","phoneNumbers","map","p","id","sort","join","extensionPhoneNumberChange","extensionPhoneNumbers","ready","loadExtensionPhoneNumbers","store","dispatch","type","pending","reset","force","data","getItem","Date","now","timestamp","fetch","account","extension","phoneNumber","list","params","setItem","fetchSuccess","fetchError","usageTypes","types","Array","isArray","t","toLowerCase","filter","indexOf","usageType","prefix","state","find","features"],"mappings":"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","file":"index.js","sourcesContent":["import SymbolMap from 'data-types/symbol-map';\nimport KeyValueMap from 'data-types/key-value-map';\nimport RcModule, { initFunction } from '../../lib/rc-module';\nimport { proxify } from '../proxy';\nimport fetchList from '../../lib/fetch-list';\nimport extensionPhoneNumberStatus from './extension-phone-number-status';\nimport extensionPhoneNumberActions from './extension-phone-number-actions';\nimport getExtensionPhoneNumberReducer from './get-extension-phone-number-reducer';\nimport extensionPhoneNumberEvents from './extension-phone-number-events';\n\nconst keys = new KeyValueMap({\n  storage: 'extension-phone-number-data',\n});\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\n\nconst symbols = new SymbolMap([\n  'api',\n  'auth',\n  'storage',\n  'ttl',\n]);\n\nexport default class ExtensionPhoneNumber extends RcModule {\n  constructor(options = {}) {\n    super({\n      ...options,\n      actions: extensionPhoneNumberActions,\n    });\n    const {\n      api,\n      auth,\n      storage,\n      ttl = DEFAULT_TTL,\n    } = options;\n    this[symbols.api] = api;\n    this[symbols.auth] = auth;\n    this[symbols.storage] = storage;\n    this[symbols.ttl] = ttl;\n\n    this.on('state-change', ({ oldState, newState }) => {\n      if (oldState) {\n        if (oldState.status !== newState.status) {\n          this.emit(extensionPhoneNumberEvents.statusChange, {\n            oldStatus: oldState.status,\n            newStatus: newState.status,\n          });\n        }\n        if (newState.error && newState.error !== oldState.error) {\n          this.emit(extensionPhoneNumberEvents.error, newState.error);\n        }\n      }\n    });\n    this[symbols.storage].on(\n      this[symbols.storage].storageEvents.dataChange,\n      ({ oldData, newData }) => {\n        if (!oldData[keys.storage] && !newData[keys.storage]) return;\n        if (\n          oldData[keys.storage] && !newData[keys.storage] ||\n          !oldData[keys.storage] && newData[keys.storage] ||\n          oldData[keys.storage] !== newData[keys.storage] &&\n          oldData[keys.storage].phoneNumbers.map(p => p.id).sort().join(',') !==\n          newData[keys.storage].phoneNumbers.map(p => p.id).sort().join(',')\n        ) {\n          this.emit(\n            extensionPhoneNumberEvents.extensionPhoneNumberChange,\n            newData[keys.storage].extensionPhoneNumbers,\n          );\n        }\n      },\n    );\n  }\n\n  @initFunction\n  init() {\n    this[symbols.storage].on(this[symbols.storage].storageEvents.ready, async () => {\n      await this.loadExtensionPhoneNumbers();\n      this.store.dispatch({\n        type: this.actions.ready,\n      });\n    });\n    this[symbols.storage].on(this[symbols.storage].storageEvents.pending, () => {\n      this.store.dispatch({\n        type: this.actions.reset,\n      });\n    });\n  }\n  get data() {\n    return this[symbols.storage].getItem(keys.storage);\n  }\n  @proxify\n  async loadExtensionPhoneNumbers(options = {}) {\n    const {\n      force = false,\n    } = options;\n    let data = this[symbols.storage].getItem(keys.storage);\n    if (force || !data || Date.now() - data.timestamp > this[symbols.ttl]) {\n      try {\n        this.store.dispatch({\n          type: this.actions.fetch,\n        });\n        data = {\n          phoneNumbers: await fetchList(params => (\n            this[symbols.api].account().extension().phoneNumber().list(params)\n          )),\n          timestamp: Date.now(),\n        };\n        this[symbols.storage].setItem(keys.storage, data);\n        this.store.dispatch({\n          type: this.actions.fetchSuccess,\n        });\n      } catch (error) {\n        this.store.dispatch({\n          type: this.actions.fetchError,\n          error,\n        });\n        throw error;\n      }\n    }\n    return data;\n  }\n  get reducer() {\n    return getExtensionPhoneNumberReducer(this.prefix);\n  }\n\n  get extensionPhoneNumberStatus() {\n    return extensionPhoneNumberStatus;\n  }\n\n  static get extensionPhoneNumberStatus() {\n    return extensionPhoneNumberStatus;\n  }\n\n  get extensionPhoneNumberEvents() {\n    return extensionPhoneNumberEvents;\n  }\n\n  static get extensionPhoneNumberEvents() {\n    return extensionPhoneNumberEvents;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get phoneNumbers() {\n    return this.data.phoneNumbers;\n  }\n\n  get directNumbers() {\n    return this.phoneNumbers.filter(p => p.usageType === 'DirectNumber');\n  }\n\n  get companyNumbers() {\n    return this.phoneNumbers.filter(p => p.usageType === 'CompanyNumber');\n  }\n\n  get companyFaxNumbers() {\n    return this.phoneNumbers.filter(p => p.usageType === 'CompanyFaxNumber');\n  }\n\n  get mainCompanyNumber() {\n    return this.phoneNumbers.find(p => p.usageType === 'MainCompanyNumber');\n  }\n\n  get smsNumbers() {\n    return this.phoneNumbers.filter(p => p.features.indexOf('SmsSender') > -1);\n  }\n\n  // get callerIds() {\n  //   return this.phoneNumbers.filter(p => p.features.indexOf('CallerId') > -1);\n  // }\n\n  filter(usageTypes) {\n    if (!usageTypes) return this.phoneNumbers;\n    let types = usageTypes;\n    if (!Array.isArray(types)) {\n      types = [types];\n    }\n    types = types.map(t => t.toLowerCase());\n    return this.phoneNumber.filter(p => types.indexOf(p.usageType.toLowerCase()) > -1);\n  }\n}\n"]}