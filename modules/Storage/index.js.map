{"version":3,"sources":["modules/Storage/index.js"],"names":["StorageAlt","auth","StorageProvider","options","actionTypes","_auth","_StorageProvider","_reducers","_reducer","types","reducers","storedData","store","subscribe","loginStatus","loggedIn","ready","storageKey","prefix","ownerId","_storage","getData","key","removeItem","dispatch","type","init","data","_storageHandler","value","sync","on","notLoggedIn","reset","off","destroy","resetSuccess","status","pending","currentData","setItem","reducer","_initialized","Error","state"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;;;AAGA;;;;;IAKqBA,U;;;AACnB,4BAIG;AAAA,QAHDC,IAGC,QAHDA,IAGC;AAAA,oCAFDC,eAEC;AAAA,QAFDA,eAEC;AAAA,QADEC,OACF;AAAA;;AAAA,yKAEIA,OAFJ;AAGCC;AAHD;;AAKD,UAAKC,KAAL,GAAaJ,IAAb;AACA,UAAKK,gBAAL,GAAwBJ,eAAxB;AACA,UAAKK,SAAL,GAAiB,EAAjB;AACA,UAAKC,QAAL,GAAgB,iCAAkB,EAAEC,OAAO,MAAKL,WAAd,EAA2BM,UAAU,MAAKH,SAA1C,EAAlB,CAAhB;AARC;AASF;;;;iCACY;AAAA;;AACX,UAAII,aAAa,IAAjB;AACA,WAAKC,KAAL,CAAWC,SAAX,CAAqB,YAAM;AACzB,YACE,OAAKR,KAAL,CAAWS,WAAX,KAA2B,sBAAYC,QAAvC,IACA,CAAC,OAAKC,KAFR,EAGE;AACA,cAAMC,cACD,OAAKC,MAAL,GAAiB,OAAKA,MAAtB,SAAkC,EADjC,iBAC8C,OAAKb,KAAL,CAAWc,OAD/D;AAEA,iBAAKC,QAAL,GAAgB,IAAI,OAAKd,gBAAT,CAA0B;AACxCW;AADwC,WAA1B,CAAhB;AAGAN,uBAAa,OAAKS,QAAL,CAAcC,OAAd,EAAb;AACA,eAAK,IAAMC,GAAX,IAAkBX,UAAlB,EAA8B;AAC5B,gBAAI,CAAC,OAAKJ,SAAL,CAAee,GAAf,CAAL,EAA0B;AACxB,qBAAOX,WAAWW,GAAX,CAAP;AACA,qBAAKF,QAAL,CAAcG,UAAd,CAAyBD,GAAzB;AACD;AACF;AACD,iBAAKV,KAAL,CAAWY,QAAX,CAAoB;AAClBC,kBAAM,OAAKrB,WAAL,CAAiBsB,IADL;AAElBT,kCAFkB;AAGlBU,kBAAMhB;AAHY,WAApB;AAKA,iBAAKiB,eAAL,GAAuB,iBAAoB;AAAA,gBAAjBN,GAAiB,SAAjBA,GAAiB;AAAA,gBAAZO,KAAY,SAAZA,KAAY;;AACzC,gBAAI,OAAKb,KAAT,EAAgB;AACdL,yBAAWW,GAAX,IAAkBO,KAAlB;AACA,qBAAKjB,KAAL,CAAWY,QAAX,CAAoB;AAClBC,sBAAM,OAAKrB,WAAL,CAAiB0B,IADL;AAElBR,wBAFkB;AAGlBO;AAHkB,eAApB;AAKD;AACF,WATD;AAUA,iBAAKT,QAAL,CAAcW,EAAd,CAAiB,SAAjB,EAA4B,OAAKH,eAAjC;AACD,SAhCD,MAgCO,IACL,OAAKvB,KAAL,CAAWS,WAAX,KAA2B,sBAAYkB,WAAvC,IACA,OAAKhB,KAFA,EAGL;AACA,iBAAKJ,KAAL,CAAWY,QAAX,CAAoB;AAClBC,kBAAM,OAAKrB,WAAL,CAAiB6B;AADL,WAApB;AAGA,cAAI,OAAKL,eAAT,EAA0B;AACxB,mBAAKR,QAAL,CAAcc,GAAd,CAAkB,SAAlB,EAA6B,OAAKN,eAAlC;AACA,mBAAKA,eAAL,GAAuB,IAAvB;AACD;AACD,cAAI,OAAKR,QAAT,EAAmB;AACjB,mBAAKA,QAAL,CAAce,OAAd;AACA,mBAAKf,QAAL,GAAgB,IAAhB;AACD;AACD,iBAAKR,KAAL,CAAWY,QAAX,CAAoB;AAClBC,kBAAM,OAAKrB,WAAL,CAAiBgC;AADL,WAApB;AAGD;AACD,YAAI,OAAKC,MAAL,KAAgB,uBAAaC,OAAjC,EAA0C;AACxC;AACA,cAAMC,cAAc,OAAKZ,IAAzB;AACA,eAAK,IAAML,IAAX,IAAkBiB,WAAlB,EAA+B;AAC7B,gBAAI5B,WAAWW,IAAX,MAAoBiB,YAAYjB,IAAZ,CAAxB,EAA0C;AACxC,qBAAKF,QAAL,CAAcoB,OAAd,CAAsBlB,IAAtB,EAA2BiB,YAAYjB,IAAZ,CAA3B;AACAX,yBAAWW,IAAX,IAAkBiB,YAAYjB,IAAZ,CAAlB;AACD;AACF;AACF;AACF,OA9DD;AA+DD;;;2CAEiC;AAAA,UAAhBA,GAAgB,SAAhBA,GAAgB;AAAA,UAAXmB,OAAW,SAAXA,OAAW;;AAChC,UAAI,KAAKC,YAAT,EAAuB;AACrB,cAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACD;AACD,UAAI,KAAKpC,SAAL,CAAee,GAAf,CAAJ,EAAyB;AACvB,cAAM,IAAIqB,KAAJ,wBAA8BrB,GAA9B,uBAAN;AACD;AACD,WAAKf,SAAL,CAAee,GAAf,IAAsBmB,OAAtB;AACD;;;4BAEOnB,G,EAAK;AACX,aAAO,KAAKsB,KAAL,CAAWjB,IAAX,CAAgBL,GAAhB,CAAP;AACD;;;wBAEU;AACT,aAAO,KAAKsB,KAAL,CAAWjB,IAAlB;AACD;;;wBAEY;AACX,aAAO,KAAKiB,KAAL,CAAWP,MAAlB;AACD;;;wBAEgB;AACf,aAAO,KAAKO,KAAL,CAAW3B,UAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKoB,MAAL,KAAgB,uBAAarB,KAApC;AACD;;;;;kBA9GkBhB,U","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport SynchronizedStorage from '../../lib/SynchronizedStorage';\nimport loginStatus from '../Auth/loginStatus';\n\nimport actionTypes from './actionTypes';\nimport moduleStatus from '../../enums/moduleStatus';\n\nimport getStorageReducer from './getStorageReducer';\n\n\n/**\n * @class\n * @description Alternative implementation of the Storage class.\n *  Allows registeration of reducers so that persisted states can be computed with reducers.\n */\nexport default class StorageAlt extends RcModule {\n  constructor({\n    auth,\n    StorageProvider = SynchronizedStorage,\n    ...options,\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._StorageProvider = StorageProvider;\n    this._reducers = {};\n    this._reducer = getStorageReducer({ types: this.actionTypes, reducers: this._reducers });\n  }\n  initialize() {\n    let storedData = null;\n    this.store.subscribe(() => {\n      if (\n        this._auth.loginStatus === loginStatus.loggedIn &&\n        !this.ready\n      ) {\n        const storageKey =\n          `${this.prefix ? `${this.prefix}-` : ''}storage-${this._auth.ownerId}`;\n        this._storage = new this._StorageProvider({\n          storageKey,\n        });\n        storedData = this._storage.getData();\n        for (const key in storedData) {\n          if (!this._reducers[key]) {\n            delete storedData[key];\n            this._storage.removeItem(key);\n          }\n        }\n        this.store.dispatch({\n          type: this.actionTypes.init,\n          storageKey,\n          data: storedData,\n        });\n        this._storageHandler = ({ key, value }) => {\n          if (this.ready) {\n            storedData[key] = value;\n            this.store.dispatch({\n              type: this.actionTypes.sync,\n              key,\n              value,\n            });\n          }\n        };\n        this._storage.on('storage', this._storageHandler);\n      } else if (\n        this._auth.loginStatus === loginStatus.notLoggedIn &&\n        this.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.reset,\n        });\n        if (this._storageHandler) {\n          this._storage.off('storage', this._storageHandler);\n          this._storageHandler = null;\n        }\n        if (this._storage) {\n          this._storage.destroy();\n          this._storage = null;\n        }\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      }\n      if (this.status !== moduleStatus.pending) {\n        // save new data to storage when changed\n        const currentData = this.data;\n        for (const key in currentData) {\n          if (storedData[key] !== currentData[key]) {\n            this._storage.setItem(key, currentData[key]);\n            storedData[key] = currentData[key];\n          }\n        }\n      }\n    });\n  }\n\n  registerReducer({ key, reducer }) {\n    if (this._initialized) {\n      throw new Error('Reducers must be registered before initialize');\n    }\n    if (this._reducers[key]) {\n      throw new Error(`Reducer of key: '${key}' already exists`);\n    }\n    this._reducers[key] = reducer;\n  }\n\n  getItem(key) {\n    return this.state.data[key];\n  }\n\n  get data() {\n    return this.state.data;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get storageKey() {\n    return this.state.storageKey;\n  }\n\n  get ready() {\n    return this.status === moduleStatus.ready;\n  }\n\n}\n"]}