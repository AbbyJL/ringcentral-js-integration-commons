{"version":3,"sources":["modules/Storage/getStorageReducer.js"],"names":["getStatusReducer","getDataReducer","getStorageKeyReducer","getStorageReducer","types","state","pending","type","init","ready","reset","resetting","resetSuccess","reducers","action","data","sync","key","value","newState","hasChange","storageKey","status"],"mappings":";;;;;;;;;;;;;;QAGgBA,gB,GAAAA,gB;QAeAC,c,GAAAA,c;QA2BAC,oB,GAAAA,oB;kBAgBQC,iB;;AA7DxB;;AACA;;;;;;AAEO,SAASH,gBAAT,CAA0BI,KAA1B,EAAiC;AACtC,SAAO,YAA4C;AAAA,QAA3CC,KAA2C,uEAAnC,uBAAaC,OAAsB;AAAA;AAAA,QAAXC,IAAW,QAAXA,IAAW;;AACjD,YAAQA,IAAR;AACE,WAAKH,MAAMI,IAAX;AACE,eAAO,uBAAaC,KAApB;AACF,WAAKL,MAAMM,KAAX;AACE,eAAO,uBAAaC,SAApB;AACF,WAAKP,MAAMQ,YAAX;AACE,eAAO,uBAAaN,OAApB;AACF;AACE,eAAOD,KAAP;AARJ;AAUD,GAXD;AAYD;;AAEM,SAASJ,cAAT,QAA6C;AAAA,MAAnBG,KAAmB,SAAnBA,KAAmB;AAAA,MAAZS,QAAY,SAAZA,QAAY;;AAClD,SAAO,YAAwB;AAAA,QAAvBR,KAAuB,uEAAf,EAAe;AAAA,QAAXS,MAAW;;AAC7B,YAAQA,OAAOP,IAAf;AACE,WAAKH,MAAMI,IAAX;AACE,eAAOM,OAAOC,IAAd;AACF,WAAKX,MAAMY,IAAX;AACE,0CACKX,KADL,oCAEGS,OAAOG,GAFV,EAEgBH,OAAOI,KAFvB;AAIF,WAAKd,MAAMQ,YAAX;AACE,eAAO,EAAP;AACF;AAAS;AACP,cAAMO,WAAW,EAAjB;AACA,cAAIC,YAAY,KAAhB;AACA;AACA;AACA,eAAK,IAAMH,GAAX,IAAkBJ,QAAlB,EAA4B;AAC1BM,qBAASF,GAAT,IAAgBJ,SAASI,GAAT,EAAcZ,MAAMY,GAAN,CAAd,EAA0BH,MAA1B,CAAhB;AACA,gBAAIK,SAASF,GAAT,MAAkBZ,MAAMY,GAAN,CAAtB,EAAkCG,YAAY,IAAZ;AACnC;AACD,iBAAOA,YAAYD,QAAZ,GAAuBd,KAA9B;AACD;AApBH;AAsBD,GAvBD;AAwBD;;AAEM,SAASH,oBAAT,CAA8BE,KAA9B,EAAqC;AAC1C,SAAO,YAAwC;AAAA,QAAvCC,KAAuC,uEAA/B,IAA+B;AAAA;AAAA,QAAvBE,IAAuB,SAAvBA,IAAuB;AAAA,QAAjBc,UAAiB,SAAjBA,UAAiB;;AAC7C,YAAQd,IAAR;;AAEE,WAAKH,MAAMI,IAAX;AACE,eAAOa,UAAP;;AAEF,WAAKjB,MAAMQ,YAAX;AACE,eAAO,IAAP;;AAEF;AACE,eAAOP,KAAP;AATJ;AAWD,GAZD;AAaD;;AAEc,SAASF,iBAAT,QAAgD;AAAA,MAAnBC,KAAmB,SAAnBA,KAAmB;AAAA,MAAZS,QAAY,SAAZA,QAAY;;AAC7D,SAAO,4BAAgB;AACrBS,YAAQtB,iBAAiBI,KAAjB,CADa;AAErBW,UAAMd,eAAe,EAAEG,YAAF,EAASS,kBAAT,EAAf,CAFe;AAGrBQ,gBAAYnB,qBAAqBE,KAArB;AAHS,GAAhB,CAAP;AAKD","file":"getStorageReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport moduleStatus from '../../enums/moduleStatus';\n\nexport function getStatusReducer(types) {\n  return (state = moduleStatus.pending, { type }) => {\n    switch (type) {\n      case types.init:\n        return moduleStatus.ready;\n      case types.reset:\n        return moduleStatus.resetting;\n      case types.resetSuccess:\n        return moduleStatus.pending;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getDataReducer({ types, reducers }) {\n  return (state = {}, action) => {\n    switch (action.type) {\n      case types.init:\n        return action.data;\n      case types.sync:\n        return {\n          ...state,\n          [action.key]: action.value,\n        };\n      case types.resetSuccess:\n        return {};\n      default: {\n        const newState = {};\n        let hasChange = false;\n        // compute new substates and check for changes\n        /* eslint-disable guard-for-in */\n        for (const key in reducers) {\n          newState[key] = reducers[key](state[key], action);\n          if (newState[key] !== state[key]) hasChange = true;\n        }\n        return hasChange ? newState : state;\n      }\n    }\n  };\n}\n\nexport function getStorageKeyReducer(types) {\n  return (state = null, { type, storageKey }) => {\n    switch (type) {\n\n      case types.init:\n        return storageKey;\n\n      case types.resetSuccess:\n        return null;\n\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getStorageReducer({ types, reducers }) {\n  return combineReducers({\n    status: getStatusReducer(types),\n    data: getDataReducer({ types, reducers }),\n    storageKey: getStorageKeyReducer(types),\n  });\n}\n"]}