{"version":3,"sources":["modules/DialingPlan/index.js"],"names":["DEFAULT_TTL","DEFAULT_RETRY","DialingPlan","auth","client","storage","tabManager","ttl","timeToRetry","options","actionTypes","_auth","_storage","_client","_tabManager","_ttl","_timeToRetry","_plansStorageKey","_timestampStorageKey","_reducer","registerReducer","key","reducer","_promise","_timeoutId","store","subscribe","loggedIn","ready","status","pending","dispatch","type","init","active","isFreshLogin","timestamp","Date","now","loadDialingPlan","_startPolling","initSuccess","_stopPolling","reset","t","setTimeout","clearTimeout","fetch","id","account","dialingPlan","list","params","p","isoCode","callingCode","plans","map","fetchSuccess","fetchError","error","_loadDialingPlan","getItem","state"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport fetchList from '../../lib/fetchList';\nimport moduleStatus from '../../enums/moduleStatus';\nimport actionTypes from './actionTypes';\nimport getDialingPlanReducer, {\n  getPlansReducer,\n  getTimestampReducer,\n} from './getDialingPlanReducer';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_RETRY = 60 * 1000;\n\nexport default class DialingPlan extends RcModule {\n  constructor({\n    auth,\n    client,\n    storage,\n    tabManager,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_RETRY,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._storage = storage;\n    this._client = client;\n    this._tabManager = tabManager;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._plansStorageKey = 'dialingPlans';\n    this._timestampStorageKey = 'dialingPlanTimestamp';\n    this._reducer = getDialingPlanReducer(this.actionTypes);\n\n    this._storage.registerReducer({\n      key: this._plansStorageKey,\n      reducer: getPlansReducer(this.actionTypes),\n    });\n    this._storage.registerReducer({\n      key: this._timestampStorageKey,\n      reducer: getTimestampReducer(this.actionTypes),\n    });\n\n    this._promise = null;\n    this._timeoutId = null;\n  }\n  initialize() {\n    this.store.subscribe(async () => {\n      if (\n        this._auth.loggedIn &&\n        this._storage.ready &&\n        this.status === moduleStatus.pending\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.init,\n        });\n        if (\n          (!this._tabManager || this._tabManager.active) &&\n          (\n            this._auth.isFreshLogin ||\n            !this.timestamp ||\n            Date.now() - this.timestamp > this._ttl\n          )\n        ) {\n          await this.loadDialingPlan();\n        } else {\n          this._startPolling();\n        }\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        (!this._auth.loggedIn || !this._storage.ready) &&\n        this.ready\n      ) {\n        this._stopPolling();\n        this._promise = null;\n        this.store.dispatch({\n          type: this.actionTypes.reset,\n        });\n      }\n    });\n  }\n\n  get plans() {\n    return this._storage.getItem(this._plansStorageKey);\n  }\n\n  get timestamp() {\n    return this._storage.getItem(this._timestampStorageKey);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatus.ready;\n  }\n\n  _startPolling(t = this.timestamp + this._ttl + 10 - Date.now()) {\n    this._stopPolling();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._tabManager || this._tabManager.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this._ttl) {\n          this.loadDialingPlan();\n        } else {\n          this._startPolling();\n        }\n      } else {\n        if (this.timestamp && Date.now() - this.timestamp < this._ttl) {\n          this._startPolling();\n        } else {\n          this._startPolling(this._timeToRetry);\n        }\n      }\n    }, t);\n  }\n\n  _stopPolling() {\n    if (this._timeoutId) clearTimeout(this._timeoutId);\n  }\n\n  async _loadDialingPlan() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const id = this._auth.id;\n    try {\n      const plans = (await fetchList(params => (\n        this._client.account().dialingPlan().list(params)\n      ))).map(p => ({\n        id: p.id,\n        isoCode: p.isoCode,\n        callingCode: p.callingCode,\n      }));\n      if (this._auth.id === id) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          plans,\n          timestamp: Date.now(),\n        });\n        this._startPolling();\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.id === id) {\n        this._promise = null;\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        this._startPolling(this._timeToRetry);\n        throw error;\n      }\n    }\n  }\n  loadDialingPlan() {\n    if (!this._promise) {\n      this._promise = this._loadDialingPlan();\n    }\n    return this._promise;\n  }\n}\n\n"]}