{"version":3,"sources":["modules/DialingPlan/index.js"],"names":["DialingPlan","deps","dep","optional","client","options","name","polling","fetchFunction","params","platform","service","get","response","json","id","p","isoCode","callingCode","map","addSelector","data","_selectors","plans","state","status","ready"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;IAOqBA,W,WAHpB,gBAAO;AACNC,QAAM,CAAC,QAAD,EAAW,EAAEC,KAAK,oBAAP,EAA6BC,UAAU,IAAvC,EAAX;AADA,CAAP,C;;;AAIC;;;;;AAKA,6BAGG;AAAA;;AAAA,QAFDC,MAEC,QAFDA,MAEC;AAAA,QADEC,OACF;AAAA;;AAAA;AAECC,YAAM,aAFP;AAGCF,oBAHD;AAICG,eAAS,IAJV;AAKCC;AAAA,+EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAmB;AAAA,2FAAU,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACpCC,sCADoC,GACzBN,OAAOO,OAAP,CAAeD,QAAf,EADyB;AAAA;AAAA,qCAEnBA,SAASE,GAAT,CAAa,yBAAb,EAAwCH,MAAxC,CAFmB;;AAAA;AAEpCI,sCAFoC;AAAA,+DAGnCA,SAASC,IAAT,EAHmC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAV;;AAAA;AAAA;AAAA;AAAA,sBAAnB;;AAAA;AAAA,iCAIP;AAAA,2BAAM;AACZC,0BAAIC,EAAED,EADM;AAEZE,+BAASD,EAAEC,OAFC;AAGZC,mCAAaF,EAAEE;AAHH,qBAAN;AAAA,mBAJO;;AAAA,mEAIXC,GAJW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;;AAAA;AAAA;AAAA;AAAA;AALD,OAcId,OAdJ;;AAiBD,UAAKe,WAAL,CACE,OADF,EAEE;AAAA,aAAM,MAAKC,IAAX;AAAA,KAFF,EAGE;AAAA,aAAQA,QAAQ,EAAhB;AAAA,KAHF;AAjBC;AAsBF;;;;wBAEW;AACV,aAAO,KAAKC,UAAL,CAAgBC,KAAhB,EAAP;AACD;;;wBAEY;AACX,aAAO,KAAKC,KAAL,CAAWC,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKD,KAAL,CAAWC,MAAX,KAAsB,yBAAeC,KAA5C;AACD;;;;kBA3CkB1B,W","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport fetchList from '../../lib/fetchList';\nimport DataFetcher from '../../lib/DataFetcher';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\n/**\n * @class\n * @description Dial plan list managing module\n */\n@Module({\n  deps: ['Client', { dep: 'DialingPlanOptions', optional: true }]\n})\nexport default class DialingPlan extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    client,\n    ...options\n  }) {\n    super({\n      name: 'dialingPlan',\n      client,\n      polling: true,\n      fetchFunction: async () => (await fetchList(async (params) => {\n        const platform = client.service.platform();\n        const response = await platform.get('/account/~/dialing-plan', params);\n        return response.json();\n      })).map(p => ({\n        id: p.id,\n        isoCode: p.isoCode,\n        callingCode: p.callingCode,\n      })),\n      ...options,\n    });\n\n    this.addSelector(\n      'plans',\n      () => this.data,\n      data => data || [],\n    );\n  }\n\n  get plans() {\n    return this._selectors.plans();\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n}\n\n"]}