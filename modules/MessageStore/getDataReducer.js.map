{"version":3,"sources":["modules/MessageStore/getDataReducer.js"],"names":["getMessageDataReducer","getUpdatedTimestampReducer","getSyncTokenReducer","getSyncTimestampReducer","getDataReducer","initialConversationsDataState","conversations","conversationMap","messages","types","state","type","records","syncToken","syncConversationId","conversationId","messageId","recipients","syncSuccess","updateMessages","syncConversationSuccess","updateConversationRecipients","removeMessage","newConversationMap","newConversations","forEach","conversation","push","index","length","unreadMessages","filter","message","id","cleanUp","resetSuccess","Date","now","syncTimestamp","data","updatedTimestamp"],"mappings":"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","file":"getDataReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport {\n  pushRecordsToMessageData,\n  updateConversationRecipients,\n} from './messageStoreHelper';\n\nconst initialConversationsDataState = {\n  conversations: [],\n  conversationMap: {},\n  messages: [],\n};\nexport function getMessageDataReducer(types) {\n  return (state = initialConversationsDataState, {\n    type,\n    records,\n    syncToken = null,\n    syncConversationId = null,\n    conversationId = null,\n    messageId = null,\n    recipients = null,\n  }) => {\n    switch (type) {\n      case types.syncSuccess:\n      case types.updateMessages:\n        return pushRecordsToMessageData({\n          ...state,\n          records,\n          syncToken,\n        });\n      case types.syncConversationSuccess:\n        return pushRecordsToMessageData({\n          ...state,\n          records,\n          syncToken,\n          syncConversationId,\n        });\n      case types.updateConversationRecipients:\n        return updateConversationRecipients({\n          ...state,\n          conversationId,\n          recipients,\n        });\n      case types.removeMessage: {\n        const newConversationMap = {};\n        const newConversations = [];\n        state.conversations.forEach((conversation) => {\n          if (conversation && conversation.conversationId !== conversationId) {\n            newConversations.push({ ...conversation });\n            if (state.conversationMap[conversation.conversationId]) {\n              newConversationMap[conversation.conversationId] = {\n                ...state.conversationMap[conversation.conversationId],\n                index: (newConversations.length - 1),\n                unreadMessages: {\n                  ...state.conversationMap[conversation.conversationId].unreadMessages,\n                },\n              };\n            }\n          }\n        });\n        return {\n          conversations: newConversations,\n          conversationMap: newConversationMap,\n          messages: state.messages.filter(\n            message => message.id !== messageId\n          ),\n        };\n      }\n      case types.cleanUp:\n      case types.resetSuccess:\n        return initialConversationsDataState;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getUpdatedTimestampReducer(types) {\n  return (state = null, { type }) => {\n    switch (type) {\n      case types.syncSuccess:\n      case types.syncConversationSuccess:\n      case types.updateConversationRecipients:\n      case types.updateMessages:\n        return Date.now();\n      case types.resetSuccess:\n      case types.cleanUp:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getSyncTokenReducer(types) {\n  return (state = null, { type, syncToken }) => {\n    switch (type) {\n      case types.syncSuccess:\n        return syncToken;\n      case types.resetSuccess:\n      case types.cleanUp:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getSyncTimestampReducer(types) {\n  return (state = null, { type, syncTimestamp }) => {\n    switch (type) {\n      case types.syncSuccess:\n        return syncTimestamp;\n      case types.resetSuccess:\n      case types.cleanUp:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getDataReducer(types) {\n  return combineReducers({\n    data: getMessageDataReducer(types),\n    updatedTimestamp: getUpdatedTimestampReducer(types),\n    syncToken: getSyncTokenReducer(types),\n    syncTimestamp: getSyncTimestampReducer(types),\n  });\n}\n"]}