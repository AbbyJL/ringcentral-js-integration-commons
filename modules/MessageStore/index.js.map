{"version":3,"sources":["modules/MessageStore/index.js"],"names":["processResponseData","messageHelper","messageStoreHelper","data","records","slice","reverse","syncTimestamp","Date","syncInfo","syncTime","getTime","syncToken","DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","DEFAULT_DAY_SPAN","MessageStore","deps","dep","optional","alert","client","auth","ttl","timeToRetry","daySpan","storage","subscription","connectivityMonitor","polling","disableCache","options","actionTypes","_alert","_client","_storage","_subscription","_connectivityMonitor","_ttl","_timeToRetry","_daySpan","_auth","_promise","_lastSubscriptionMessage","_storageKey","_polling","_reducer","registerReducer","key","reducer","addSelector","allConversations","conversations","unreadCounts","forEach","conversation","messageIsTextMessage","messageIsVoicemail","voiceUnreadCounts","textUnreadCounts","filter","messageIsFax","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_shouleCleanCache","_cleanUpCache","_connectivity","connectivity","_initMessageStore","_shouldReset","_resetModuleStatus","ready","_subscriptionHandler","_checkConnectivity","pending","isFreshLogin","now","updatedTimestamp","resetSuccess","cleanUp","id","conversationMap","toString","_syncMessages","console","error","initSuccess","accountExtesionEndPoint","message","test","event","body","changes","params","account","extension","messageSync","list","response","dateFrom","dateTo","recordsLength","MAX_MSG_LENGTH","getMessageSyncParams","_messageSyncApi","length","olderRecordsExist","_dateTo","creationTime","_recursiveFSync","lastResponse","concat","sync","oldSyncToken","syncSuccess","_startPolling","_retry","conversationId","syncConversationSuccess","syncConversationId","_sync","_updateMessagesFromSync","_updateConversationFromSync","syncFunction","_onSyncError","syncError","messageId","status","readStatus","messageStore","put","updateRequest","delete","messageIds","ids","decodeURIComponent","join","platform","service","url","responses","_updateMessageApi","result","UPDATE_MESSAGE_ONCE_COUNT","leftIds","rightIds","map","_batchUpdateMessagesApi","results","res","push","json","_updateMessagesApi","rightResults","unreadMessageIds","unreadMessages","updatedMessages","updateMessages","warning","readFailed","markMessages","unreadFailed","_deleteMessageApi","removeMessage","deleteFailed","searchText","messages","subject","toLowerCase","indexOf","recipients","updateConversationRecipients","record","pushMessages","clickToSMS","fromType","clickToCall","getItem","state","cache","_selectors","voicemailMessages","faxMessages","textConversations","textAndVoicemailMessages","messageStoreStatus"],"mappings":"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","file":"index.js","sourcesContent":["import { Module } from '../../lib/di';\nimport Pollable from '../../lib/Pollable';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\nimport { batchPutApi } from '../../lib/batchApiHelper';\n\nimport * as messageHelper from '../../lib/messageHelper';\nimport * as messageStoreHelper from './messageStoreHelper';\n\nimport actionTypes from './actionTypes';\nimport getMessageStoreReducer from './getMessageStoreReducer';\nimport getDataReducer from './getDataReducer';\nimport messageStoreErrors from './messageStoreErrors';\nimport sleep from '../../lib/sleep';\nimport proxify from '../../lib/proxy/proxify';\n\nexport function processResponseData(data) {\n  const records = data.records.slice();\n  return {\n    records: records.reverse(),\n    syncTimestamp: (new Date(data.syncInfo.syncTime)).getTime(),\n    syncToken: data.syncInfo.syncToken,\n  };\n}\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst DEFAULT_DAY_SPAN = 7;\n\n/**\n * @class\n * @description Messages data manageing module\n */\n@Module({\n  deps: [\n    'Alert', 'Client', 'Auth', 'Subscription', 'ConnectivityMonitor',\n    { dep: 'Storage', optional: true },\n    { dep: 'MessageStoreOptions', optional: true }\n  ]\n})\nexport default class MessageStore extends Pollable {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Alert} params.alert - alert module instance\n   * @param {Auth} params.auth - auth module instance\n   * @param {Client} params.client - client module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {subscription} params.subscription - subscription module instance\n   * @param {connectivityMonitor} params.connectivityMonitor - connectivityMonitor module instance\n   * @param {Number} params.ttl - local cache timestamp\n   * @param {Number} params.timeToRetry - waiting time to retry\n   * @param {Number} params.daySpan - day span of call log\n   * @param {Bool} params.polling - polling flag, default false\n   */\n  constructor({\n    alert,\n    client,\n    auth,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    daySpan = DEFAULT_DAY_SPAN,\n    storage,\n    subscription,\n    connectivityMonitor,\n    polling = false,\n    disableCache = false,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._alert = alert;\n    this._client = client;\n    if (!disableCache) {\n      this._storage = storage;\n    }\n    this._subscription = subscription;\n    this._connectivityMonitor = connectivityMonitor;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._daySpan = daySpan;\n    this._auth = auth;\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    this._storageKey = 'messageStore';\n    this._polling = polling;\n\n    if (this._storage) {\n      this._reducer = getMessageStoreReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._storageKey,\n        reducer: getDataReducer(this.actionTypes),\n      });\n    } else {\n      this._reducer = getMessageStoreReducer(this.actionTypes, {\n        data: getDataReducer(this.actionTypes),\n      });\n    }\n\n    this.addSelector(\n      'textUnreadCounts',\n      () => this.allConversations,\n      (conversations) => {\n        let unreadCounts = 0;\n        conversations.forEach((conversation) => {\n          if (messageHelper.messageIsTextMessage(conversation)) {\n            unreadCounts += conversation.unreadCounts;\n          }\n        });\n        return unreadCounts;\n      }\n    );\n\n    this.addSelector(\n      'voiceUnreadCounts',\n      () => this.allConversations,\n      (conversations) => {\n        let unreadCounts = 0;\n        conversations.forEach((conversation) => {\n          if (messageHelper.messageIsVoicemail(conversation)) {\n            unreadCounts += conversation.unreadCounts;\n          }\n        });\n        return unreadCounts;\n      }\n    );\n\n    this.addSelector(\n      'unreadCounts',\n      () => this.voiceUnreadCounts,\n      () => this.textUnreadCounts,\n      (voiceUnreadCounts, textUnreadCounts) => (voiceUnreadCounts + textUnreadCounts),\n    );\n\n    this.addSelector(\n      'textConversations',\n      () => this.allConversations,\n      conversations =>\n        conversations.filter(\n          conversation => messageHelper.messageIsTextMessage(conversation)\n        )\n    );\n\n    this.addSelector(\n      'faxMessages',\n      () => this.allConversations,\n      conversations =>\n        conversations.filter(\n          conversation => messageHelper.messageIsFax(conversation)\n        )\n    );\n\n    this.addSelector(\n      'voicemailMessages',\n      () => this.allConversations,\n      conversations =>\n        conversations.filter(\n          conversation => messageHelper.messageIsVoicemail(conversation)\n        )\n    );\n\n    this.addSelector(\n      'textAndVoicemailMessages',\n      () => this.allConversations,\n      conversations =>\n        conversations.filter(\n          conversation =>\n            (\n              messageHelper.messageIsTextMessage(conversation) ||\n              messageHelper.messageIsVoicemail(conversation)\n            )\n        )\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._shouleCleanCache()) {\n        this._cleanUpCache();\n      }\n      if (this._connectivityMonitor) {\n        this._connectivity = this._connectivityMonitor.connectivity;\n      }\n      this._initMessageStore();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (\n      this.ready\n    ) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      (!this._storage || this._storage.ready) &&\n      this._subscription.ready &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        (!!this._storage && !this._storage.ready) ||\n        !this._subscription.ready ||\n        (!!this._connectivityMonitor && !this._connectivityMonitor.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouleCleanCache() {\n    return (\n      this._auth.isFreshLogin ||\n      (Date.now() - this.updatedTimestamp) > this.ttl\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  _cleanUpCache() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanUp,\n    });\n  }\n\n  findConversationById(id) {\n    return this.conversationMap[id.toString()];\n  }\n\n  async _initMessageStore() {\n    try {\n      await this._syncMessages();\n      this._subscription.subscribe('/account/~/extension/~/message-store');\n    } catch (e) {\n      console.error(e);\n    }\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _subscriptionHandler() {\n    const accountExtesionEndPoint = /\\/message-store$/;\n    const { message } = this._subscription;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      accountExtesionEndPoint.test(message.event) &&\n      message.body &&\n      message.body.changes\n    ) {\n      this._lastSubscriptionMessage = this._subscription.message;\n      this._syncMessages();\n    }\n  }\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this._syncMessages();\n      }\n    }\n  }\n\n  async _messageSyncApi(params) {\n    const response = await this._client\n      .account()\n      .extension()\n      .messageSync()\n      .list(params);\n    return response;\n  }\n  async _recursiveFSync({\n    dateFrom,\n    dateTo = null,\n    syncToken,\n    recordsLength = 0,\n  }) {\n    const MAX_MSG_LENGTH = 500;\n    const params = messageStoreHelper.getMessageSyncParams({\n      dateFrom,\n      dateTo,\n      syncToken,\n      daySpan: this._daySpan,\n    });\n    const {\n      records,\n      syncInfo,\n    } = await this._messageSyncApi(params);\n    recordsLength += records.length;\n    if (recordsLength > MAX_MSG_LENGTH || !syncInfo.olderRecordsExist) {\n      return {\n        records,\n        syncInfo,\n      };\n    }\n    await sleep(1000);\n    const _dateTo = new Date(records[records.length - 1].creationTime);\n    const lastResponse = await this._recursiveFSync({\n      dateFrom,\n      dateTo: _dateTo,\n      syncToken,\n      recordsLength,\n    });\n    return {\n      records: records.concat(lastResponse.records),\n      syncInfo,\n    };\n  }\n  async _updateMessagesFromSync() {\n    let response;\n    this.store.dispatch({\n      type: this.actionTypes.sync,\n    });\n    try {\n      const oldSyncToken = this.syncToken;\n      const params = messageStoreHelper.getMessageSyncParams({\n        syncToken: oldSyncToken,\n        daySpan: this._daySpan,\n      });\n      if (!oldSyncToken) {\n        response = await this._recursiveFSync({\n          ...params,\n        });\n      } else {\n        response = await this._messageSyncApi(params);\n      }\n      const {\n        records,\n        syncTimestamp,\n        syncToken,\n      } = processResponseData(response);\n      this.store.dispatch({\n        type: this.actionTypes.syncSuccess,\n        records,\n        syncTimestamp,\n        syncToken,\n      });\n      if (this._polling) {\n        this._startPolling();\n      }\n    } catch (error) {\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  async _updateConversationFromSync(conversationId) {\n    let response;\n    const conversation = this.conversationMap[conversationId.toString()];\n    if (!conversation) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.sync,\n    });\n    const oldSyncToken = conversation.syncToken;\n    const params = messageStoreHelper.getMessageSyncParams({\n      syncToken: oldSyncToken,\n      conversationId: conversation.id,\n      daySpan: this._daySpan,\n    });\n    if (!oldSyncToken) {\n      response = await this._recursiveFSync({\n        ...params,\n      });\n    } else {\n      response = await this._messageSyncApi(params);\n    }\n    const {\n      records,\n      syncTimestamp,\n      syncToken,\n    } = processResponseData(response);\n    this.store.dispatch({\n      type: this.actionTypes.syncConversationSuccess,\n      records,\n      syncTimestamp,\n      syncToken,\n      syncConversationId: conversation.id,\n    });\n  }\n\n  async _syncMessages() {\n    await this._sync(async () => {\n      await this._updateMessagesFromSync();\n    });\n  }\n\n  @proxify\n  async fetchData() {\n    await this._syncMessages();\n  }\n\n  @proxify\n  async syncConversation(id) {\n    await this._sync(async () => {\n      await this._updateConversationFromSync(id);\n    });\n  }\n\n  async _sync(syncFunction) {\n    if (!this._promise) {\n      this._promise = (async () => {\n        try {\n          await syncFunction();\n          this._promise = null;\n        } catch (error) {\n          this._onSyncError();\n          this._promise = null;\n          throw error;\n        }\n      })();\n    }\n    await this._promise;\n  }\n\n  _onSyncError() {\n    this.store.dispatch({\n      type: this.actionTypes.syncError,\n    });\n  }\n\n  async _updateMessageApi(messageId, status) {\n    const body = {\n      readStatus: status,\n    };\n    const updateRequest = await this._client.account()\n      .extension()\n      .messageStore(messageId)\n      .put(body);\n    return updateRequest;\n  }\n\n  async _deleteMessageApi(messageId) {\n    await this._client.account()\n      .extension()\n      .messageStore(messageId)\n      .delete();\n  }\n\n  async _batchUpdateMessagesApi(messageIds, body) {\n    const ids = decodeURIComponent(messageIds.join(','));\n    const platform = this._client.service.platform();\n    const responses = await batchPutApi({\n      platform,\n      url: `/account/~/extension/~/message-store/${ids}`,\n      body,\n    });\n    return responses;\n  }\n\n  async _updateMessagesApi(messageIds, status) {\n    if (messageIds.length === 1) {\n      const result = await this._updateMessageApi(messageIds[0], status);\n      return [result];\n    }\n    const UPDATE_MESSAGE_ONCE_COUNT = 20;\n    const leftIds = messageIds.slice(0, UPDATE_MESSAGE_ONCE_COUNT);\n    const rightIds = messageIds.slice(UPDATE_MESSAGE_ONCE_COUNT);\n    const body = leftIds.map(() => (\n      { body: { readStatus: status } }\n    ));\n    const responses = await this._batchUpdateMessagesApi(leftIds, body);\n    const results = [];\n    responses.forEach((res) => {\n      if (res.response().status === 200) {\n        results.push(res.json());\n      }\n    });\n    if (rightIds.length > 0) {\n      const rightResults = await this._updateMessagesApi(rightIds, status);\n      if (rightResults.length > 0) {\n        results.concat(rightResults);\n      }\n    }\n    return results;\n  }\n\n  @proxify\n  async readMessages(conversationId) {\n    const conversation = this.conversationMap[conversationId];\n    if (!conversation) {\n      return null;\n    }\n    const unreadMessageIds = Object.keys(conversation.unreadMessages);\n    if (unreadMessageIds.length === 0) {\n      return null;\n    }\n    try {\n      const updatedMessages = await this._updateMessagesApi(unreadMessageIds, 'Read');\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: updatedMessages,\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.readFailed,\n      });\n    }\n    return null;\n  }\n\n  @proxify\n  async unreadMessage(messageId) {\n    //  for track mark message\n    this.store.dispatch({\n      type: this.actionTypes.markMessages,\n    });\n    try {\n      const message = await this._updateMessageApi(messageId, 'Unread');\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: [message],\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.unreadFailed,\n      });\n    }\n  }\n\n  // for track mark message\n  @proxify\n  async unmarkMessages() {\n    this.store.dispatch({\n      type: this.actionTypes.markMessages,\n    });\n  }\n\n  @proxify\n  async deleteMessage(messageId) {\n    try {\n      await this._deleteMessageApi(messageId);\n      this.store.dispatch({\n        type: this.actionTypes.removeMessage,\n        conversationId: messageId,\n        messageId,\n      });\n    } catch (error) {\n      console.error(error);\n      this._alert.warning({\n        message: messageStoreErrors.deleteFailed,\n      });\n    }\n  }\n\n  searchMessagesText(searchText) {\n    return this.messages.filter((message) => {\n      if (\n        message.subject &&\n        message.subject.toLowerCase().indexOf(searchText) >= 0\n      ) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  @proxify\n  async updateConversationRecipientList(conversationId, recipients) {\n    this.store.dispatch({\n      type: this.actionTypes.updateConversationRecipients,\n      conversationId,\n      recipients,\n    });\n  }\n\n  @proxify\n  async pushMessages(records) {\n    this.store.dispatch({\n      type: this.actionTypes.updateMessages,\n      records,\n    });\n  }\n\n  pushMessage(record) {\n    this.pushMessages([record]);\n  }\n\n  // for track click to sms in message list\n  @proxify\n  onClickToSMS() {\n    this.store.dispatch({\n      type: this.actionTypes.clickToSMS\n    });\n  }\n\n  // for track click to call in message list\n  @proxify\n  onClickToCall({ fromType = '' }) {\n    this.store.dispatch({\n      type: this.actionTypes.clickToCall,\n      fromType\n    });\n  }\n\n\n  get cache() {\n    if (this._storage) {\n      return this._storage.getItem(this._storageKey);\n    }\n    return this.state.data;\n  }\n\n  get messages() {\n    return this.cache.data.messages;\n  }\n\n  get allConversations() {\n    return (this.cache && this.cache.data.conversations) || [];\n  }\n\n  get voicemailMessages() {\n    return this._selectors.voicemailMessages();\n  }\n\n  get faxMessages() {\n    return this._selectors.faxMessages();\n  }\n\n  get textConversations() {\n    return this._selectors.textConversations();\n  }\n\n  get conversations() {\n    return this._selectors.textAndVoicemailMessages();\n  }\n\n  get conversationMap() {\n    return this.cache.data.conversationMap;\n  }\n\n  get updatedTimestamp() {\n    return this.cache.updatedTimestamp;\n  }\n\n  get syncTimestamp() {\n    return this.cache.data.syncTimestamp;\n  }\n\n  get syncToken() {\n    return this.cache.syncToken;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get unreadCounts() {\n    return this._selectors.unreadCounts();\n  }\n\n  get textUnreadCounts() {\n    return this._selectors.textUnreadCounts();\n  }\n\n  get voiceUnreadCounts() {\n    return this._selectors.voiceUnreadCounts();\n  }\n\n  get messageStoreStatus() {\n    return this.state.messageStoreStatus;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatuses.pending;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get timestamp() {\n    return this.syncTimestamp;\n  }\n}\n"]}