{"version":3,"sources":["lib/EventTransport.js"],"names":["symbols","EventTransport","prefix","timeout","handlers","id","v4","prefixString","events","request","response","push","deferred","Math","max","payload","requestId","promise","resolve","reject","set","setTimeout","get","Error","then","clearTimeout","delete","result","catch","error","emit"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,UAAU,wBAAc,CAC5B,SAD4B,EAE5B,IAF4B,EAG5B,QAH4B,EAI5B,UAJ4B,EAK5B,SAL4B,CAAd,CAAhB;;IAQqBC,c;;;AACnB,gCAAsC;AAAA,QAAxBC,MAAwB,QAAxBA,MAAwB;AAAA,4BAAhBC,OAAgB;AAAA,QAAhBA,OAAgB,gCAAN,EAAM;AAAA;;AAAA;;AAEpC,UAAKH,QAAQI,QAAb,IAAyB,mBAAzB;AACA,UAAKJ,QAAQK,EAAb,IAAmB,eAAKC,EAAL,EAAnB;AACA,QAAMC,eAAeL,SAAYA,MAAZ,SAAwB,EAA7C;AACA,UAAKF,QAAQQ,MAAb,IAAuB;AACrBC,eAAYF,YAAZ,6BADqB;AAErBG,gBAAaH,YAAb,8BAFqB;AAGrBI,YAASJ,YAAT;AAHqB,KAAvB;AAKA,UAAKP,QAAQY,QAAb,IAAyB,mBAAzB;AACA,UAAKZ,QAAQG,OAAb,IAAwBU,KAAKC,GAAL,CAASX,UAAU,IAAnB,EAAyB,IAAzB,CAAxB;AAXoC;AAYrC;;;;;;;;YAIeY,O,SAAAA,O;;;;;;AACRC,yB,GAAY,eAAKV,EAAL,E;AACZW,uB,GAAU,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,yBAAKnB,QAAQY,QAAb,EAAuBQ,GAAvB,CAA2BJ,SAA3B,EAAsC;AACpCE,oCADoC;AAEpCC;AAFoC,mBAAtC;AAID,iBALe,C;AAMZhB,uB,GAAUkB,WAAW,YAAM;AAC7BlB,4BAAU,IAAV;AACA,yBAAKH,QAAQY,QAAb,EAAuBU,GAAvB,CAA2BN,SAA3B,EAAsCG,MAAtC,CAA6C,IAAII,KAAJ,CAAU,kBAAV,CAA7C;AACD,iBAHa,EAGX,KAAKvB,QAAQG,OAAb,CAHW,C;;AAIdc,wBAAQO,IAAR,CAAa,kBAAU;AACrB,sBAAIrB,OAAJ,EAAasB,aAAatB,OAAb;AACb,yBAAKH,QAAQY,QAAb,EAAuBc,MAAvB,CAA8BV,SAA9B;AACA,yBAAO,kBAAQE,OAAR,CAAgBS,MAAhB,CAAP;AACD,iBAJD,EAIGC,KAJH,CAIS,iBAAS;AAChB,sBAAIzB,OAAJ,EAAasB,aAAatB,OAAb;AACb,yBAAKH,QAAQY,QAAb,EAAuBc,MAAvB,CAA8BV,SAA9B;AACA,yBAAO,kBAAQG,MAAR,CAAeU,KAAf,CAAP;AACD,iBARD;;AAUA,qBAAKC,IAAL,CAAU,KAAK9B,QAAQQ,MAAb,EAAqBC,OAA/B,EAAwC;AACtCO,sCADsC;AAEtCD;AAFsC,iBAAxC;iDAIOE,O;;;;;;;;;;;;;;;;;;oCAE8B;AAAA,UAA5BD,SAA4B,SAA5BA,SAA4B;AAAA,UAAjBW,MAAiB,SAAjBA,MAAiB;AAAA,UAATE,KAAS,SAATA,KAAS;;AACrC,UAAMjB,WAAW,KAAKZ,QAAQY,QAAb,EAAuBU,GAAvB,CAA2BN,SAA3B,CAAjB;AACA,UAAIJ,QAAJ,EAAc;AACZ,YAAIiB,KAAJ,EAAW;AACTjB,mBAASO,MAAT,CAAgBU,KAAhB;AACD,SAFD,MAEO;AACLjB,mBAASM,OAAT,CAAiBS,MAAjB;AACD;AACF;AACF;;;gCACiB;AAAA,UAAXZ,OAAW,SAAXA,OAAW;;AAChB,WAAKe,IAAL,CAAU,KAAK9B,QAAQQ,MAAb,EAAqBG,IAA/B,EAAqCI,OAArC;AACD;;;wBA3CY;AACX,aAAO,KAAKf,QAAQQ,MAAb,CAAP;AACD;;;;;kBAhBkBP,c","file":"EventTransport.js","sourcesContent":["import SymbolMap from 'data-types/symbol-map';\nimport uuid from 'uuid';\nimport Emitter from './Emitter';\n\nconst symbols = new SymbolMap([\n  'handler',\n  'id',\n  'events',\n  'deferred',\n  'timeout',\n]);\n\nexport default class EventTransport extends Emitter {\n  constructor({ prefix, timeout = 30 }) {\n    super();\n    this[symbols.handlers] = new Set();\n    this[symbols.id] = uuid.v4();\n    const prefixString = prefix ? `${prefix}-` : '';\n    this[symbols.events] = {\n      request: `${prefixString}-event-transport-request`,\n      response: `${prefixString}-event-transport-response`,\n      push: `${prefixString}-event-tranport-push`,\n    };\n    this[symbols.deferred] = new Map();\n    this[symbols.timeout] = Math.max(timeout * 1000, 5000);\n  }\n  get events() {\n    return this[symbols.events];\n  }\n  async request({ payload }) {\n    const requestId = uuid.v4();\n    const promise = new Promise((resolve, reject) => {\n      this[symbols.deferred].set(requestId, {\n        resolve,\n        reject,\n      });\n    });\n    let timeout = setTimeout(() => {\n      timeout = null;\n      this[symbols.deferred].get(requestId).reject(new Error('Response timeout'));\n    }, this[symbols.timeout]);\n    promise.then(result => {\n      if (timeout) clearTimeout(timeout);\n      this[symbols.deferred].delete(requestId);\n      return Promise.resolve(result);\n    }).catch(error => {\n      if (timeout) clearTimeout(timeout);\n      this[symbols.deferred].delete(requestId);\n      return Promise.reject(error);\n    });\n\n    this.emit(this[symbols.events].request, {\n      requestId,\n      payload,\n    });\n    return promise;\n  }\n  response({ requestId, result, error }) {\n    const deferred = this[symbols.deferred].get(requestId);\n    if (deferred) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(result);\n      }\n    }\n  }\n  push({ payload }) {\n    this.emit(this[symbols.events].push, payload);\n  }\n}\n"]}