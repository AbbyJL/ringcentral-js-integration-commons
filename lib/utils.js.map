{"version":3,"sources":["lib/utils.js"],"names":["fn","params","fetchedPages","totalPages","list","page","data","paging","concat","records","fetchList","t","setTimeout","resolve","sleep","extractData","emit","model","Array","isArray","map","item","key","hasOwnProperty","eventType","event","payloads"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;wEAeO,iBAAyBA,EAAzB;AAAA,QAA6BC,MAA7B,yDAAsC,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,wBADC,GACc,CADd;AAEDC,sBAFC,GAEY,CAFZ;AAGDC,gBAHC,GAGM,EAHN;;AAAA;AAAA,kBAIEF,eAAeC,UAJjB;AAAA;AAAA;AAAA;;AAKHD;AALG;AAAA,mBAMgBF,8BACdC,MADc;AAEjBI,oBAAMH;AAFW,eANhB;;AAAA;AAMGI,gBANH;;AAUHH,yBAAaG,KAAKC,MAAL,CAAYJ,UAAzB;AACAC,mBAAOA,KAAKI,MAAL,CAAYF,KAAKG,OAAjB,CAAP;AAXG;AAAA;;AAAA;AAAA,6CAaEL,IAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeM,S;;;;;AAgBtB;;;;;;;;AAWA;;;;;yEAIO,kBAAqBC,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA,8CACE,sBAAY,mBAAW;AAC5BC,yBAAWC,OAAX,EAAoBF,CAApB;AACD,aAFM,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeG,K;;;;;QA9CNC,W,GAAAA,W;QAqCAC,I,GAAAA,I;;;;AArCT,SAASD,WAAT,CAAqBE,KAArB,EAA4B;AACjC,MAAIC,MAAMC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxB,WAAOA,MAAMG,GAAN,CAAU;AAAA,aAAQL,YAAYM,IAAZ,CAAR;AAAA,KAAV,CAAP;AACD,GAFD,MAEO,IAAI,QAAOJ,KAAP,uDAAOA,KAAP,OAAiB,QAArB,EAA+B;AACpC,QAAMX,OAAO,EAAb;AACA,SAAK,IAAMgB,GAAX,IAAkBL,KAAlB,EAAyB;AACvB,UAAIK,IAAI,CAAJ,MAAW,GAAX,IAAkBL,MAAMM,cAAN,CAAqBD,GAArB,CAAtB,EAAiD;AAC/ChB,aAAKgB,GAAL,IAAYP,YAAYE,MAAMK,GAAN,CAAZ,CAAZ;AACD;AACF;AACD,WAAOhB,IAAP;AACD;AACD,SAAOW,KAAP;AACD;;AAwBM,SAASD,IAAT,CAAcQ,SAAd,EAAyBC,KAAzB,EAA6C;AAAA,oCAAVC,QAAU;AAAVA,YAAU;AAAA;;AAClD,OAAKV,IAAL,cAAUS,KAAV,SAAoBC,QAApB;AACA,OAAKV,IAAL,cAAUQ,SAAV,EAAqBC,KAArB,SAA+BC,QAA/B;AACD","file":"utils.js","sourcesContent":["export function extractData(model) {\n  if (Array.isArray(model)) {\n    return model.map(item => extractData(item));\n  } else if (typeof model === 'object') {\n    const data = {};\n    for (const key in model) {\n      if (key[0] !== '_' && model.hasOwnProperty(key)) {\n        data[key] = extractData(model[key]);\n      }\n    }\n    return data;\n  }\n  return model;\n}\n\nexport async function fetchList(fn, params = {}) {\n  let fetchedPages = 0;\n  let totalPages = 1;\n  let list = [];\n  while (fetchedPages < totalPages) {\n    fetchedPages++;\n    const data = await fn({\n      ...params,\n      page: fetchedPages,\n    });\n    totalPages = data.paging.totalPages;\n    list = list.concat(data.records);\n  }\n  return list;\n}\n\n/**\n * @function\n * @param {String} eventType\n * @param {String} event\n * @description Helper function to emit eventTyped events and the event itself\n */\nexport function emit(eventType, event, ...payloads) {\n  this.emit(event, ...payloads);\n  this.emit(eventType, event, ...payloads);\n}\n\n/**\n * @function\n * @param {Number} t\n */\nexport async function sleep(t) {\n  return new Promise(resolve => {\n    setTimeout(resolve, t);\n  });\n}\n"]}