{"version":3,"sources":["lib/contactHelper.js"],"names":["addPhoneToContact","uniqueContactItems","sortContactItemsByName","groupByFirstLetterOfName","filterContacts","contact","phone","type","phoneNumber","existedPhone","phoneNumbers","find","number","phoneType","push","result","items","filter","value","index","arr","indexOf","hash","unique","forEach","item","itemId","id","NON_ALPHABET_RE","sort","a","b","name1","name","toLowerCase","replace","name2","isNumber1","test","isNumber2","length","localeCompare","POUND_SIGN","contactItems","groups","group","letter","toLocaleUpperCase","caption","contacts","searchFilter","searchText","firstName","lastName","extensionNumber","x"],"mappings":"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","file":"contactHelper.js","sourcesContent":["import isBlank from './isBlank';\nimport normalizeNumber from './normalizeNumber';\n\nexport function addPhoneToContact(contact, phone, type) {\n  const phoneNumber = normalizeNumber({ phoneNumber: phone });\n  if (isBlank(phoneNumber)) {\n    return;\n  }\n  const existedPhone = contact.phoneNumbers.find(\n    number => number && number.phoneNumber === phone\n  );\n  if (existedPhone) {\n    existedPhone.phoneType = type;\n  } else {\n    contact.phoneNumbers.push({\n      phoneNumber: phone,\n      phoneType: type,\n    });\n  }\n}\n\nexport function uniqueContactItems(result) {\n  let items = result || [];\n  // remove duplicated referencing\n  items = items.filter((value, index, arr) =>\n    arr.indexOf(value) === index\n  );\n  // remove duplicated items by id\n  const hash = {};\n  const unique = [];\n  items.forEach((item) => {\n    const itemId = `${item.type}${item.id}`;\n    if (!hash[itemId]) {\n      hash[itemId] = 1;\n      unique.push(item);\n    }\n  });\n  return unique;\n}\n\nconst NON_ALPHABET_RE = /[^a-z]/i;\nexport function sortContactItemsByName(result) {\n  const items = result || [];\n  items.sort((a, b) => {\n    const name1 = (a.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n    const name2 = (b.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n    const isNumber1 = /^[0-9]/.test(name1);\n    const isNumber2 = /^[0-9]/.test(name2);\n    // Empty string should be put at the end\n    if (name1.length <= 0 || name2.length <= 0) {\n      return -name1.localeCompare(name2);\n    }\n    if (isNumber1 && isNumber2) {\n      return name1.localeCompare(name2);\n    }\n    if (isNumber1 || isNumber2) {\n      // put number name at last\n      return -name1.localeCompare(name2);\n    }\n    if (NON_ALPHABET_RE.test(name1[0]) && !NON_ALPHABET_RE.test(name2[0])) {\n      return 1;\n    }\n    if (!NON_ALPHABET_RE.test(name1[0]) && NON_ALPHABET_RE.test(name2[0])) {\n      return -1;\n    }\n    return name1.localeCompare(name2);\n  });\n  return items;\n}\n\nconst POUND_SIGN = '#';\nexport function groupByFirstLetterOfName(contactItems) {\n  const groups = [];\n  if (contactItems && contactItems.length) {\n    let group;\n    contactItems.forEach((contact) => {\n      const name = (contact.name || '').replace(/^\\s\\s*/, ''); // trim start\n      let letter = null;\n      if (name.length <= 0 || NON_ALPHABET_RE.test(name[0])) {\n        letter = POUND_SIGN;\n      } else {\n        letter = (name[0] || '').toLocaleUpperCase();\n      }\n      if (!group || group.caption !== letter) {\n        group = {\n          contacts: [],\n          caption: letter,\n          id: letter,\n        };\n        groups.push(group);\n      }\n      group.contacts.push(contact);\n    });\n  }\n  return groups;\n}\n\nexport function filterContacts(contacts, searchFilter) {\n  const items = contacts;\n  if (!searchFilter || isBlank(searchFilter)) {\n    return items;\n  }\n  const searchText = searchFilter.toLowerCase();\n  return items.filter((item) => {\n    const name = `${item.firstName} ${item.lastName}`;\n    if (\n      name.toLowerCase().indexOf(searchText) >= 0 ||\n      (item.extensionNumber && item.extensionNumber.indexOf(searchText) >= 0) ||\n      (item.phoneNumbers && item.phoneNumbers.find(x => x.phoneNumber.indexOf(searchText) >= 0))\n    ) {\n      return true;\n    }\n    return false;\n  });\n}\n"]}