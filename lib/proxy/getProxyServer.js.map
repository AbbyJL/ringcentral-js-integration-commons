{"version":3,"sources":["lib/proxy/getProxyServer.js"],"names":["getProxyServer","symbols","Module","options","actions","getState","state","module","transport","Error","on","events","request","requestId","payload","type","functionPath","args","execute","split","slice","pathTokens","fnName","pop","forEach","token","result","response","error","sync","reducer","prefix"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBASwBA,c;;AATxB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,UAAU,wBAAc,CAC5B,SAD4B,CAAd,CAAhB;;AAIe,SAASD,cAAT,CAAwBE,MAAxB,EAAgC;AAC7C;AAAA;;AACE,oBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AAAA,mKAEdA,OAFc;AAGjBC;AAHiB;;AAKnB,uCAAgB,QAAhB,EAA0B,IAAIF,MAAJ,4BACrBC,OADqB;AAExBE,kBAAU;AAAA,iBAAM,MAAKC,KAAL,CAAWC,MAAjB;AAAA;AAFc,SAA1B;;AALmB,UAWjBC,SAXiB,GAYfL,OAZe,CAWjBK,SAXiB;;AAanB,UAAI,CAACA,SAAL,EAAgB;AACd,cAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AACD;AACDD,gBAAUE,EAAV,CAAaF,UAAUG,MAAV,CAAiBC,OAA9B;AAAA,8EAAuC,kBAAMA,OAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEnCC,2BAFmC,GAQjCD,OARiC,CAEnCC,SAFmC;AAAA,qCAQjCD,OARiC,CAGnCE,OAHmC;AAIjCC,sBAJiC,oBAIjCA,IAJiC;AAKjCC,8BALiC,oBAKjCA,YALiC;AAMjCC,sBANiC,oBAMjCA,IANiC;;AAAA,wBAUjCF,SAAS,MAAKX,OAAL,CAAac,OAVW;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWnC;AAXmC,oDAYXF,aAAaG,KAAb,CAAmB,GAAnB,EAAwBC,KAAxB,CAA8B,CAA9B,CAZW;AAAA;AAYzBC,sCAZyB;AAa7BC,kCAb6B,GAapBD,WAAWE,GAAX,EAboB;AAc/BhB,kCAd+B,GActB,MAAKA,MAdiB;;AAenCc,uCAAWG,OAAX,CAAmB,iBAAS;AAC1BjB,uCAASA,OAAOkB,KAAP,CAAT;AACD,6BAFD;AAfmC;AAAA;AAAA,mCAmBZ,mBAAOH,MAAP,kDAAkBL,IAAlB,EAnBY;;AAAA;AAmB3BS,kCAnB2B;;AAoBjClB,sCAAUmB,QAAV,CAAmB;AACjBd,kDADiB;AAEjBa;AAFiB,6BAAnB;AApBiC;AAAA;;AAAA;AAAA;AAAA;;AAyBjClB,sCAAUmB,QAAV,CAAmB;AACjBd,kDADiB;AAEjBe;AAFiB,6BAAnB;;AAzBiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA8B9B,sBAAIb,SAAS,MAAKX,OAAL,CAAayB,IAA1B,EAAgC;AACrCrB,8BAAUmB,QAAV,CAAmB;AACjBd,0CADiB;AAEjBa,8BAAQ,MAAKpB;AAFI,qBAAnB;AAID,mBALM,MAKA;AACLE,8BAAUmB,QAAV,CAAmB;AACjBd,0CADiB;AAEjBe,6BAAO,IAAInB,KAAJ,qBAA2BM,IAA3B;AAFU,qBAAnB;AAID;;AAxCoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvC;;AAAA;AAAA;AAAA;AAAA;;AA2CA,YAAKd,QAAQ6B,OAAb,IAAwB,qCACtB,MAAKC,MADiB,EAEtBvB,SAFsB,EAGtB,MAAKD,MAAL,CAAYuB,OAHU,CAAxB;AA3DmB;AAgEpB;;AAjEH;AAAA;AAAA,0BAkEgB;AACZ,eAAO,KAAK7B,QAAQ6B,OAAb,CAAP;AACD;AApEH;AAAA;AAAA;AAsED","file":"getProxyServer.js","sourcesContent":["import SymbolMap from 'data-types/symbol-map';\nimport RcModule, { addModule } from '..//RcModule';\nimport proxyActions from './proxyActions';\nimport getProxyServerReducer from './getProxyServerReducer';\n\nconst symbols = new SymbolMap([\n  'reducer',\n]);\n\nexport default function getProxyServer(Module) {\n  return class extends RcModule {\n    constructor(options) {\n      super({\n        ...options,\n        actions: proxyActions,\n      });\n      this::addModule('module', new Module({\n        ...options,\n        getState: () => this.state.module,\n      }));\n\n      const {\n        transport,\n      } = options;\n      if (!transport) {\n        throw new Error('options.transport is missing');\n      }\n      transport.on(transport.events.request, async request => {\n        const {\n          requestId,\n          payload: {\n            type,\n            functionPath,\n            args,\n          },\n        } = request;\n\n        if (type === this.actions.execute) {\n          // omit the root part of the path\n          const [...pathTokens] = functionPath.split('.').slice(1);\n          const fnName = pathTokens.pop();\n          let module = this.module;\n          pathTokens.forEach(token => {\n            module = module[token];\n          });\n          try {\n            const result = await module[fnName](...args);\n            transport.response({\n              requestId,\n              result,\n            });\n          } catch (error) {\n            transport.response({\n              requestId,\n              error,\n            });\n          }\n        } else if (type === this.actions.sync) {\n          transport.response({\n            requestId,\n            result: this.state,\n          });\n        } else {\n          transport.response({\n            requestId,\n            error: new Error(`request type '${type} not recognized`),\n          });\n        }\n      });\n\n      this[symbols.reducer] = getProxyServerReducer(\n        this.prefix,\n        transport,\n        this.module.reducer\n      );\n    }\n    get reducer() {\n      return this[symbols.reducer];\n    }\n  };\n}\n"]}