{"version":3,"sources":["lib/DataFetcher/getDataFetcherReducer.js"],"names":["getDefaultDataReducer","getDefaultTimestampReducer","getDataFetcherReducer","types","state","type","data","cleanOnReset","hasPermission","fetchSuccess","initSuccess","resetSuccess","timestamp","reducers","status"],"mappings":";;;;;;;;;;QAGgBA,qB,GAAAA,qB;QA0BAC,0B,GAAAA,0B;kBAgBQC,qB;;AA7CxB;;AACA;;;;;;AAEO,SAASF,qBAAT,CAA+BG,KAA/B,EAAsC;AAC3C,SAAO,YAKD;AAAA,QALEC,KAKF,uEALU,IAKV;AAAA;AAAA,QAJJC,IAII,QAJJA,IAII;AAAA,QAHJC,IAGI,QAHJA,IAGI;AAAA,iCAFJC,YAEI;AAAA,QAFJA,YAEI,qCAFW,KAEX;AAAA,kCADJC,aACI;AAAA,QADJA,aACI,sCADY,IACZ;;AACJ,YAAQH,IAAR;AACE,WAAKF,MAAMM,YAAX;AACE,eAAOH,IAAP;AACF,WAAKH,MAAMO,WAAX;AACE,YAAIF,aAAJ,EAAmB;AACjB,iBAAOJ,KAAP;AACD;AACD,eAAO,IAAP;AACF,WAAKD,MAAMQ,YAAX;AACE,YAAIJ,YAAJ,EAAkB;AAChB,iBAAO,IAAP;AACD;AACD,eAAOH,KAAP;AACF;AACE,eAAOA,KAAP;AAdJ;AAgBD,GAtBD;AAuBD;;AAEM,SAASH,0BAAT,CAAoCE,KAApC,EAA2C;AAChD,SAAO,YAAqD;AAAA,QAApDC,KAAoD,uEAA5C,IAA4C;AAAA;AAAA,QAApCC,IAAoC,SAApCA,IAAoC;AAAA,QAA9BO,SAA8B,SAA9BA,SAA8B;AAAA,QAAnBL,YAAmB,SAAnBA,YAAmB;;AAC1D,YAAQF,IAAR;AACE,WAAKF,MAAMM,YAAX;AACE,eAAOG,SAAP;AACF,WAAKT,MAAMQ,YAAX;AACE,YAAIJ,YAAJ,EAAkB;AAChB,iBAAO,IAAP;AACD;AACD,eAAOH,KAAP;AACF;AACE,eAAOA,KAAP;AATJ;AAWD,GAZD;AAaD;;AAEc,SAASF,qBAAT,CAA+BC,KAA/B,EAAqD;AAAA,MAAfU,QAAe,uEAAJ,EAAI;;AAClE,SAAO,uDACFA,QADE;AAELC,YAAQ,sCAAuBX,KAAvB;AAFH,KAAP;AAID","file":"getDataFetcherReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../getModuleStatusReducer';\n\nexport function getDefaultDataReducer(types) {\n  return (state = null, {\n    type,\n    data,\n    cleanOnReset = false,\n    hasPermission = true\n  }) => {\n    switch (type) {\n      case types.fetchSuccess:\n        return data;\n      case types.initSuccess:\n        if (hasPermission) {\n          return state;\n        }\n        return null;\n      case types.resetSuccess:\n        if (cleanOnReset) {\n          return null;\n        }\n        return state;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getDefaultTimestampReducer(types) {\n  return (state = null, { type, timestamp, cleanOnReset }) => {\n    switch (type) {\n      case types.fetchSuccess:\n        return timestamp;\n      case types.resetSuccess:\n        if (cleanOnReset) {\n          return null;\n        }\n        return state;\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getDataFetcherReducer(types, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n  });\n}\n"]}