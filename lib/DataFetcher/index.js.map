{"version":3,"sources":["lib/DataFetcher/index.js"],"names":["DEFAULT_TTL","DEFAULT_RETRY","DataFetcher","auth","client","storage","subscription","tabManager","ttl","timeToRetry","polling","name","actionTypes","enumMap","prefix","getReducer","getDataReducer","getTimestampReducer","dataStorageKey","timestampStorageKey","fetchFunction","subscriptionFilters","subscriptionHandler","options","Error","_onStateChange","_auth","loginStatus","loggedIn","_storage","ready","_subscription","status","pending","store","dispatch","type","init","_tabManager","active","isFreshLogin","timestamp","Date","now","_ttl","fetchData","_polling","_startPolling","_retry","_subscriptionFilters","subscribe","initSuccess","_clearTimeout","_promise","resetSuccess","_subscriptionHandler","message","_client","_timeToRetry","_fetchFunction","_dataStorageKey","_timestampStorageKey","_reducer","registerReducer","key","reducer","_timeoutId","clearTimeout","t","setTimeout","fetch","ownerId","data","fetchSuccess","fetchError","error","_fetchData","getItem","state"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../RcModule';\nimport { prefixEnum } from '../Enum';\nimport getDataFetcherReducer, {\n  getDefaultDataReducer,\n  getDefaultTimestampReducer,\n} from './getDataFetcherReducer';\nimport moduleStatus from '../../enums/moduleStatus';\nimport loginStatus from '../../modules/Auth/loginStatus';\nimport actionTypesBase from './actionTypesBase';\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_RETRY = 62 * 1000;\n\nexport default class DataFetcher extends RcModule {\n  constructor({\n    auth,\n    client,\n    storage,\n    subscription,\n    tabManager,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_RETRY,\n    polling = false,\n    name,\n    actionTypes = prefixEnum({ enumMap: actionTypesBase, prefix: name }),\n    getReducer = getDataFetcherReducer,\n    getDataReducer = getDefaultDataReducer,\n    getTimestampReducer = getDefaultTimestampReducer,\n    dataStorageKey = `${name}Data`,\n    timestampStorageKey = `${name}Timestamp`,\n    fetchFunction,\n    subscriptionFilters,\n    subscriptionHandler,\n    ...options\n  }) {\n    if (!name) {\n      throw new Error('name must be defined');\n    }\n    if (typeof fetchFunction !== 'function') {\n      throw new Error('fetchFunction must be a asynchronous function');\n    }\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._storage = storage;\n    this._client = client;\n    this._subscription = subscription;\n    this._tabManager = tabManager;\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._polling = polling;\n    this._fetchFunction = fetchFunction;\n    this._subscriptionFilters = subscriptionFilters;\n    this._subscriptionHandler = subscriptionHandler;\n\n    this._dataStorageKey = dataStorageKey;\n    this._timestampStorageKey = timestampStorageKey;\n    this._reducer = getReducer(this.actionTypes);\n\n    this._storage.registerReducer({\n      key: this._dataStorageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n    this._storage.registerReducer({\n      key: this._timestampStorageKey,\n      reducer: getTimestampReducer(this.actionTypes),\n    });\n\n    this._promise = null;\n    this._timeoutId = null;\n  }\n  _onStateChange = async () => {\n    if (\n      this._auth.loginStatus === loginStatus.loggedIn &&\n      this._storage.ready &&\n      (!this._subscription || this._subscription.ready) &&\n      this.status === moduleStatus.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (\n        (!this._tabManager || this._tabManager.active) &&\n        (\n          this._auth.isFreshLogin ||\n          !this.timestamp ||\n          Date.now() - this.timestamp > this._ttl\n        )\n      ) {\n        await this.fetchData();\n      } else {\n        if (this._polling) {\n          this._startPolling();\n        } else {\n          this._retry();\n        }\n      }\n      if (this._subscription && this._subscriptionFilters) {\n        this._subscription.subscribe(this._subscriptionFilters);\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._auth.loggedIn ||\n        !this._storage.ready ||\n        (this._subscription && !this._subscription.ready)\n      ) &&\n      this.ready\n    ) {\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready &&\n      this._subscription &&\n      this._subscription.ready &&\n      this._subscriptionHandler &&\n      this._subscription.message\n    ) {\n      this._subscriptionHandler(this._subscription.message);\n    }\n  }\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get data() {\n    return this._storage.getItem(this._dataStorageKey);\n  }\n\n  get timestamp() {\n    return this._storage.getItem(this._timestampStorageKey);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatus.ready;\n  }\n\n  _clearTimeout() {\n    if (this._timeoutId) clearTimeout(this._timeoutId);\n  }\n  _startPolling(t = this.timestamp + this._ttl + 10 - Date.now()) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this._tabManager || this._tabManager.active) {\n        if (!this.timestamp || Date.now() - this.timestamp > this._ttl) {\n          this.fetchData();\n        } else {\n          this._startPolling();\n        }\n      } else {\n        if (this.timestamp && Date.now() - this.timestamp < this._ttl) {\n          this._startPolling();\n        } else {\n          this._startPolling(this._timeToRetry);\n        }\n      }\n    }, t);\n  }\n  _retry(t = this._timeToRetry) {\n    this._clearTimeout();\n    this._timeoutId = setTimeout(() => {\n      this._timeoutId = null;\n      if (!this.timestamp || Date.now() - this.timestamp > this._ttl) {\n        if (!this._tabManager || this._tabManager.active) {\n          this.fetchData();\n        } else {\n          // continue retry checks in case tab becomes main tab\n          this._retry();\n        }\n      }\n    }, t);\n  }\n\n  async _fetchData() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const ownerId = this._auth.ownerId;\n    try {\n      const data = await this._fetchFunction();\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          data,\n          timestamp: Date.now(),\n        });\n        if (this._polling) {\n          this._startPolling();\n        }\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this._promise = null;\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        if (this._polling) {\n          this._startPolling(this._timeToRetry);\n        } else {\n          this._retry();\n        }\n        throw error;\n      }\n    }\n  }\n  fetchData() {\n    if (!this._promise) {\n      this._promise = this._fetchData();\n    }\n    return this._promise;\n  }\n}\n"]}