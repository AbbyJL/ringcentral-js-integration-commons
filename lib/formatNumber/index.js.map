{"version":3,"sources":["/src/lib/formatNumber/index.js"],"names":["formatNumber","SWITCH_US_CA","US","CA","phoneNumber","removeExtension","countryCode","areaCode","cleaned","hasPlus","withoutPlus","substring","split","number","extension","length","formattedNumber","numberWithAreaCode","switchedFormat"],"mappings":";;;;;;;;;;kBAiBwBA,Y;;AAjBxB;;AACA;;;;;;AAEA,IAAMC,eAAe;AACnBC,MAAI,IADe;AAEnBC,MAAI;AAFe,CAArB;;AAKA;;;;;;;;;AASe,SAASH,YAAT,OAKZ;AAAA,MAJDI,WAIC,QAJDA,WAIC;AAAA,kCAHDC,eAGC;AAAA,MAHDA,eAGC,wCAHiB,KAGjB;AAAA,8BAFDC,WAEC;AAAA,MAFDA,WAEC,oCAFa,IAEb;AAAA,2BADDC,QACC;AAAA,MADDA,QACC,iCADU,EACV;;AACD,MAAMC,UAAU,gCAAeJ,WAAf,CAAhB;AACA,MAAMK,UAAUD,QAAQ,CAAR,MAAe,GAA/B;AACA,MAAME,cAAcD,UAAUD,QAAQG,SAAR,CAAkB,CAAlB,CAAV,GAAiCH,OAArD;;AAEA,MACEE,gBAAgB,EAAhB,IACAA,YAAY,CAAZ,MAAmB,GAFrB,CAEyB;AAFzB,IAGE,OAAOA,WAAP;;AARD,2BAaGA,YAAYE,KAAZ,CAAkB,GAAlB,CAbH;AAAA;AAAA,MAWCC,MAXD;AAAA,MAYCC,SAZD;;AAeD;;;AACA,MAAID,OAAOE,MAAP,IAAiB,CAArB,EAAwB,OAAOF,MAAP;;AAExB,MAAIG,wBAAJ;AACA,MAAIV,gBAAgB,IAAhB,IAAwBA,gBAAgB,IAA5C,EAAkD;AAChD,QAAMW,qBAAsB,CAACR,OAAD,IAAYI,OAAOE,MAAP,KAAkB,CAA9B,IAAmCR,aAAa,EAAjD,GACxBA,WAAWM,MADa,GAEzBA,MAFF;AAGAG,sBAAkB,8BAAYV,WAAZ,QAA4BG,UAAU,GAAV,GAAgB,EAA5C,IAAiDQ,kBAAjD,CAAlB;AACA,QAAID,gBAAgB,CAAhB,MAAuB,GAAvB,IAA8BH,OAAO,CAAP,MAAc,GAAhD,EAAqD;AACnD,UAAMK,iBAAiB,8BACrBjB,aAAaK,WAAb,CADqB,QAEjBW,kBAFiB,CAAvB;AAIA,UAAIC,eAAe,CAAf,MAAsB,GAA1B,EAA+BF,kBAAkBE,cAAlB;AAChC;AACF,GAZD,MAYO;AACLF,sBAAkB,8BAAYV,WAAZ,QAA4BG,UAAU,GAAV,GAAgB,EAA5C,IAAiDI,MAAjD,CAAlB;AACD;;AAED,SAAOC,aAAa,CAACT,eAAd,GACFW,eADE,WACmBF,SADnB,GAELE,eAFF;AAGD","file":"index.js","sourcesContent":["import { formatLocal } from 'phoneformat.js';\nimport cleanNumber from '../cleanNumber';\n\nconst SWITCH_US_CA = {\n  US: 'CA',\n  CA: 'US',\n};\n\n/**\n * @function\n * @description Format phone numbers\n * @param {String} params.phoneNumber\n * @param {Boolean} params.removeExtension\n * @param {String} params.countryCode\n * @param {String} params.areaCode\n * @return {String}\n */\nexport default function formatNumber({\n  phoneNumber,\n  removeExtension = false,\n  countryCode = 'US',\n  areaCode = '',\n}) {\n  const cleaned = cleanNumber(`${phoneNumber}`);\n  const hasPlus = cleaned[0] === '+';\n  const withoutPlus = hasPlus ? cleaned.substring(1) : cleaned;\n\n  if (\n    withoutPlus === '' ||\n    withoutPlus[0] === '*' // service number\n  ) return withoutPlus;\n\n  const [\n    number,\n    extension,\n  ] = withoutPlus.split('*');\n\n  // extension or special number\n  if (number.length <= 5) return number;\n\n  let formattedNumber;\n  if (countryCode === 'CA' || countryCode === 'US') {\n    const numberWithAreaCode = (!hasPlus && number.length === 7 && areaCode !== '') ?\n      (areaCode + number) :\n      number;\n    formattedNumber = formatLocal(countryCode, `${hasPlus ? '+' : ''}${numberWithAreaCode}`);\n    if (formattedNumber[0] === '+' && number[0] === '1') {\n      const switchedFormat = formatLocal(\n        SWITCH_US_CA[countryCode],\n        `+${numberWithAreaCode}`\n      );\n      if (switchedFormat[0] !== '+') formattedNumber = switchedFormat;\n    }\n  } else {\n    formattedNumber = formatLocal(countryCode, `${hasPlus ? '+' : ''}${number}`);\n  }\n\n  return extension && !removeExtension ?\n    `${formattedNumber} * ${extension}` :\n    formattedNumber;\n}\n"]}