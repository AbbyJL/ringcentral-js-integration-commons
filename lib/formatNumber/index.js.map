{"version":3,"sources":["lib/formatNumber/index.js"],"names":["formatNumber","SWITCH_US_CA","US","CA","phoneNumber","removeExtension","countryCode","areaCode","international","hasPlus","number","extension","isServiceNumber","length","formattedNumber","numberWithAreaCode","switchedFormat"],"mappings":";;;;;kBAiBwBA,Y;;AAjBxB;;AACA;;;;;;AAEA,IAAMC,eAAe;AACnBC,MAAI,IADe;AAEnBC,MAAI;AAFe,CAArB;;AAKA;;;;;;;;;AASe,SAASH,YAAT,OAMZ;AAAA,MALDI,WAKC,QALDA,WAKC;AAAA,kCAJDC,eAIC;AAAA,MAJDA,eAIC,wCAJiB,KAIjB;AAAA,8BAHDC,WAGC;AAAA,MAHDA,WAGC,oCAHa,IAGb;AAAA,2BAFDC,QAEC;AAAA,MAFDA,QAEC,iCAFU,EAEV;AAAA,gCADDC,aACC;AAAA,MADDA,aACC,sCADe,KACf;;AAAA,qBAMG,2BAAYJ,WAAZ,CANH;AAAA,MAECK,OAFD,gBAECA,OAFD;AAAA,MAGCC,MAHD,gBAGCA,MAHD;AAAA,MAICC,SAJD,gBAICA,SAJD;AAAA,MAKCC,eALD,gBAKCA,eALD;;AAQD,MAAIA,eAAJ,EAAqB,aAAWF,MAAX;AACrB;AACA,MAAIA,WAAW,EAAX,IAAiBA,OAAOG,MAAP,IAAiB,CAAtC,EAAyC,OAAOH,MAAP;;AAEzC,MAAII,wBAAJ;AACA,MAAIR,gBAAgB,IAAhB,IAAwBA,gBAAgB,IAA5C,EAAkD;AAChD,QAAMS,qBAAsB,CAACN,OAAD,IAAYC,OAAOG,MAAP,KAAkB,CAA9B,IAAmCN,aAAa,EAAjD,GACxBA,WAAWG,MADa,GAEzBA,MAFF;AAGA,QAAIF,aAAJ,EAAmB;AACjBM,wBAAkB,sCAAoBR,WAApB,QAAoCG,UAAU,GAAV,GAAgB,EAApD,IAAyDM,kBAAzD,CAAlB;AACD,KAFD,MAEO;AACLD,wBAAkB,8BAAYR,WAAZ,QAA4BG,UAAU,GAAV,GAAgB,EAA5C,IAAiDM,kBAAjD,CAAlB;AACA,UAAID,gBAAgB,CAAhB,MAAuB,GAAvB,IAA8BJ,OAAO,CAAP,MAAc,GAAhD,EAAqD;AACnD,YAAMM,iBAAiB,8BACrBf,aAAaK,WAAb,CADqB,QAEjBS,kBAFiB,CAAvB;AAIA,YAAIC,eAAe,CAAf,MAAsB,GAA1B,EAA+BF,kBAAkBE,cAAlB;AAChC;AACF;AACF,GAhBD,MAgBO;AACLF,sBAAkBN,gBAChB,sCAAoBF,WAApB,QAAoCG,UAAU,GAAV,GAAgB,EAApD,IAAyDC,MAAzD,CADgB,GAEhB,8BAAYJ,WAAZ,QAA4BG,UAAU,GAAV,GAAgB,EAA5C,IAAiDC,MAAjD,CAFF;AAGD;;AAED,SAAOC,aAAa,CAACN,eAAd,GACFS,eADE,WACmBH,SADnB,GAELG,eAFF;AAGD","file":"index.js","sourcesContent":["import { formatLocal, formatInternational } from 'phoneformat.js';\nimport parseNumber from '../parseNumber';\n\nconst SWITCH_US_CA = {\n  US: 'CA',\n  CA: 'US',\n};\n\n/**\n * @function\n * @description Format phone numbers\n * @param {String} params.phoneNumber\n * @param {Boolean} params.removeExtension\n * @param {String} params.countryCode\n * @param {String} params.areaCode\n * @return {String}\n */\nexport default function formatNumber({\n  phoneNumber,\n  removeExtension = false,\n  countryCode = 'US',\n  areaCode = '',\n  international = false,\n}) {\n  const {\n    hasPlus,\n    number,\n    extension,\n    isServiceNumber,\n  } = parseNumber(phoneNumber);\n\n  if (isServiceNumber) return `*${number}`;\n  // extension or special number\n  if (number === '' || number.length <= 6) return number;\n\n  let formattedNumber;\n  if (countryCode === 'CA' || countryCode === 'US') {\n    const numberWithAreaCode = (!hasPlus && number.length === 7 && areaCode !== '') ?\n      (areaCode + number) :\n      number;\n    if (international) {\n      formattedNumber = formatInternational(countryCode, `${hasPlus ? '+' : ''}${numberWithAreaCode}`);\n    } else {\n      formattedNumber = formatLocal(countryCode, `${hasPlus ? '+' : ''}${numberWithAreaCode}`);\n      if (formattedNumber[0] === '+' && number[0] === '1') {\n        const switchedFormat = formatLocal(\n          SWITCH_US_CA[countryCode],\n          `+${numberWithAreaCode}`\n        );\n        if (switchedFormat[0] !== '+') formattedNumber = switchedFormat;\n      }\n    }\n  } else {\n    formattedNumber = international ?\n      formatInternational(countryCode, `${hasPlus ? '+' : ''}${number}`) :\n      formatLocal(countryCode, `${hasPlus ? '+' : ''}${number}`);\n  }\n\n  return extension && !removeExtension ?\n    `${formattedNumber} * ${extension}` :\n    formattedNumber;\n}\n"]}