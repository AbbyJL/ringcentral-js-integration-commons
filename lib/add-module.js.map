{"version":3,"sources":["lib/add-module.js"],"names":[],"mappings":";;;;;;;;;;kBASwB,S;;;;AARxB;;;;;;;;AAQe,SAAS,SAAT,CAAmB,IAAnB,EAAyB,MAAzB,EAAiC;AAC9C,MAAU,OAAO,SAAP,CAAiB,cAAvB,YAAsC,IAAtC,CAAJ,EAAiD;AAC/C,UAAM,IAAI,KAAJ,cAAqB,IAArB,yBAAN;AACD;AACD,gCAAsB,IAAtB,EAA4B,IAA5B,EAAkC;AAChC,OADgC,iBAC1B;AACJ,aAAO,MAAP;AACD,KAH+B;;AAIhC,gBAAY;AAJoB,GAAlC;AAMD","file":"add-module.js","sourcesContent":["\n/**\n * @function addModule\n * @param {String} name - Name of the module. Also used for the property name.\n * @param {any} module - The module to be attached, can be any type.\n * @description Intended to be used as an instance function. Either use\n *  the bind operator (target::addModule('testmodule', {})), or\n *  use call/apply (addModule.call(target, 'testmodule', {})).\n */\nexport default function addModule(name, module) {\n  if (this::Object.prototype.hasOwnProperty(name)) {\n    throw new Error(`module '${name}' already exists...`);\n  }\n  Object.defineProperty(this, name, {\n    get() {\n      return module;\n    },\n    enumerable: true,\n  });\n}\n"]}