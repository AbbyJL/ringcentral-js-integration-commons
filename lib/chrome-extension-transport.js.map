{"version":3,"sources":["lib/chrome-extension-transport.js"],"names":["TIMEOUT","events","symbols","ChromeExtensionServerTransport","ports","deferred","chrome","runtime","onConnect","addListener","port","name","add","onMessage","type","requestId","payload","request","set","emit","onDisconnect","delete","result","error","has","get","postMessage","response","forEach","push","ChromeExtensionClientTransport","connect","msg","reject","resolve","v4","promise","timeout","setTimeout","Error","then","clearTimeout","catch"],"mappings":"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","file":"chrome-extension-transport.js","sourcesContent":["import Emitter from './Emitter';\nimport SymbolMap from 'data-types/symbol-map';\nimport ActionMap from './ActionMap';\nimport uuid from 'uuid';\n\n/* global chrome */\n\nconst TIMEOUT = 90 * 1000;\n\nconst events = new ActionMap([\n  'push',\n  'reponse',\n  'request',\n]);\n\nconst symbols = new SymbolMap([\n  'ports',\n  'port',\n  'deferred',\n]);\n\nexport class ChromeExtensionServerTransport extends Emitter {\n  constructor() {\n    super();\n    this[symbols.ports] = new Set();\n    this[symbols.deferred] = new Map();\n    chrome.runtime.onConnect.addListener(port => {\n      if (port.name === 'transport') {\n        this[symbols.ports].add(port);\n        port.onMessage.addListener(({ type, requestId, payload }) => {\n          if (type === events.request && requestId && payload) {\n            this[symbols.deferred].set(requestId, port);\n            this.emit(events.request, {\n              requestId,\n              payload,\n            });\n          }\n        });\n\n        port.onDisconnect.addListener(() => {\n          this[symbols.ports].delete(port);\n        });\n      }\n    });\n  }\n  get events() {\n    return events;\n  }\n  response({ requestId, result, error }) {\n    if (this[symbols.deferred].has(requestId)) {\n      const port = this[symbols.deferred].get(requestId);\n      this[symbols.deferred].delete(requestId);\n      port.postMessage({\n        type: events.response,\n        requestId,\n        result,\n        error,\n      });\n    }\n  }\n  push({ payload }) {\n    this[symbols.ports].forEach(port => {\n      port.postMessage({\n        type: events.push,\n        payload,\n      });\n    });\n  }\n}\n\nexport class ChromeExtensionClientTransport extends Emitter {\n  constructor() {\n    super();\n    this[symbols.deferred] = new Map();\n    this[symbols.port] = chrome.runtime.connect({ name: 'transport' });\n    this[symbols.port].onMessage.addListener((msg) => {\n      const {\n        type,\n        payload,\n        requestId,\n        result,\n        error,\n      } = msg;\n      switch (type) {\n        case events.push:\n          if (payload) {\n            this.emit(events.push, payload);\n          }\n          break;\n        case events.response:\n          if (requestId && this[symbols.deferred].has(requestId)) {\n            if (error) {\n              this[symbols.deferred].get(requestId).reject(error);\n            } else {\n              this[symbols.deferred].get(requestId).resolve(result);\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    });\n  }\n  async request({ payload }) {\n    const requestId = uuid.v4();\n    const promise = new Promise((resolve, reject) => {\n      this[symbols.port].postMessage({\n        type: events.request,\n        requestId,\n        payload,\n      });\n      this[symbols.deferred].set(requestId, {\n        resolve,\n        reject,\n      });\n    });\n    let timeout = setTimeout(() => {\n      timeout = null;\n      this[symbols.deferred].get(requestId).reject(new Error('Response Timeout'));\n    }, TIMEOUT);\n    promise.then(result => {\n      if (timeout) clearTimeout(timeout);\n      this[symbols.deferred].delete(requestId);\n      return Promise.resolve(result);\n    }).catch(error => {\n      if (timeout) clearTimeout(timeout);\n      this[symbols.deferred].delete(requestId);\n      return Promise.reject(error);\n    });\n    return promise;\n  }\n  get events() {\n    return events;\n  }\n}\n"]}