{"version":3,"sources":["integration-test/spec-modules/composeText.js"],"names":["auth","client","account","alert","regionSettings","composeText","messageSender","describe","timeout","conditionalDescribe","isLoginSuccess","skip","console","error","it","expect","senderNumber","to","equals","senderNumbersList","updateSenderNumber","logout","loginStatus","notLoggedIn","login","loggedIn","updateTypingToNumber","typingToNumber","cleanTypingToNumber","updateMessageText","messageText","beforeEach","clean","addToNumber","phoneNumber","toNumbers","deep","removeToNumber","clientHistoryRequest","send","response","include","keys","type","subject","rawRequest","getRawResponse","endPoints","sms","equal","companyPager","smsRequest","pagerRequest","dismissAll","state","messages","length","isAlertClear","str","Array","join","recipientNumberInvalids","not","undefined","textTooLong","noToNumber","setData","countryCode","areaCode","noAreaCode","textEmpty","idle","recipientsEmpty","notAnExtension","specialNumber","debug","notSmsToExtension"],"mappings":"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","file":"composeText.js","sourcesContent":["import loginStatus from '../..//modules/Auth/loginStatus';\nimport messageSenderMessages from '../..//modules/MessageSender/messageSenderMessages';\nimport { containsErrorMessage, ensureLogin } from '../utils/HelpUtil';\nimport { waitUntilEqual, waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\n\nexport default (auth, client, account, alert, regionSettings, composeText, messageSender) => {\n  describe('ComposeText', async function () {\n    this.timeout(20000);\n    let conditionalDescribe = describe;\n    const isLoginSuccess = await ensureLogin(auth, account);\n    if (!isLoginSuccess) {\n      conditionalDescribe = describe.skip;\n      console.error('Skip test case as failed to login with credential ', account);\n    }    \n    conditionalDescribe('Should Init Successfully with Deafult Setting', () => {\n      it('Should Set Sender Number with First SmsSender Phone Number by Default', () => {\n        expect(composeText.senderNumber).to.equals(messageSender.senderNumbersList[0]);\n      });\n    });\n\n    conditionalDescribe('Should Save Sender Number', () => {\n      it('Should Update Sender Number After User Change Sender Number', () => {\n        composeText.updateSenderNumber(messageSender.senderNumbersList[1]);\n        expect(composeText.senderNumber).to.equals(messageSender.senderNumbersList[1]);\n      });\n\n      it('Should Remember Sender Number After Logout', async () => {\n        composeText.updateSenderNumber(messageSender.senderNumbersList[1]);\n        auth.logout();\n        await waitUntilEqual(() => auth.loginStatus, 'LoginStatus', loginStatus.notLoggedIn, 3);\n        auth.login({\n          ...account\n        });\n        await waitUntilEqual(() => auth.loginStatus, 'LoginStatus', loginStatus.loggedIn, 3);\n        waitInSeconds(2);\n        expect(composeText.senderNumber).to.equals(messageSender.senderNumbersList[1]);\n      });\n    });\n\n    conditionalDescribe('Should Update Typing Number', () => {\n      it('Should Update Typing Number When User Typing Number', () => {\n        composeText.updateTypingToNumber('123');\n        expect(composeText.typingToNumber).to.equals('123');\n      });\n\n      it('Should Clean Typing Number When User Click Clean Button', () => {\n        composeText.updateTypingToNumber('123');\n        composeText.cleanTypingToNumber();\n        expect(composeText.typingToNumber).to.equals('');\n      });\n    });\n\n    conditionalDescribe('Should Update Message Text', () => {\n      it('Should Update Message Text When User Type', () => {\n        composeText.updateMessageText('1234');\n        expect(composeText.messageText).to.equals('1234');\n      });\n    });\n\n    conditionalDescribe('Should Update ToNumbers', () => {\n      beforeEach(() => {\n        composeText.clean();\n      });\n\n      it('Should Add Number to Selected Number List to ToNumbers When User Add it', () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        expect(composeText.toNumbers).to.deep.equals([{ phoneNumber: '+18558990011' }]);\n      });\n\n      it('Should Not Repeat Add Number to Selected Number List When User had add it', () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        expect(composeText.toNumbers).to.deep.equals([{ phoneNumber: '+18558990011' }]);\n      });\n\n      it('Should Remove ToNumber from Selected Number List When User Click Remove Button', () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.removeToNumber({ phoneNumber: '+18558990011' });\n        expect(composeText.toNumbers).to.deep.equals([]);\n      });\n    });\n\n    conditionalDescribe('Should Clean All Inputs After User Submit', () => {\n      it('Should Clean All Inputs', () => {\n        composeText.updateTypingToNumber('123');\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.updateMessageText('1234');\n        composeText.clean();\n        expect(composeText.toNumbers).to.deep.equals([]);\n        expect(composeText.typingToNumber).to.equals('');\n        expect(composeText.messageText).to.equals('');\n      });\n    });\n\n    conditionalDescribe('Should Send Message', () => {\n      const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n      beforeEach(() => {\n        composeText.clean();\n      });\n\n      it('Should SMS Message Successfully', async () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.updateMessageText('test');\n        const response = await composeText.send();\n        expect(response).to.include.keys('id', 'conversation');\n        expect(response.type).to.equals('SMS');\n        expect(response.subject).to.equals('test');\n        const rawRequest = clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.sms);\n        expect(JSON.stringify(response)).to.equal(JSON.stringify(rawRequest));\n      });\n\n      it('Should Send Pager Message Successfully', async () => {\n        composeText.clean();\n        composeText.addToNumber({ phoneNumber: '101' });\n        composeText.updateMessageText('test 2');\n        const response = await composeText.send();\n        expect(response).to.include.keys('id', 'conversation');\n        expect(response.type).to.equals('Pager');\n        expect(response.subject).to.equals('test 2');\n        const rawRequest =\n          clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.companyPager);\n        expect(JSON.stringify(response)).to.equal(JSON.stringify(rawRequest));\n      });\n\n      it('Should Send SMS and Pager Message Together Successfully', async () => {\n        composeText.clean();\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.addToNumber({ phoneNumber: '101' });\n        composeText.updateMessageText('test 3');\n        const response = await composeText.send();\n        expect(response).to.include.keys('id', 'conversation');\n        expect(response.subject).to.equals('test 3');\n        const smsRequest = clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.sms);\n        const pagerRequest =\n          clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.companyPager);\n        expect(smsRequest.type).to.equals('SMS');\n        expect(smsRequest.subject).to.equals('test 3');\n        expect(pagerRequest.type).to.equals('Pager');\n        expect(pagerRequest.subject).to.equals('test 3');\n      });\n\n      it('Should Send Pager Message Successfully with Typing Number', async () => {\n        composeText.clean();\n        composeText.updateTypingToNumber('101');\n        composeText.updateMessageText('test 4');\n        const response = await composeText.send();\n        expect(response).to.include.keys('id', 'conversation');\n        expect(response.type).to.equals('Pager');\n        expect(response.subject).to.equals('test 4');\n        const rawRequest =\n          clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.companyPager);\n        expect(JSON.stringify(response)).to.equal(JSON.stringify(rawRequest));\n      });\n    });\n\n    conditionalDescribe('Should Allow Alert', () => {\n      beforeEach(async () => {\n        composeText.clean();\n        const isAlertClear = await waitUntilEqual(() => {\n          alert.dismissAll();\n          return alert.state.messages.length;\n        }, 'Alert', 0, 5);\n        if (!isAlertClear) {\n          console.error('Alert is not cleared after dismissAll');\n          this.skip();\n        }\n      });\n\n      it('Should Alert of recipientNumberInvalids When Typing Number Length more than 30', () => {\n        const str = Array(32).join('x');\n        composeText.updateTypingToNumber(str);\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.recipientNumberInvalids\n        )).to.not.equal(undefined);\n        expect(composeText.typingToNumber).to.equals('');\n      });\n\n      it('Should Alert of textTooLong When Message Text length more than 1000', () => {\n        const str = Array(1002).join('x');\n        composeText.updateMessageText(str);\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.textTooLong\n        )).to.not.equal(undefined);\n        expect(composeText.messageText).to.equals('');\n      });\n\n      it('Should Alert of noToNumber When Send With wrong Typing Number', async () => {\n        composeText.updateTypingToNumber('test');\n        composeText.updateMessageText('test 5');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.noToNumber\n        )).to.not.equal(undefined);\n        expect(response).to.equals(null);\n      });\n\n      it('Should Alert of noAreaCode When Send With wrong Typing Number', async () => {\n        regionSettings.setData({ countryCode: 'CA', areaCode: '' });\n        composeText.updateTypingToNumber('6545672');\n        composeText.updateMessageText('test 6');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.noAreaCode\n        )).to.not.equal(undefined);\n        expect(response).to.equals(null);\n      });\n\n      it('Should Alert of textEmpty When Text Is Empty', async () => {\n        composeText.updateTypingToNumber('+18558990011');\n        composeText.updateMessageText('');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.textEmpty\n        )).to.not.equal(undefined);\n      });\n\n      it('Should Alert of textEmpty When Text Is Empty with Space', async () => {\n        composeText.updateTypingToNumber('+18558990011');\n        composeText.updateMessageText('   ');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.textEmpty\n        )).to.not.equal(undefined);\n        expect(messageSender.idle).to.equals(true);\n        expect(response).to.equals(null);\n      });\n\n      it('Should Alert of recipientsEmpty When User Does Not Input Recepiant Number', async () => {\n        composeText.updateMessageText('test sender');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.recipientsEmpty\n        )).to.not.equal(undefined);\n      });\n\n      it('Should Alert of notAnExtension - Typing Number with a Wrong ExtensionNumber', async () => {\n        composeText.updateTypingToNumber('11111');\n        composeText.updateMessageText('test sender');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.notAnExtension\n        )).to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of notAnExtension - ToNumber List with a Wrong ExtensionNumber', async () => {\n        composeText.addToNumber({ phoneNumber: '1111' });\n        composeText.updateMessageText('test sender');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.notAnExtension\n        )).to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of recipientNumberInvalids - toNumber is invalid', async () => {\n        composeText.addToNumber({ phoneNumber: '199999' });\n        composeText.updateMessageText('test sender');\n        try {\n          await composeText.send();\n        } catch (error) {\n          console.debug('message sender e:', error);\n        }\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.recipientNumberInvalids\n        )).to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of notSmsToExtension - toNumber is phoneNumber with extensionNumber', async () => {\n        composeText.addToNumber({ phoneNumber: '18558990011*101' });\n        composeText.updateMessageText('test sender');\n        try {\n          await composeText.send();\n        } catch (error) {\n          console.debug('message sender e:', error);\n        }\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.notSmsToExtension\n        )).to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of noToNumber - Typing Number is not number', async () => {\n        composeText.addToNumber({ phoneNumber: \"iamn%@onedi!@$%^&()_=\\\\][';/.,~nu><.,,?/mber\" });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.noToNumber\n        )).to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of noToNumber - toNumber include one that is not number', async () => {\n        composeText.addToNumber({ phoneNumber: '101' });\n        composeText.addToNumber({ phoneNumber: 'test' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.noToNumber\n        )).to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of No AreaCode - toNumber is 7 Digital Number with US Dialing Plan without Area Code', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '8990011' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of No AreaCode - toNumber is 7 Digital Number with CA Dialing Plan without Area Code', async () => {\n        regionSettings.setData({ countryCode: 'CA', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '8990011' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Not Alert of Anything - toNumber is 7 Digital Number with CA Dialing Plan with Area Code', async () => {\n        regionSettings.setData({ countryCode: 'CA', areaCode: '855' });\n        composeText.addToNumber({ phoneNumber: '8990011' });\n        composeText.updateMessageText('test sender');\n        try {\n          await composeText.send();\n        } catch (error) {\n          console.debug('message sender e:', error);\n        }\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n        expect(messageSender.idle).to.equals(true);\n      });\n\n      it('Should Not Alert of Anything - toNumber is 7 Digital Number with US Dialing Plan with Area Code', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '855' });\n        composeText.addToNumber({ phoneNumber: '8990011' });\n        composeText.updateMessageText('test sender');\n        try {\n          await composeText.send();\n        } catch (error) {\n          console.debug('message sender e:', error);\n        }\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert Special Number - toNumber is 911 with US Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '911' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert Special Number - toNumber 999 with GB Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '999' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Not Alert Special Number - toNumber 999 with US Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '999' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Not Alert Special Number - toNumber 911 with GB Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '911' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Not Alert Anything - toNumber 101 (Existed Extension/Not Special Number) with US Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '101' });\n        composeText.updateMessageText('test sender');\n        try {\n          await composeText.send();\n        } catch (error) {\n          console.debug('message sender e:', error);\n        }\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert Special Number - toNumber 101 (Existed Extension/Special Number) with GB Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '101' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert notAnExtension - toNumber 102 (No Extension/Not Special Number) with US Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '102' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert notAnExtension - toNumber 998 (No Extension) with US Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '998' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert notAnExtension - toNumber 998 (No Extension) with GB Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '998' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n    });\n  });\n};\n"]}