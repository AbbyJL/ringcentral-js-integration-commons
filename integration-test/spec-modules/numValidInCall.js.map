{"version":3,"sources":["integration-test/spec-modules/numValidInCall.js"],"names":["Auth","Alert","Client","RegionSettings","Call","accountWithMultiDP","_makeCall","toNumber","__toNumber","describe","timeout","conditionalDescribe","isLoginSuccess","skip","console","error","beforeEach","dismissAll","state","messages","length","isAlertClear","it","call","phoneNumber","expect","noToNumber","to","not","equal","undefined","noAreaCode","specialNumber","notAnExtension","setData","countryCode","areaCode"],"mappings":"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","file":"numValidInCall.js","sourcesContent":["import { ensureLogin, containsErrorMessage } from '../utils/HelpUtil';\nimport callErrors from '../../modules/Call/callErrors';\nimport { waitUntilEqual } from '../utils/WaitUtil';\n\nexport default (Auth, Alert, Client, RegionSettings, Call, accountWithMultiDP) => {\n  Call._makeCall = ({ toNumber }) => {\n    Call.__toNumber = toNumber\n  }\n  describe('Number Validation when Making Phone Call', async function () {\n    this.timeout(10000);\n    let conditionalDescribe = describe;\n    const isLoginSuccess = await ensureLogin(Auth, accountWithMultiDP);\n    if (!isLoginSuccess) {\n      conditionalDescribe = describe.skip;\n      console.error('Skip test case as failed to login with credential ', accountWithMultiDP);\n    }\n    conditionalDescribe('Basic Validation', function () {\n      this.timeout(10000);\n      beforeEach(async function () {\n        const isAlertClear = await waitUntilEqual(() => {\n          Alert.dismissAll();\n          return Alert.state.messages.length;\n        }, 'Alert', 0, 5);\n        if (!isAlertClear) {\n          console.error('Alert is not cleared after dismissAll');\n        }\n      });\n      it('Should Alert Invalid Number - Invalid Char in ToNumber', async () => {\n        try {\n          await Call.call({ phoneNumber: \"iamn%@onedi!@$%^&()_=\\\\][';/.,~nu><.,,?/mber#*\" });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension))\n          .to.equal(undefined);\n      });\n      it('Should Alert Invalid Number - Valid Special Char but No Digital Number', async () => {\n        try {\n          await Call.call({ phoneNumber: '+#' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension))\n          .to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call Number in E.164 Format', async () => {\n        try {\n          await Call.call({ phoneNumber: '+13065221112' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension))\n          .to.equal(undefined);\n      });\n    });\n\n    conditionalDescribe('Validation with US/CA Local Number Format', function () {\n      this.timeout(10000);\n      beforeEach(async function () {\n        const isAlertClear = await waitUntilEqual(() => {\n          Alert.dismissAll();\n          return Alert.state.messages.length;\n        }, 'Alert', 0, 5);\n        if (!isAlertClear) {\n          console.error('Alert is not cleared after dismissAll');\n          this.skip();\n        }\n      });\n      it('Should Not Alert Anything - Call Number in (xxx)xxx-xxxx Format', async () => {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '(650)827-5672' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber))\n          .to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call Number in (xxx) xxx-xxxx Format', async () => {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '(650) 827-5672' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber))\n          .to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call Number in (xxx)xxx-xxxx*xxx Format', async () => {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '(650)827-5672*101' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber))\n          .to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call Number in (xxx) xxx-xxxx Format', async () => {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '(650) 827-5672*101' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber))\n          .to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call Number in xxx-xxx-xxxx Format', async () => {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '650-827-5672' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber))\n          .to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call Number in xxx-xxx-xxxx*xxx Format', async () => {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '650-827-5672*101' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber))\n          .to.equal(undefined);\n      });\n    });\n\n    conditionalDescribe('Validation with Region Setting', function () {\n      this.timeout(10000);\n      beforeEach(async function () {\n        const isAlertClear = await waitUntilEqual(() => {\n          Alert.dismissAll();\n          return Alert.state.messages.length;\n        }, 'Alert', 0, 5);\n        if (!isAlertClear) {\n          console.error('Alert is not cleared after dismissAll');\n          this.skip();\n        }\n      });\n      it('Should Alert No AreaCode - Call 7 Digital Number with US Dialing Plan without Area Code', async () => {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '6545672' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber))\n          .to.equal(undefined);\n      });\n      it('Should Alert No AreaCode - Call 7 Digital Number with CA Dialing Plan without Area Code', async () => {\n        RegionSettings.setData({ countryCode: 'CA', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '6545672' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber))\n          .to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call 7 Digital Number with US Dialing Plan and Area Code', async function () {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '650' });\n        try {\n          await Call.call({ phoneNumber: '6545672' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(Call.__toNumber).to.equal('+16506545672');\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call 7 Digital Number with CA Dialing Plan and Area Code', async function () {\n        RegionSettings.setData({ countryCode: 'CA', areaCode: '250' });\n        try {\n          await Call.call({ phoneNumber: '6545672' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(Call.__toNumber).to.equal('+12506545672');\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call 7 Digital Number with non US/CA Dialing Plan', async function () {\n        RegionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '6545672' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(Call.__toNumber).to.equal('+446545672');\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call greater than 7 Digital Number with US Dialing Plan and Area Code', async function () {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '650' });\n        try {\n          await Call.call({ phoneNumber: '2501234567' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(Call.__toNumber).to.equal('+12501234567');\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call greater than 7 Digital Number with CA Dialing Plan and Area Code', async function () {\n        RegionSettings.setData({ countryCode: 'CA', areaCode: '250' });\n        try {\n          await Call.call({ phoneNumber: '6501234567' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(Call.__toNumber).to.equal('+16501234567');\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call greater than 7 Digital Number with non US/CA Dialing Plan', async function () {\n        RegionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '1234567890' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(Call.__toNumber).to.equal('+441234567890');\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.equal(undefined);\n      });\n      it('Should Alert Special Number - Call 911 with US Dialing Plan', async function () {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '911' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.not.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.equal(undefined);\n      });\n      it('Should Alert Special Number - Call 999 with GB Dialing Plan', async function () {\n        RegionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '999' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.not.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.equal(undefined);\n      });\n      it('Should Not Alert Special Number - Call 999 with US Dialing Plan', async function () {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '999' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.equal(undefined);\n      });\n      it('Should Not Alert Special Number - Call 911 with GB Dialing Plan', async function () {\n        RegionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '911' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call 101(Existed Extension/Not Special Number) with US Dialing Plan', async function () {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '101' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.equal(undefined);\n      });\n      it('Should Alert Special Number - Call 101(Existed Extension/Speical Number) with GB Dialing Plan', async function () {\n        RegionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '101' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.not.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.equal(undefined);\n      });\n      it('Should Not Alert Anything - Call 102(Existed Extension) with GB Dialing Plan', async function () {\n        RegionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '102' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.equal(undefined);\n      });\n      it('Should Alert Not An Extension - Call 998(Non Extension) with US Dialing Plan', async function () {\n        RegionSettings.setData({ countryCode: 'US', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '998' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.not.equal(undefined);\n      });\n      it('Should Alert Not An Extension - Call 998(Non Extension) with GB Dialing Plan', async function () {\n        RegionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        try {\n          await Call.call({ phoneNumber: '998' });\n        } catch (e) {\n          console.error(e);\n        }\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noToNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.noAreaCode)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.specialNumber)).to.equal(undefined);\n        expect(containsErrorMessage(Alert.state.messages, callErrors.notAnExtension)).to.not.equal(undefined);\n      });\n    });\n  });\n};\n"]}