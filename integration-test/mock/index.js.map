{"version":3,"sources":["integration-test/mock/index.js"],"names":["createSDK","mockApi","authentication","logout","tokenRefresh","presence","presenceUpdate","dialingPlan","extensionInfo","extensionList","accountInfo","apiInfo","messageSync","updateMessageStatus","authzProfile","blockedNumber","forwardingNumber","phoneNumber","accountPhoneNumber","subscription","numberParser","sms","addressBook","callLog","device","conferencing","activeCalls","restore","mockForbidden","mockClient","ringOut","ringOutUpdate","mockForLogin","require","polyfill","RingCentral","fetchMock","dialingPlanBody","extensionBody","extensionListBody","accountBody","subscriptionBody","apiInfoBody","messageSyncBody","authzProfileBody","blockedNumberBody","forwardingNumberBody","phoneNumberBody","accountPhoneNumberBody","presenceBody","numberParserBody","smsBody","ringOutBody","messageStoreBody","addressBookBody","callLogBody","deviceBody","conferencingBody","activeCallsBody","mockServer","options","opts","appKey","appSecret","server","Request","constructor","Response","Headers","fetch","bind","refreshDelayMs","redirectUri","cachePrefix","method","path","url","body","status","statusText","headers","isOnce","responseHeaders","isJson","mockUrl","mock","once","sendAsJson","times","access_token","token_type","expires_in","refresh_token","refresh_token_expires_in","scope","expireTime","Date","getTime","owner_id","endpoint_id","failure","message","error_description","description","id","uri","extension","extensionNumber","presenceStatus","telephonyStatus","userStatus","dndStatus","extensionId","mockResponse","syncInfo","syncType","syncToken","syncTime","now","toISOString","client","service","mockAuthzProfile","mockExtensionInfo","mockForwardingNumber","mockMessageSync","mockConferencing","mockActiveCalls"],"mappings":"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","file":"index.js","sourcesContent":["require('es6-promise').polyfill();\n// require('./pubnub');\nconst RingCentral = require('ringcentral');\nconst fetchMock = require('fetch-mock');\n\nconst dialingPlanBody = require('./data/dialingPlan');\nconst extensionBody = require('./data/extensionInfo');\nconst extensionListBody = require('./data/extension');\nconst accountBody = require('./data/accountInfo');\nconst subscriptionBody = require('./data/subscription');\nconst apiInfoBody = require('./data/subscription');\nconst messageSyncBody = require('./data/messageSync');\nconst authzProfileBody = require('./data/authzProfile');\nconst blockedNumberBody = require('./data/blockedNumber');\nconst forwardingNumberBody = require('./data/forwardingNumber');\nconst phoneNumberBody = require('./data/phoneNumber');\nconst accountPhoneNumberBody = require('./data/accountPhoneNumber');\nconst presenceBody = require('./data/presence.json');\nconst numberParserBody = require('./data/numberParser.json');\nconst smsBody = require('./data/sms.json');\nconst ringOutBody = require('./data/ringOut.json');\nconst messageStoreBody = require('./data/messageStore.json');\nconst addressBookBody = require('./data/addressBook.json');\nconst callLogBody = require('./data/callLog.json');\nconst deviceBody = require('./data/device.json');\nconst conferencingBody = require('./data/conferencing.json');\nconst activeCallsBody = require('./data/activeCalls.json');\n\nconst mockServer = 'http://whatever';\nexport function createSDK(options = {}) {\n  const opts = {\n    ...options,\n    appKey: 'test key',\n    appSecret: 'test secret',\n    server: mockServer,\n    Request: fetchMock.constructor.Request,\n    Response: fetchMock.constructor.Response,\n    Headers: fetchMock.constructor.Headers,\n    fetch: fetchMock.fetchMock.bind(fetchMock),\n    refreshDelayMs: 1,\n    redirectUri: 'http://foo',\n    cachePrefix: 'sdkPrefix',\n  };\n  return new RingCentral(opts);\n}\n\nexport function mockApi({\n  method = 'GET',\n  path,\n  server = mockServer,\n  url,\n  body = {},\n  status = 200,\n  statusText = 'OK',\n  headers,\n  isOnce = true,\n}) {\n  let responseHeaders;\n  const isJson = typeof body !== 'string';\n  if (isJson && !headers) {\n    responseHeaders = { 'Content-Type': 'application/json' };\n  } else {\n    responseHeaders = headers;\n  }\n  let mockUrl;\n  if (url) {\n    mockUrl = url;\n  } else {\n    mockUrl = `${server}${path}`;\n  }\n  const mock = isOnce ? fetchMock.once.bind(fetchMock) : fetchMock.mock.bind(fetchMock);\n  mock(mockUrl, {\n    body: isJson ? JSON.stringify(body) : body,\n    status,\n    statusText,\n    headers: responseHeaders,\n    sendAsJson: false\n  }, {\n    method,\n    times: isOnce ? 1 : 20,\n  });\n}\n\nexport function authentication() {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/oauth/token',\n    body: {\n      access_token: 'ACCESS_TOKEN',\n      token_type: 'bearer',\n      expires_in: 3600,\n      refresh_token: 'REFRESH_TOKEN',\n      refresh_token_expires_in: 60480,\n      scope: 'SMS RCM Foo Boo',\n      expireTime: new Date().getTime() + 3600000,\n      owner_id: '23231231\"',\n      endpoint_id: '3213213131',\n    }\n  });\n}\n\nexport function logout() {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/oauth/revoke',\n    isOnce: false,\n  });\n}\n\nexport function tokenRefresh(failure) {\n  if (!failure) {\n    mockApi({\n      method: 'POST',\n      path: '/restapi/oauth/token',\n      body: {\n        access_token: 'ACCESS_TOKEN_FROM_REFRESH',\n        token_type: 'bearer',\n        expires_in: 3600,\n        refresh_token: 'REFRESH_TOKEN_FROM_REFRESH',\n        refresh_token_expires_in: 60480,\n        scope: 'SMS RCM Foo Boo'\n      }\n    });\n  } else {\n    mockApi({\n      method: 'POST',\n      path: '/restapi/oauth/token',\n      body: {\n        message: 'Wrong token',\n        error_description: 'Wrong token',\n        description: 'Wrong token'\n      },\n      status: 400,\n    });\n  }\n}\n\nexport function presence(id) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/${id}/presence`,\n    body: {\n      uri: `https://platform.ringcentral.com/restapi/v1.0/account/123/extension/${id}/presence`,\n      extension: {\n        uri: `https://platform.ringcentral.com/restapi/v1.0/account/123/extension/${id}`,\n        extensionNumber: '101',\n        id,\n      },\n      activeCalls: [],\n      presenceStatus: 'Available',\n      telephonyStatus: 'Ringing',\n      userStatus: 'Available',\n      dndStatus: 'TakeAllCalls',\n      extensionId: id\n    }\n  });\n}\n\nexport function presenceUpdate(id, mockResponse = {}) {\n  mockApi({\n    path: `/restapi/v1.0/account/~/extension/${id}/presence`,\n    method: 'PUT',\n    body: {\n      ...presenceBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function dialingPlan(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/dialing-plan?perPage=MAX&page=1',\n    body: {\n      ...dialingPlanBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function extensionInfo(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~',\n    body: {\n      ...extensionBody,\n      ...mockResponse,\n    },\n    isOnce: false,\n  });\n}\n\nexport function extensionList(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension?`,\n    body: {\n      ...extensionListBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function accountInfo(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~',\n    body: {\n      ...accountBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function apiInfo(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0',\n    body: {\n      ...apiInfoBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function messageSync(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/message-sync`,\n    body: {\n      ...messageSyncBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function updateMessageStatus(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/message-store`,\n    method: 'PUT',\n    body: {\n      ...messageStoreBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function authzProfile(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/authz-profile',\n    body: {\n      ...authzProfileBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function blockedNumber(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/blocked-number',\n    body: {\n      ...blockedNumberBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function forwardingNumber(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/forwarding-number`,\n    body: {\n      ...forwardingNumberBody,\n      ...mockResponse\n    }\n  });\n}\n\nexport function phoneNumber(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/phone-number`,\n    body: {\n      ...phoneNumberBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function accountPhoneNumber(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/phone-number`,\n    body: {\n      ...accountPhoneNumberBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function subscription(mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    url: `begin:${mockServer}/restapi/v1.0/subscription`,\n    body: {\n      ...subscriptionBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n  mockApi({\n    method: 'PUT',\n    url: `begin:${mockServer}/restapi/v1.0/subscription`,\n    body: {\n      ...subscriptionBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n  mockApi({\n    method: 'DELETE',\n    url: `begin:${mockServer}/restapi/v1.0/subscription`,\n    body: {\n      ...subscriptionBody,\n      ...mockResponse,\n    },\n    isOnce: false\n  });\n}\n\nexport function numberParser(mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    url: `begin:${mockServer}/restapi/v1.0/number-parser/`,\n    body: {\n      ...numberParserBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function sms(mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/v1.0/account/~/extension/~/sms',\n    body: {\n      ...smsBody,\n      ...mockResponse,\n    }\n  });\n}\nexport function addressBook(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/address-book-sync`,\n    body: {\n      ...addressBookBody,\n      ...{\n        syncInfo: {\n          syncType: addressBookBody.syncType,\n          syncToken: addressBookBody.syncToken,\n          syncTime: ((new Date(Date.now() + 24 * 60 * 60 * 1000))).toISOString()\n        }\n      },\n      ...mockResponse,\n    },\n    isOnce: false,\n  });\n}\n\n\nexport function callLog(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/call-log-sync`,\n    body: {\n      ...callLogBody,\n      ...{\n        syncInfo: {\n          syncType: callLogBody.syncType,\n          syncToken: callLogBody.syncToken,\n          syncTime: ((new Date(Date.now() + 24 * 60 * 60 * 1000))).toISOString()\n        }\n      },\n      ...mockResponse,\n    },\n    isOnce: false,\n  });\n}\n\nexport function device(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/device`,\n    body: {\n      ...deviceBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function conferencing(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/conferencing',\n    body: {\n      ...conferencingBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function activeCalls(mockResponse = {}) {\n  mockApi({\n    method: 'GET',\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/active-calls`,\n    body: {\n      ...activeCallsBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function restore() {\n  fetchMock.restore();\n}\n\nexport function mockForbidden({\n  method = 'GET',\n  path,\n  url,\n  body = ''\n}) {\n  mockApi({\n    method,\n    path,\n    body,\n    url,\n    status: 403,\n  });\n}\n\nexport function mockClient(client) {\n  client.service = createSDK({});\n}\n\nexport function ringOut(mockResponse = {}) {\n  mockApi({\n    isOnce: false,\n    method: 'POST',\n    url: `${mockServer}/restapi/v1.0/account/~/extension/~/ring-out`,\n    body: {\n      ...ringOutBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function ringOutUpdate(mockResponse = {}) {\n  mockApi({\n    isOnce: false,\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/ring-out/`,\n    body: {\n      ...ringOutBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function mockForLogin({\n  mockAuthzProfile = true,\n  mockExtensionInfo = true,\n  mockForwardingNumber = true,\n  mockMessageSync = true,\n  mockConferencing = true,\n  mockActiveCalls = true\n} = {}) {\n  authentication();\n  logout();\n  tokenRefresh();\n  presence('~');\n  dialingPlan();\n  if (mockExtensionInfo) {\n    extensionInfo();\n  }\n  accountInfo();\n  apiInfo();\n  if (mockAuthzProfile) {\n    authzProfile();\n  }\n  device();\n  extensionList();\n  accountPhoneNumber();\n  blockedNumber();\n  if (mockForwardingNumber) {\n    forwardingNumber();\n  }\n  if (mockMessageSync) {\n    messageSync();\n  }\n  phoneNumber();\n  subscription();\n  callLog();\n  addressBook();\n  if (mockConferencing) {\n    conferencing();\n  }\n  if (mockActiveCalls) {\n    activeCalls();\n  }\n}\n\n\n"]}