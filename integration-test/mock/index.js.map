{"version":3,"sources":["integration-test/mock/index.js"],"names":["createSDK","mockApi","authentication","logout","tokenRefresh","presence","presenceUpdate","dialingPlan","extensionInfo","extensionList","accountInfo","apiInfo","messageSync","authzProfile","blockedNumber","forwardingNumber","phoneNumber","subscription","numberParser","sms","restore","mockForLogin","mockClient","ringOut","ringOutUpdate","require","polyfill","RingCentral","fetchMock","dialingPlanBody","extensionBody","extensionListBody","accountBody","subscriptionBody","apiInfoBody","messageSyncBody","authzProfileBody","blockedNumberBody","forwardingNumberBody","phoneNumberBody","presenceBody","numberParserBody","smsBody","ringOutBody","mockServer","options","opts","appKey","appSecret","server","Request","constructor","Response","Headers","fetch","bind","refreshDelayMs","redirectUri","cachePrefix","method","path","url","body","status","statusText","headers","isOnce","responseHeaders","isJson","mockUrl","mock","once","sendAsJson","times","access_token","token_type","expires_in","refresh_token","refresh_token_expires_in","scope","expireTime","Date","getTime","owner_id","endpoint_id","failure","message","error_description","description","id","uri","extension","extensionNumber","activeCalls","presenceStatus","telephonyStatus","userStatus","dndStatus","extensionId","mockResponse","mockAuthzProfile","client","service"],"mappings":"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","file":"index.js","sourcesContent":["require('es6-promise').polyfill();\nrequire('./pubnub');\nconst RingCentral = require('ringcentral');\nconst fetchMock = require('fetch-mock');\n\nconst dialingPlanBody = require('./data/dialingPlan');\nconst extensionBody = require('./data/extensionInfo');\nconst extensionListBody = require('./data/extension');\nconst accountBody = require('./data/accountInfo');\nconst subscriptionBody = require('./data/subscription');\nconst apiInfoBody = require('./data/subscription');\nconst messageSyncBody = require('./data/messageSync');\nconst authzProfileBody = require('./data/authzProfile');\nconst blockedNumberBody = require('./data/blockedNumber');\nconst forwardingNumberBody = require('./data/forwardingNumber');\nconst phoneNumberBody = require('./data/phoneNumber');\nconst presenceBody = require('./data/presence.json');\nconst numberParserBody = require('./data/numberParser.json');\nconst smsBody = require('./data/sms.json');\nconst ringOutBody = require('./data/ringOut.json');\n\nconst mockServer = 'http://whatever';\nexport function createSDK(options = {}) {\n  const opts = {\n    ...options,\n    appKey: 'test key',\n    appSecret: 'test secret',\n    server: mockServer,\n    Request: fetchMock.constructor.Request,\n    Response: fetchMock.constructor.Response,\n    Headers: fetchMock.constructor.Headers,\n    fetch: fetchMock.fetchMock.bind(fetchMock),\n    refreshDelayMs: 1,\n    redirectUri: 'http://foo',\n    cachePrefix: 'sdkPrefix',\n  };\n  return new RingCentral(opts);\n}\n\nexport function mockApi({\n  method = 'GET',\n  path,\n  server = mockServer,\n  url,\n  body = {},\n  status = 200,\n  statusText = 'OK',\n  headers,\n  isOnce = true,\n}) {\n  let responseHeaders;\n  const isJson = typeof body !== 'string';\n  if (isJson && !headers) {\n    responseHeaders = { 'Content-Type': 'application/json' };\n  } else {\n    responseHeaders = headers;\n  }\n  let mockUrl;\n  if (url) {\n    mockUrl = url;\n  } else {\n    mockUrl = `${server}${path}`;\n  }\n  const mock = isOnce ? fetchMock.once.bind(fetchMock) : fetchMock.mock.bind(fetchMock);\n  mock(mockUrl, {\n    body: isJson ? JSON.stringify(body) : body,\n    status,\n    statusText,\n    headers: responseHeaders,\n    sendAsJson: false\n  }, {\n    method,\n    times: 1,\n  });\n}\n\nexport function authentication() {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/oauth/token',\n    body: {\n      access_token: 'ACCESS_TOKEN',\n      token_type: 'bearer',\n      expires_in: 3600,\n      refresh_token: 'REFRESH_TOKEN',\n      refresh_token_expires_in: 60480,\n      scope: 'SMS RCM Foo Boo',\n      expireTime: new Date().getTime() + 3600000,\n      owner_id: '23231231\"',\n      endpoint_id: '3213213131',\n    }\n  });\n}\n\nexport function logout() {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/oauth/revoke'\n  });\n}\n\nexport function tokenRefresh(failure) {\n  if (!failure) {\n    mockApi({\n      method: 'POST',\n      path: '/restapi/oauth/token',\n      body: {\n        access_token: 'ACCESS_TOKEN_FROM_REFRESH',\n        token_type: 'bearer',\n        expires_in: 3600,\n        refresh_token: 'REFRESH_TOKEN_FROM_REFRESH',\n        refresh_token_expires_in: 60480,\n        scope: 'SMS RCM Foo Boo'\n      }\n    });\n  } else {\n    mockApi({\n      method: 'POST',\n      path: '/restapi/oauth/token',\n      body: {\n        message: 'Wrong token',\n        error_description: 'Wrong token',\n        description: 'Wrong token'\n      },\n      status: 400,\n    });\n  }\n}\n\nexport function presence(id) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/${id}/presence`,\n    body: {\n      uri: `https://platform.ringcentral.com/restapi/v1.0/account/123/extension/${id}/presence`,\n      extension: {\n        uri: `https://platform.ringcentral.com/restapi/v1.0/account/123/extension/${id}`,\n        extensionNumber: '101',\n        id,\n      },\n      activeCalls: [],\n      presenceStatus: 'Available',\n      telephonyStatus: 'Ringing',\n      userStatus: 'Available',\n      dndStatus: 'TakeAllCalls',\n      extensionId: id\n    }\n  });\n}\n\nexport function presenceUpdate(id, mockResponse = {}) {\n  mockApi({\n    path: `/restapi/v1.0/account/~/extension/${id}/presence`,\n    method: 'PUT',\n    body: {\n      ...presenceBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function dialingPlan(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/dialing-plan?perPage=MAX&page=1',\n    body: {\n      ...dialingPlanBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function extensionInfo(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~',\n    body: {\n      ...extensionBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function extensionList(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension?`,\n    body: {\n      ...extensionListBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function accountInfo(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~',\n    body: {\n      ...accountBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function apiInfo(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0',\n    body: {\n      ...apiInfoBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function messageSync(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/message-sync`,\n    body: {\n      ...messageSyncBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function authzProfile(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/authz-profile',\n    body: {\n      ...authzProfileBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function blockedNumber(mockResponse = {}) {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/blocked-number',\n    body: {\n      ...blockedNumberBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function forwardingNumber(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/forwarding-number`,\n    body: {\n      ...forwardingNumberBody,\n      ...mockResponse\n    }\n  });\n}\n\nexport function phoneNumber(mockResponse = {}) {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/phone-number`,\n    body: {\n      ...phoneNumberBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function subscription(mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    url: `begin:${mockServer}/restapi/v1.0/subscription`,\n    body: {\n      ...subscriptionBody,\n      ...mockResponse,\n    }\n  });\n  mockApi({\n    method: 'PUT',\n    url: `begin:${mockServer}/restapi/v1.0/subscription`,\n    body: {\n      ...subscriptionBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function numberParser(mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    url: `begin:${mockServer}/restapi/v1.0/number-parser/`,\n    body: {\n      ...numberParserBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function sms(mockResponse = {}) {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/v1.0/account/~/extension/~/sms',\n    body: {\n      ...smsBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function restore() {\n  fetchMock.restore();\n}\n\nexport function mockForLogin({ mockAuthzProfile = true } = {}) {\n  authentication();\n  logout();\n  tokenRefresh();\n  presence('~');\n  dialingPlan();\n  extensionInfo();\n  accountInfo();\n  apiInfo();\n  if (mockAuthzProfile) {\n    authzProfile();\n  }\n  extensionList();\n  blockedNumber();\n  forwardingNumber();\n  messageSync();\n  phoneNumber();\n  subscription();\n}\n\nexport function mockClient(client) {\n  client.service = createSDK({});\n}\n\nexport function ringOut(mockResponse = {}) {\n  mockApi({\n    isOnce: false,\n    method: 'POST',\n    url: `${mockServer}/restapi/v1.0/account/~/extension/~/ring-out`,\n    body: {\n      ...ringOutBody,\n      ...mockResponse,\n    }\n  });\n}\n\nexport function ringOutUpdate(mockResponse = {}) {\n  mockApi({\n    isOnce: false,\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/ring-out/`,\n    body: {\n      ...ringOutBody,\n      ...mockResponse,\n    }\n  });\n}\n"]}